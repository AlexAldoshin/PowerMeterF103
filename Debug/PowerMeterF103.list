
PowerMeterF103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000947c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae0  08009590  08009590  00019590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a070  0800a070  00020354  2**0
                  CONTENTS
  4 .ARM          00000000  0800a070  0800a070  00020354  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a070  0800a070  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a070  0800a070  0001a070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a074  0800a074  0001a074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  0800a078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000035a0  20000354  0800a3cc  00020354  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200038f4  0800a3cc  000238f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 12 .debug_info   000207ea  00000000  00000000  0002037d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005589  00000000  00000000  00040b67  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e28e  00000000  00000000  000460f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000ce8  00000000  00000000  00054380  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000031e8  00000000  00000000  00055068  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001f2a7  00000000  00000000  00058250  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000156e5  00000000  00000000  000774f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0009c2da  00000000  00000000  0008cbdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00128eb6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000031a0  00000000  00000000  00128f34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000354 	.word	0x20000354
 800012c:	00000000 	.word	0x00000000
 8000130:	08009574 	.word	0x08009574

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000358 	.word	0x20000358
 800014c:	08009574 	.word	0x08009574

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2uiz>:
 8001110:	0042      	lsls	r2, r0, #1
 8001112:	d20e      	bcs.n	8001132 <__aeabi_f2uiz+0x22>
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30b      	bcc.n	8001132 <__aeabi_f2uiz+0x22>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d409      	bmi.n	8001138 <__aeabi_f2uiz+0x28>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	fa23 f002 	lsr.w	r0, r3, r2
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr
 8001138:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800113c:	d101      	bne.n	8001142 <__aeabi_f2uiz+0x32>
 800113e:	0242      	lsls	r2, r0, #9
 8001140:	d102      	bne.n	8001148 <__aeabi_f2uiz+0x38>
 8001142:	f04f 30ff 	mov.w	r0, #4294967295
 8001146:	4770      	bx	lr
 8001148:	f04f 0000 	mov.w	r0, #0
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001154:	2400      	movs	r4, #0
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
  /**ADC1 GPIO Configuration
  PA1   ------> ADC1_IN1
  PA2   ------> ADC1_IN2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 8001156:	f240 6706 	movw	r7, #1542	; 0x606
{
 800115a:	b091      	sub	sp, #68	; 0x44
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800115c:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8001160:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001168:	4b62      	ldr	r3, [pc, #392]	; (80012f4 <MX_ADC1_Init+0x1a4>)
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800116a:	9404      	str	r4, [sp, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800116c:	9401      	str	r4, [sp, #4]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800116e:	9406      	str	r4, [sp, #24]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	940c      	str	r4, [sp, #48]	; 0x30
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001172:	9405      	str	r4, [sp, #20]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	940f      	str	r4, [sp, #60]	; 0x3c
 8001176:	699a      	ldr	r2, [r3, #24]
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);

  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8001178:	f44f 7680 	mov.w	r6, #256	; 0x100
 800117c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001180:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001182:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 8001184:	a910      	add	r1, sp, #64	; 0x40
 8001186:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800118a:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 800118c:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->APB2ENR, Periphs);
 800118e:	699a      	ldr	r2, [r3, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001190:	4859      	ldr	r0, [pc, #356]	; (80012f8 <MX_ADC1_Init+0x1a8>)
 8001192:	f042 0204 	orr.w	r2, r2, #4
 8001196:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001198:	699b      	ldr	r3, [r3, #24]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 800119a:	f841 7d14 	str.w	r7, [r1, #-20]!
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80011a4:	9b02      	ldr	r3, [sp, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f002 fb29 	bl	80037fc <LL_GPIO_Init>
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80011aa:	4b54      	ldr	r3, [pc, #336]	; (80012fc <MX_ADC1_Init+0x1ac>)
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80011ac:	4d54      	ldr	r5, [pc, #336]	; (8001300 <MX_ADC1_Init+0x1b0>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	a904      	add	r1, sp, #16
 80011b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80011b6:	f022 0210 	bic.w	r2, r2, #16
 80011ba:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4628      	mov	r0, r5
 80011c0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80011c4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	f042 0220 	orr.w	r2, r2, #32
 80011cc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011d4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011dc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80011e4:	4332      	orrs	r2, r6
 80011e6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80011ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80011f2:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 80011f4:	e9cd 4604 	strd	r4, r6, [sp, #16]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80011f8:	f002 fa60 	bl	80036bc <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80011fc:	a910      	add	r1, sp, #64	; 0x40
 80011fe:	f841 4d3c 	str.w	r4, [r1, #-60]!
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001202:	4628      	mov	r0, r5
 8001204:	f002 fa3c 	bl	8003680 <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM1_CH1;
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8001208:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_2RANKS;
 800120c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001210:	a906      	add	r1, sp, #24
 8001212:	4628      	mov	r0, r5
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_2RANKS;
 8001214:	e9cd 2307 	strd	r2, r3, [sp, #28]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8001218:	960a      	str	r6, [sp, #40]	; 0x28
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM1_CH1;
 800121a:	9406      	str	r4, [sp, #24]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 800121c:	9409      	str	r4, [sp, #36]	; 0x24
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800121e:	f002 fa65 	bl	80036ec <LL_ADC_REG_Init>
{
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001222:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8001308 <MX_ADC1_Init+0x1b8>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001226:	f44f 7240 	mov.w	r2, #768	; 0x300
 800122a:	fa92 f3a2 	rbit	r3, r2
 800122e:	f44f 7600 	mov.w	r6, #512	; 0x200
 8001232:	fab3 f383 	clz	r3, r3
 8001236:	fa26 f303 	lsr.w	r3, r6, r3
  
  MODIFY_REG(*preg,
 800123a:	f85c 1023 	ldr.w	r1, [ip, r3, lsl #2]
{
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800123e:	4c31      	ldr	r4, [pc, #196]	; (8001304 <MX_ADC1_Init+0x1b4>)
  MODIFY_REG(*preg,
 8001240:	f021 011f 	bic.w	r1, r1, #31
 8001244:	f041 0101 	orr.w	r1, r1, #1
 8001248:	f84c 1023 	str.w	r1, [ip, r3, lsl #2]
 800124c:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8001250:	fa97 f5a7 	rbit	r5, r7
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001254:	fab5 f585 	clz	r5, r5
 8001258:	fa27 f505 	lsr.w	r5, r7, r5
  
  MODIFY_REG(*preg,
 800125c:	f854 8025 	ldr.w	r8, [r4, r5, lsl #2]
 8001260:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8001264:	fa93 f1a3 	rbit	r1, r3
 8001268:	fab1 f181 	clz	r1, r1
 800126c:	fa93 f9a3 	rbit	r9, r3
 8001270:	f44f 1e40 	mov.w	lr, #3145728	; 0x300000
 8001274:	2007      	movs	r0, #7
 8001276:	fab9 f989 	clz	r9, r9
 800127a:	fa2e f101 	lsr.w	r1, lr, r1
 800127e:	fa00 f101 	lsl.w	r1, r0, r1
 8001282:	fa2e fe09 	lsr.w	lr, lr, r9
 8001286:	ea28 0101 	bic.w	r1, r8, r1
 800128a:	fa00 fe0e 	lsl.w	lr, r0, lr
 800128e:	ea41 010e 	orr.w	r1, r1, lr
 8001292:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
 8001296:	fa92 f2a2 	rbit	r2, r2
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800129a:	fab2 f282 	clz	r2, r2
 800129e:	fa26 f202 	lsr.w	r2, r6, r2
  MODIFY_REG(*preg,
 80012a2:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 80012a6:	f421 7178 	bic.w	r1, r1, #992	; 0x3e0
 80012aa:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80012ae:	f84c 1022 	str.w	r1, [ip, r2, lsl #2]
 80012b2:	fa97 f1a7 	rbit	r1, r7
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80012b6:	fab1 f181 	clz	r1, r1
 80012ba:	fa27 f101 	lsr.w	r1, r7, r1
  MODIFY_REG(*preg,
 80012be:	f854 5021 	ldr.w	r5, [r4, r1, lsl #2]
 80012c2:	fa93 f2a3 	rbit	r2, r3
 80012c6:	fab2 f282 	clz	r2, r2
 80012ca:	fa93 f3a3 	rbit	r3, r3
 80012ce:	f44f 06c0 	mov.w	r6, #6291456	; 0x600000
 80012d2:	fab3 f383 	clz	r3, r3
 80012d6:	fa26 f202 	lsr.w	r2, r6, r2
 80012da:	fa00 f202 	lsl.w	r2, r0, r2
 80012de:	fa26 f303 	lsr.w	r3, r6, r3
 80012e2:	ea25 0202 	bic.w	r2, r5, r2
 80012e6:	4098      	lsls	r0, r3
 80012e8:	4310      	orrs	r0, r2
 80012ea:	f844 0021 	str.w	r0, [r4, r1, lsl #2]
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_2);
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_239CYCLES_5);

}
 80012ee:	b011      	add	sp, #68	; 0x44
 80012f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40010800 	.word	0x40010800
 80012fc:	40020008 	.word	0x40020008
 8001300:	40012400 	.word	0x40012400
 8001304:	4001240c 	.word	0x4001240c
 8001308:	4001242c 	.word	0x4001242c

0800130c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800130c:	b530      	push	{r4, r5, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 800130e:	2200      	movs	r2, #0
  */
  hadc2.Instance = ADC2;
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001310:	f44f 2460 	mov.w	r4, #917504	; 0xe0000
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
 8001314:	2101      	movs	r1, #1
  hadc2.Instance = ADC2;
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_ADC2_Init+0x50>)
 8001318:	4d11      	ldr	r5, [pc, #68]	; (8001360 <MX_ADC2_Init+0x54>)
{
 800131a:	b085      	sub	sp, #20
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800131c:	4618      	mov	r0, r3
  ADC_ChannelConfTypeDef sConfig = {0};
 800131e:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8001322:	9203      	str	r2, [sp, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001324:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001326:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001328:	751a      	strb	r2, [r3, #20]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800132a:	605a      	str	r2, [r3, #4]
  hadc2.Instance = ADC2;
 800132c:	601d      	str	r5, [r3, #0]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800132e:	61dc      	str	r4, [r3, #28]
  hadc2.Init.NbrOfConversion = 1;
 8001330:	6119      	str	r1, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001332:	f001 f849 	bl	80023c8 <HAL_ADC_Init>
 8001336:	b970      	cbnz	r0, 8001356 <MX_ADC2_Init+0x4a>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001338:	2403      	movs	r4, #3
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800133a:	2201      	movs	r2, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800133c:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800133e:	a901      	add	r1, sp, #4
 8001340:	4806      	ldr	r0, [pc, #24]	; (800135c <MX_ADC2_Init+0x50>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001342:	e9cd 4201 	strd	r4, r2, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001346:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001348:	f001 f8fe 	bl	8002548 <HAL_ADC_ConfigChannel>
 800134c:	b108      	cbz	r0, 8001352 <MX_ADC2_Init+0x46>
  {
    Error_Handler();
 800134e:	f000 fd0d 	bl	8001d6c <Error_Handler>
  }

}
 8001352:	b005      	add	sp, #20
 8001354:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8001356:	f000 fd09 	bl	8001d6c <Error_Handler>
 800135a:	e7ed      	b.n	8001338 <MX_ADC2_Init+0x2c>
 800135c:	2000290c 	.word	0x2000290c
 8001360:	40012800 	.word	0x40012800

08001364 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	2300      	movs	r3, #0
{
 8001366:	b530      	push	{r4, r5, lr}
  if(adcHandle->Instance==ADC2)
 8001368:	6801      	ldr	r1, [r0, #0]
 800136a:	4a15      	ldr	r2, [pc, #84]	; (80013c0 <HAL_ADC_MspInit+0x5c>)
{
 800136c:	b087      	sub	sp, #28
  if(adcHandle->Instance==ADC2)
 800136e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001374:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(adcHandle->Instance==ADC2)
 8001378:	d001      	beq.n	800137e <HAL_ADC_MspInit+0x1a>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800137a:	b007      	add	sp, #28
 800137c:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800137e:	2508      	movs	r5, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001380:	2403      	movs	r4, #3
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001382:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001386:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800138a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	eb0d 0105 	add.w	r1, sp, r5
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001390:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001394:	619a      	str	r2, [r3, #24]
 8001396:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001398:	480a      	ldr	r0, [pc, #40]	; (80013c4 <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 800139a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800139e:	9200      	str	r2, [sp, #0]
 80013a0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	699a      	ldr	r2, [r3, #24]
 80013a4:	f042 0204 	orr.w	r2, r2, #4
 80013a8:	619a      	str	r2, [r3, #24]
 80013aa:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013ac:	9502      	str	r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b6:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	f001 f9c4 	bl	8002744 <HAL_GPIO_Init>
}
 80013bc:	b007      	add	sp, #28
 80013be:	bd30      	pop	{r4, r5, pc}
 80013c0:	40012800 	.word	0x40012800
 80013c4:	40010800 	.word	0x40010800

080013c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013c8:	b430      	push	{r4, r5}
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ca:	f44f 6000 	mov.w	r0, #2048	; 0x800
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ce:	2400      	movs	r4, #0
  SET_BIT(RCC->AHBENR, Periphs);
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <MX_DMA_Init+0x30>)
 80013d2:	b082      	sub	sp, #8
 80013d4:	695a      	ldr	r2, [r3, #20]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d6:	4d09      	ldr	r5, [pc, #36]	; (80013fc <MX_DMA_Init+0x34>)
 80013d8:	f042 0201 	orr.w	r2, r2, #1
 80013dc:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80013de:	695b      	ldr	r3, [r3, #20]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e0:	4907      	ldr	r1, [pc, #28]	; (8001400 <MX_DMA_Init+0x38>)
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80013e8:	9b01      	ldr	r3, [sp, #4]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ea:	68eb      	ldr	r3, [r5, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	f881 430b 	strb.w	r4, [r1, #779]	; 0x30b
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f0:	6008      	str	r0, [r1, #0]
  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);

}
 80013f2:	b002      	add	sp, #8
 80013f4:	bc30      	pop	{r4, r5}
 80013f6:	4770      	bx	lr
 80013f8:	40021000 	.word	0x40021000
 80013fc:	e000ed00 	.word	0xe000ed00
 8001400:	e000e100 	.word	0xe000e100

08001404 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001408:	2500      	movs	r5, #0
{
 800140a:	b08c      	sub	sp, #48	; 0x30
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
  SET_BIT(RCC->APB2ENR, Periphs);
 8001410:	4b3c      	ldr	r3, [pc, #240]	; (8001504 <MX_GPIO_Init+0x100>)
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001412:	9505      	str	r5, [sp, #20]
 8001414:	9506      	str	r5, [sp, #24]
 8001416:	699a      	ldr	r2, [r3, #24]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001418:	2601      	movs	r6, #1
 800141a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  LL_GPIO_ResetOutputPin(Vbat_ON_GPIO_Port, Vbat_ON_Pin);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800141e:	2702      	movs	r7, #2
 8001420:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /**/
  GPIO_InitStruct.Pin = Vbat_ON_Pin;
 8001424:	f240 1401 	movw	r4, #257	; 0x101
 8001428:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800142a:	699a      	ldr	r2, [r3, #24]
 800142c:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8001520 <MX_GPIO_Init+0x11c>
 8001430:	f002 0210 	and.w	r2, r2, #16
 8001434:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8001436:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001438:	699a      	ldr	r2, [r3, #24]
 800143a:	4833      	ldr	r0, [pc, #204]	; (8001508 <MX_GPIO_Init+0x104>)
 800143c:	f042 0220 	orr.w	r2, r2, #32
 8001440:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001442:	699a      	ldr	r2, [r3, #24]
 8001444:	f002 0220 	and.w	r2, r2, #32
 8001448:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 800144a:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->APB2ENR, Periphs);
 800144c:	699a      	ldr	r2, [r3, #24]
 800144e:	f042 0204 	orr.w	r2, r2, #4
 8001452:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001454:	699a      	ldr	r2, [r3, #24]
 8001456:	f002 0204 	and.w	r2, r2, #4
 800145a:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800145c:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->APB2ENR, Periphs);
 800145e:	699a      	ldr	r2, [r3, #24]
 8001460:	f042 0208 	orr.w	r2, r2, #8
 8001464:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f003 0308 	and.w	r3, r3, #8
 800146c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 800146e:	4b27      	ldr	r3, [pc, #156]	; (800150c <MX_GPIO_Init+0x108>)
  (void)tmpreg;
 8001470:	9a01      	ldr	r2, [sp, #4]
 8001472:	6141      	str	r1, [r0, #20]
 8001474:	f8c8 6014 	str.w	r6, [r8, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001478:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 800147a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800147c:	e9cd 6708 	strd	r6, r7, [sp, #32]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001480:	f002 f9bc 	bl	80037fc <LL_GPIO_Init>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
  LL_GPIO_Init(Vbat_ON_GPIO_Port, &GPIO_InitStruct);
 8001484:	a907      	add	r1, sp, #28
 8001486:	4640      	mov	r0, r8
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001488:	e9cd 6708 	strd	r6, r7, [sp, #32]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800148c:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = Vbat_ON_Pin;
 8001490:	9407      	str	r4, [sp, #28]
  LL_GPIO_Init(Vbat_ON_GPIO_Port, &GPIO_InitStruct);
 8001492:	f002 f9b3 	bl	80037fc <LL_GPIO_Init>
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001496:	4a1e      	ldr	r2, [pc, #120]	; (8001510 <MX_GPIO_Init+0x10c>)
 8001498:	270f      	movs	r7, #15
 800149a:	6893      	ldr	r3, [r2, #8]
 800149c:	f023 030f 	bic.w	r3, r3, #15
 80014a0:	fa97 f1a7 	rbit	r1, r7
 80014a4:	6093      	str	r3, [r2, #8]
  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
  EXTI_InitStruct.LineCommand = ENABLE;
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
  LL_EXTI_Init(&EXTI_InitStruct);
 80014a6:	a805      	add	r0, sp, #20
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80014a8:	9605      	str	r6, [sp, #20]
  EXTI_InitStruct.LineCommand = ENABLE;
 80014aa:	f88d 6018 	strb.w	r6, [sp, #24]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80014ae:	f88d 5019 	strb.w	r5, [sp, #25]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80014b2:	f88d 601a 	strb.w	r6, [sp, #26]
  LL_EXTI_Init(&EXTI_InitStruct);
 80014b6:	f002 f943 	bl	8003740 <LL_EXTI_Init>
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80014ba:	4916      	ldr	r1, [pc, #88]	; (8001514 <MX_GPIO_Init+0x110>)
 80014bc:	68cb      	ldr	r3, [r1, #12]
 80014be:	f023 0301 	bic.w	r3, r3, #1
 80014c2:	fa96 f6a6 	rbit	r6, r6
 80014c6:	60cb      	str	r3, [r1, #12]
 80014c8:	fa94 f2a4 	rbit	r2, r4
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80014cc:	fab2 f282 	clz	r2, r2
 80014d0:	fa94 f4a4 	rbit	r4, r4
 80014d4:	fab4 f484 	clz	r4, r4
 80014d8:	2008      	movs	r0, #8
 80014da:	2640      	movs	r6, #64	; 0x40
 80014dc:	680b      	ldr	r3, [r1, #0]
 80014de:	0092      	lsls	r2, r2, #2
 80014e0:	fa07 f202 	lsl.w	r2, r7, r2
 80014e4:	00a4      	lsls	r4, r4, #2
 80014e6:	ea23 0302 	bic.w	r3, r3, r2
 80014ea:	fa00 f404 	lsl.w	r4, r0, r4
 80014ee:	431c      	orrs	r4, r3
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f0:	4809      	ldr	r0, [pc, #36]	; (8001518 <MX_GPIO_Init+0x114>)
 80014f2:	600c      	str	r4, [r1, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f4:	4a09      	ldr	r2, [pc, #36]	; (800151c <MX_GPIO_Init+0x118>)
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f6:	68c3      	ldr	r3, [r0, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f8:	f882 5306 	strb.w	r5, [r2, #774]	; 0x306
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fc:	6016      	str	r6, [r2, #0]

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
  NVIC_EnableIRQ(EXTI0_IRQn);

}
 80014fe:	b00c      	add	sp, #48	; 0x30
 8001500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001504:	40021000 	.word	0x40021000
 8001508:	40011000 	.word	0x40011000
 800150c:	04200020 	.word	0x04200020
 8001510:	40010000 	.word	0x40010000
 8001514:	40010800 	.word	0x40010800
 8001518:	e000ed00 	.word	0xe000ed00
 800151c:	e000e100 	.word	0xe000e100
 8001520:	40010c00 	.word	0x40010c00

08001524 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001524:	b5f0      	push	{r4, r5, r6, r7, lr}
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001526:	2400      	movs	r4, #0
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001528:	2109      	movs	r1, #9
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800152a:	2003      	movs	r0, #3
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800152c:	2204      	movs	r2, #4
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800152e:	f24c 06c0 	movw	r6, #49344	; 0xc0c0
{
 8001532:	b08f      	sub	sp, #60	; 0x3c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	e9cd 4407 	strd	r4, r4, [sp, #28]
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001538:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 800153c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  SET_BIT(RCC->APB2ENR, Periphs);
 8001540:	4d1f      	ldr	r5, [pc, #124]	; (80015c0 <MX_I2C1_Init+0x9c>)
 8001542:	940d      	str	r4, [sp, #52]	; 0x34
 8001544:	69ab      	ldr	r3, [r5, #24]
  */
  LL_I2C_DisableOwnAddress2(I2C1);
  LL_I2C_DisableGeneralCall(I2C1);
  LL_I2C_EnableClockStretching(I2C1);
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
  I2C_InitStruct.ClockSpeed = 400000;
 8001546:	4f1f      	ldr	r7, [pc, #124]	; (80015c4 <MX_I2C1_Init+0xa0>)
 8001548:	f043 0308 	orr.w	r3, r3, #8
 800154c:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800154e:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001550:	9104      	str	r1, [sp, #16]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	9302      	str	r3, [sp, #8]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001558:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800155a:	9005      	str	r0, [sp, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155c:	481a      	ldr	r0, [pc, #104]	; (80015c8 <MX_I2C1_Init+0xa4>)
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800155e:	9603      	str	r6, [sp, #12]
  (void)tmpreg;
 8001560:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001562:	9206      	str	r2, [sp, #24]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
  I2C_InitStruct.OwnAddress1 = 0;
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001564:	f44f 6680 	mov.w	r6, #1024	; 0x400
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001568:	f002 f948 	bl	80037fc <LL_GPIO_Init>
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800156c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  SET_BIT(RCC->APB1ENR, Periphs);
 8001570:	69eb      	ldr	r3, [r5, #28]
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001572:	a908      	add	r1, sp, #32
 8001574:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001578:	61eb      	str	r3, [r5, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800157a:	69eb      	ldr	r3, [r5, #28]
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 800157c:	f5a5 35de 	sub.w	r5, r5, #113664	; 0x1bc00
 8001580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001584:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001586:	9b01      	ldr	r3, [sp, #4]
 8001588:	68eb      	ldr	r3, [r5, #12]
 800158a:	4628      	mov	r0, r5
 800158c:	f023 0301 	bic.w	r3, r3, #1
 8001590:	60eb      	str	r3, [r5, #12]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8001592:	682b      	ldr	r3, [r5, #0]
 8001594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001598:	602b      	str	r3, [r5, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800159a:	682b      	ldr	r3, [r5, #0]
 800159c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015a0:	602b      	str	r3, [r5, #0]
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80015a2:	9408      	str	r4, [sp, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 80015a4:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80015a8:	e9cd 620c 	strd	r6, r2, [sp, #48]	; 0x30
  I2C_InitStruct.ClockSpeed = 400000;
 80015ac:	9709      	str	r7, [sp, #36]	; 0x24
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80015ae:	f002 f9a3 	bl	80038f8 <LL_I2C_Init>
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 80015b2:	68eb      	ldr	r3, [r5, #12]
 80015b4:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80015b8:	60eb      	str	r3, [r5, #12]
  LL_I2C_SetOwnAddress2(I2C1, 0);

}
 80015ba:	b00f      	add	sp, #60	; 0x3c
 80015bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000
 80015c4:	00061a80 	.word	0x00061a80
 80015c8:	40010c00 	.word	0x40010c00

080015cc <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80015cc:	4a28      	ldr	r2, [pc, #160]	; (8001670 <SystemClock_Config+0xa4>)
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015ce:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80015d0:	4611      	mov	r1, r2
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80015d2:	6813      	ldr	r3, [r2, #0]
 80015d4:	f023 0307 	bic.w	r3, r3, #7
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	6013      	str	r3, [r2, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80015de:	680b      	ldr	r3, [r1, #0]
 80015e0:	f003 0307 	and.w	r3, r3, #7
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d1fa      	bne.n	80015de <SystemClock_Config+0x12>
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80015e8:	4b22      	ldr	r3, [pc, #136]	; (8001674 <SystemClock_Config+0xa8>)
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80015ea:	461a      	mov	r2, r3
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80015ec:	6819      	ldr	r1, [r3, #0]
 80015ee:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80015f2:	6019      	str	r1, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80015f4:	6813      	ldr	r3, [r2, #0]
  {
  }
  LL_RCC_HSE_Enable();

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80015f6:	0399      	lsls	r1, r3, #14
 80015f8:	d5fc      	bpl.n	80015f4 <SystemClock_Config+0x28>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80015fa:	6851      	ldr	r1, [r2, #4]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80015fc:	4b1d      	ldr	r3, [pc, #116]	; (8001674 <SystemClock_Config+0xa8>)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80015fe:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 8001602:	f441 11e8 	orr.w	r1, r1, #1900544	; 0x1d0000
 8001606:	6051      	str	r1, [r2, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001608:	6811      	ldr	r1, [r2, #0]
 800160a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800160e:	6011      	str	r1, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001610:	681a      	ldr	r2, [r3, #0]
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001612:	0192      	lsls	r2, r2, #6
 8001614:	d5fc      	bpl.n	8001610 <SystemClock_Config+0x44>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001616:	685a      	ldr	r2, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001618:	4c16      	ldr	r4, [pc, #88]	; (8001674 <SystemClock_Config+0xa8>)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800161a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800161e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001626:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800162a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 8001632:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	f022 0203 	bic.w	r2, r2, #3
 800163a:	f042 0202 	orr.w	r2, r2, #2
 800163e:	605a      	str	r2, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001640:	6863      	ldr	r3, [r4, #4]
 8001642:	f003 030c 	and.w	r3, r3, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001646:	2b08      	cmp	r3, #8
 8001648:	d1fa      	bne.n	8001640 <SystemClock_Config+0x74>
  {

  }
  LL_SetSystemCoreClock(72000000);
 800164a:	480b      	ldr	r0, [pc, #44]	; (8001678 <SystemClock_Config+0xac>)
 800164c:	f003 f9fa 	bl	8004a44 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001650:	2000      	movs	r0, #0
 8001652:	f000 fe71 	bl	8002338 <HAL_InitTick>
 8001656:	b108      	cbz	r0, 800165c <SystemClock_Config+0x90>
  __ASM volatile ("cpsid i" : : : "memory");
 8001658:	b672      	cpsid	i
 800165a:	e7fe      	b.n	800165a <SystemClock_Config+0x8e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 800165c:	6863      	ldr	r3, [r4, #4]
 800165e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001662:	6063      	str	r3, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_USBPRE, USBxSource);
 8001664:	6863      	ldr	r3, [r4, #4]
 8001666:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800166a:	6063      	str	r3, [r4, #4]
  {
    Error_Handler();
  }
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_8);
  LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_PLL_DIV_1_5);
}
 800166c:	bd10      	pop	{r4, pc}
 800166e:	bf00      	nop
 8001670:	40022000 	.word	0x40022000
 8001674:	40021000 	.word	0x40021000
 8001678:	044aa200 	.word	0x044aa200

0800167c <EXTI0_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <EXTI0_IRQHandler+0x40>)
 800167e:	695a      	ldr	r2, [r3, #20]
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8001680:	07d2      	lsls	r2, r2, #31
 8001682:	d51a      	bpl.n	80016ba <EXTI0_IRQHandler+0x3e>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8001684:	2101      	movs	r1, #1
    /* USER CODE BEGIN LL_EXTI_LINE_0 */
    MAX_current = 0;
    MIN_current = 0;
    ACT_current = 0;
    mAh_consumed = 0;
	Time_seconds = 0;
 8001686:	2200      	movs	r2, #0
{
 8001688:	b470      	push	{r4, r5, r6}
 800168a:	6159      	str	r1, [r3, #20]
    MAX_current = 0;
 800168c:	2300      	movs	r3, #0
	Time_seconds = 0;
 800168e:	4d0c      	ldr	r5, [pc, #48]	; (80016c0 <EXTI0_IRQHandler+0x44>)
	MAX_current_ALLTime = 0;
	Clock_Days = Clock_Hours = Clock_Minutes = Clock_Seconds = 0;
 8001690:	4e0c      	ldr	r6, [pc, #48]	; (80016c4 <EXTI0_IRQHandler+0x48>)
 8001692:	4c0d      	ldr	r4, [pc, #52]	; (80016c8 <EXTI0_IRQHandler+0x4c>)
 8001694:	480d      	ldr	r0, [pc, #52]	; (80016cc <EXTI0_IRQHandler+0x50>)
 8001696:	490e      	ldr	r1, [pc, #56]	; (80016d0 <EXTI0_IRQHandler+0x54>)
 8001698:	7022      	strb	r2, [r4, #0]
 800169a:	7002      	strb	r2, [r0, #0]
 800169c:	700a      	strb	r2, [r1, #0]
	Time_seconds = 0;
 800169e:	602a      	str	r2, [r5, #0]
	Clock_Days = Clock_Hours = Clock_Minutes = Clock_Seconds = 0;
 80016a0:	7032      	strb	r2, [r6, #0]
    MAX_current = 0;
 80016a2:	4d0c      	ldr	r5, [pc, #48]	; (80016d4 <EXTI0_IRQHandler+0x58>)
    MIN_current = 0;
 80016a4:	4c0c      	ldr	r4, [pc, #48]	; (80016d8 <EXTI0_IRQHandler+0x5c>)
    ACT_current = 0;
 80016a6:	480d      	ldr	r0, [pc, #52]	; (80016dc <EXTI0_IRQHandler+0x60>)
    mAh_consumed = 0;
 80016a8:	490d      	ldr	r1, [pc, #52]	; (80016e0 <EXTI0_IRQHandler+0x64>)
	MAX_current_ALLTime = 0;
 80016aa:	4a0e      	ldr	r2, [pc, #56]	; (80016e4 <EXTI0_IRQHandler+0x68>)
    MAX_current = 0;
 80016ac:	602b      	str	r3, [r5, #0]
    MIN_current = 0;
 80016ae:	6023      	str	r3, [r4, #0]
    ACT_current = 0;
 80016b0:	6003      	str	r3, [r0, #0]
    mAh_consumed = 0;
 80016b2:	600b      	str	r3, [r1, #0]
	MAX_current_ALLTime = 0;
 80016b4:	6013      	str	r3, [r2, #0]
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80016b6:	bc70      	pop	{r4, r5, r6}
 80016b8:	4770      	bx	lr
 80016ba:	4770      	bx	lr
 80016bc:	40010400 	.word	0x40010400
 80016c0:	200022c8 	.word	0x200022c8
 80016c4:	200022b7 	.word	0x200022b7
 80016c8:	200022b6 	.word	0x200022b6
 80016cc:	200022b5 	.word	0x200022b5
 80016d0:	200022b4 	.word	0x200022b4
 80016d4:	200022bc 	.word	0x200022bc
 80016d8:	200022c4 	.word	0x200022c4
 80016dc:	20000370 	.word	0x20000370
 80016e0:	200022cc 	.word	0x200022cc
 80016e4:	200022c0 	.word	0x200022c0

080016e8 <Display_Data>:
	else
		MAX_current = MAX_low * LOW_PR;
}

void Display_Data(void)
{
 80016e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Time_seconds++;
	Clock_Seconds++;
 80016ec:	4cb2      	ldr	r4, [pc, #712]	; (80019b8 <Display_Data+0x2d0>)
	if(Clock_Seconds%60 == 0){
 80016ee:	4ab3      	ldr	r2, [pc, #716]	; (80019bc <Display_Data+0x2d4>)
	Clock_Seconds++;
 80016f0:	7821      	ldrb	r1, [r4, #0]
	Time_seconds++;
 80016f2:	4fb3      	ldr	r7, [pc, #716]	; (80019c0 <Display_Data+0x2d8>)
	Clock_Seconds++;
 80016f4:	3101      	adds	r1, #1
 80016f6:	b2c9      	uxtb	r1, r1
	if(Clock_Seconds%60 == 0){
 80016f8:	fba2 0301 	umull	r0, r3, r2, r1
 80016fc:	095b      	lsrs	r3, r3, #5
	Time_seconds++;
 80016fe:	683d      	ldr	r5, [r7, #0]
	if(Clock_Seconds%60 == 0){
 8001700:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8001704:	eba1 0383 	sub.w	r3, r1, r3, lsl #2
	Time_seconds++;
 8001708:	3501      	adds	r5, #1
	if(Clock_Seconds%60 == 0){
 800170a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
{
 800170e:	b0b7      	sub	sp, #220	; 0xdc
	Clock_Seconds++;
 8001710:	7021      	strb	r1, [r4, #0]
	Time_seconds++;
 8001712:	603d      	str	r5, [r7, #0]
	if(Clock_Seconds%60 == 0){
 8001714:	d110      	bne.n	8001738 <Display_Data+0x50>
		Clock_Minutes++;
 8001716:	48ab      	ldr	r0, [pc, #684]	; (80019c4 <Display_Data+0x2dc>)
		Clock_Seconds = 0;
 8001718:	7023      	strb	r3, [r4, #0]
		Clock_Minutes++;
 800171a:	7801      	ldrb	r1, [r0, #0]
 800171c:	3101      	adds	r1, #1
 800171e:	b2c9      	uxtb	r1, r1
		if(Clock_Minutes%60 ==0){
 8001720:	fba2 2301 	umull	r2, r3, r2, r1
 8001724:	095b      	lsrs	r3, r3, #5
 8001726:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800172a:	eba1 0383 	sub.w	r3, r1, r3, lsl #2
 800172e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		Clock_Minutes++;
 8001732:	7001      	strb	r1, [r0, #0]
		if(Clock_Minutes%60 ==0){
 8001734:	f000 808c 	beq.w	8001850 <Display_Data+0x168>
				Clock_Days++;
				Clock_Hours = 0;
			}
		}
	}
	mAh_consumed += ACT_current;
 8001738:	f8df b2d8 	ldr.w	fp, [pc, #728]	; 8001a14 <Display_Data+0x32c>
 800173c:	4ea2      	ldr	r6, [pc, #648]	; (80019c8 <Display_Data+0x2e0>)
 800173e:	f8db 9000 	ldr.w	r9, [fp]
 8001742:	6831      	ldr	r1, [r6, #0]
 8001744:	4648      	mov	r0, r9
 8001746:	f7ff fa15 	bl	8000b74 <__addsf3>
 800174a:	4682      	mov	sl, r0
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800174c:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800174e:	4b9f      	ldr	r3, [pc, #636]	; (80019cc <Display_Data+0x2e4>)
 8001750:	499f      	ldr	r1, [pc, #636]	; (80019d0 <Display_Data+0x2e8>)
{
  /* Note: on this STM32 serie, there is no flag ADC group regular           */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "EOC" is corresponding to flag "EOS"                 */
  /*       in other STM32 families).                                          */
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS));
 8001752:	461a      	mov	r2, r3
 8001754:	f8c6 a000 	str.w	sl, [r6]
 8001758:	6108      	str	r0, [r1, #16]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800175a:	6899      	ldr	r1, [r3, #8]
 800175c:	f441 01a0 	orr.w	r1, r1, #5242880	; 0x500000
 8001760:	6099      	str	r1, [r3, #8]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS));
 8001762:	6813      	ldr	r3, [r2, #0]

	uint16_t Vbat = 0;
	LL_GPIO_SetOutputPin(Vbat_ON_GPIO_Port, Vbat_ON_Pin);
	LL_ADC_REG_StartConversionSWStart(ADC2);
	while(LL_ADC_IsActiveFlag_EOS(ADC2)==0);
 8001764:	079b      	lsls	r3, r3, #30
 8001766:	d5fc      	bpl.n	8001762 <Display_Data+0x7a>
	Vbat = LL_ADC_REG_ReadConversionData12(ADC2);
	Vbat = (uint16_t)(__LL_ADC_CALC_DATA_TO_VOLTAGE((uint32_t) V_REF, Vbat, LL_ADC_RESOLUTION_12B) / RES_DEVIDER);
 8001768:	f640 43e4 	movw	r3, #3300	; 0xce4
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 800176c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800176e:	4899      	ldr	r0, [pc, #612]	; (80019d4 <Display_Data+0x2ec>)
 8001770:	b292      	uxth	r2, r2
 8001772:	fb03 f302 	mul.w	r3, r3, r2
 8001776:	fba0 2003 	umull	r2, r0, r0, r3
 800177a:	1a1b      	subs	r3, r3, r0
 800177c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001780:	0ac0      	lsrs	r0, r0, #11
 8001782:	f7fe fe2f 	bl	80003e4 <__aeabi_ui2d>
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001786:	f04f 0801 	mov.w	r8, #1
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	f7fe fced 	bl	800016c <__adddf3>
 8001792:	f7ff f979 	bl	8000a88 <__aeabi_d2uiz>
 8001796:	4a8e      	ldr	r2, [pc, #568]	; (80019d0 <Display_Data+0x2e8>)
	LL_GPIO_ResetOutputPin(Vbat_ON_GPIO_Port, Vbat_ON_Pin);

	if(DSP_flag != 0){
 8001798:	4b8f      	ldr	r3, [pc, #572]	; (80019d8 <Display_Data+0x2f0>)
 800179a:	f8c2 8014 	str.w	r8, [r2, #20]
 800179e:	781b      	ldrb	r3, [r3, #0]
	Vbat = (uint16_t)(__LL_ADC_CALC_DATA_TO_VOLTAGE((uint32_t) V_REF, Vbat, LL_ADC_RESOLUTION_12B) / RES_DEVIDER);
 80017a0:	b282      	uxth	r2, r0
 80017a2:	9207      	str	r2, [sp, #28]
	if(DSP_flag != 0){
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d16b      	bne.n	8001880 <Display_Data+0x198>
 80017a8:	4b8c      	ldr	r3, [pc, #560]	; (80019dc <Display_Data+0x2f4>)
 80017aa:	ac1d      	add	r4, sp, #116	; 0x74
 80017ac:	9306      	str	r3, [sp, #24]
		sprintf(max_curr_str,"%.6f mA",(float)(MAX_current));
		SSD1306_Puts(max_curr_str,&Font_7x10,SSD1306_COLOR_WHITE);
		SSD1306_UpdateScreen();
	}

	if(MAX_current_ALLTime < MAX_current)
 80017ae:	f8df 8268 	ldr.w	r8, [pc, #616]	; 8001a18 <Display_Data+0x330>
 80017b2:	681e      	ldr	r6, [r3, #0]
 80017b4:	f8d8 7000 	ldr.w	r7, [r8]
 80017b8:	4631      	mov	r1, r6
 80017ba:	4638      	mov	r0, r7
 80017bc:	f7ff fc80 	bl	80010c0 <__aeabi_fcmplt>
 80017c0:	b110      	cbz	r0, 80017c8 <Display_Data+0xe0>
		MAX_current_ALLTime = MAX_current;
 80017c2:	4637      	mov	r7, r6
 80017c4:	f8c8 6000 	str.w	r6, [r8]

	char USB_string[100];
	sprintf(USB_string,"start %u %u %u %u %u %u %u stop\r\n",
			(unsigned int)Time_seconds,				//seconds
			(unsigned int)(MIN_current*1000000.f),	//nA
 80017c8:	4b85      	ldr	r3, [pc, #532]	; (80019e0 <Display_Data+0x2f8>)
 80017ca:	4986      	ldr	r1, [pc, #536]	; (80019e4 <Display_Data+0x2fc>)
 80017cc:	6818      	ldr	r0, [r3, #0]
 80017ce:	f7ff fad9 	bl	8000d84 <__aeabi_fmul>
	sprintf(USB_string,"start %u %u %u %u %u %u %u stop\r\n",
 80017d2:	f7ff fc9d 	bl	8001110 <__aeabi_f2uiz>
 80017d6:	9b07      	ldr	r3, [sp, #28]
 80017d8:	4680      	mov	r8, r0
			(unsigned int)(ACT_current*1000000.f),	//nA
			(unsigned int)((float)mAh_consumed/3.6),		//mkAh
			(unsigned int)(MAX_current*1000000.f),	//nA
			(unsigned int)(MAX_current_ALLTime*1000000.f),//nA
 80017da:	4982      	ldr	r1, [pc, #520]	; (80019e4 <Display_Data+0x2fc>)
 80017dc:	4638      	mov	r0, r7
	sprintf(USB_string,"start %u %u %u %u %u %u %u stop\r\n",
 80017de:	9304      	str	r3, [sp, #16]
			(unsigned int)(MAX_current_ALLTime*1000000.f),//nA
 80017e0:	f7ff fad0 	bl	8000d84 <__aeabi_fmul>
	sprintf(USB_string,"start %u %u %u %u %u %u %u stop\r\n",
 80017e4:	f7ff fc94 	bl	8001110 <__aeabi_f2uiz>
			(unsigned int)(MAX_current*1000000.f),	//nA
 80017e8:	497e      	ldr	r1, [pc, #504]	; (80019e4 <Display_Data+0x2fc>)
	sprintf(USB_string,"start %u %u %u %u %u %u %u stop\r\n",
 80017ea:	9003      	str	r0, [sp, #12]
			(unsigned int)(MAX_current*1000000.f),	//nA
 80017ec:	4630      	mov	r0, r6
 80017ee:	f7ff fac9 	bl	8000d84 <__aeabi_fmul>
	sprintf(USB_string,"start %u %u %u %u %u %u %u stop\r\n",
 80017f2:	f7ff fc8d 	bl	8001110 <__aeabi_f2uiz>
 80017f6:	9002      	str	r0, [sp, #8]
			(unsigned int)((float)mAh_consumed/3.6),		//mkAh
 80017f8:	4650      	mov	r0, sl
 80017fa:	f7fe fe15 	bl	8000428 <__aeabi_f2d>
 80017fe:	a36c      	add	r3, pc, #432	; (adr r3, 80019b0 <Display_Data+0x2c8>)
 8001800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001804:	f7fe fe68 	bl	80004d8 <__aeabi_dmul>
	sprintf(USB_string,"start %u %u %u %u %u %u %u stop\r\n",
 8001808:	f7ff f93e 	bl	8000a88 <__aeabi_d2uiz>
			(unsigned int)(ACT_current*1000000.f),	//nA
 800180c:	4975      	ldr	r1, [pc, #468]	; (80019e4 <Display_Data+0x2fc>)
	sprintf(USB_string,"start %u %u %u %u %u %u %u stop\r\n",
 800180e:	9001      	str	r0, [sp, #4]
			(unsigned int)(ACT_current*1000000.f),	//nA
 8001810:	4648      	mov	r0, r9
 8001812:	f7ff fab7 	bl	8000d84 <__aeabi_fmul>
	sprintf(USB_string,"start %u %u %u %u %u %u %u stop\r\n",
 8001816:	f7ff fc7b 	bl	8001110 <__aeabi_f2uiz>
 800181a:	4643      	mov	r3, r8
 800181c:	462a      	mov	r2, r5
 800181e:	9000      	str	r0, [sp, #0]
 8001820:	4971      	ldr	r1, [pc, #452]	; (80019e8 <Display_Data+0x300>)
 8001822:	4620      	mov	r0, r4
 8001824:	f004 ff9c 	bl	8006760 <siprintf>
			(unsigned int)Vbat);						//mV
	CDC_Transmit_FS((unsigned char*)&USB_string,(uint16_t)strlen(USB_string));
 8001828:	4620      	mov	r0, r4
 800182a:	f7fe fc91 	bl	8000150 <strlen>
 800182e:	b281      	uxth	r1, r0
 8001830:	4620      	mov	r0, r4
 8001832:	f003 ff0b 	bl	800564c <CDC_Transmit_FS>
  uint32_t odr = READ_REG(GPIOx->ODR);
 8001836:	496d      	ldr	r1, [pc, #436]	; (80019ec <Display_Data+0x304>)
 8001838:	68cb      	ldr	r3, [r1, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & pinmask) << 16u) | (~odr & pinmask));
 800183a:	43da      	mvns	r2, r3
 800183c:	041b      	lsls	r3, r3, #16
 800183e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001842:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001846:	4313      	orrs	r3, r2
 8001848:	610b      	str	r3, [r1, #16]
	LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_13);
}
 800184a:	b037      	add	sp, #220	; 0xdc
 800184c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			Clock_Hours++;
 8001850:	4e67      	ldr	r6, [pc, #412]	; (80019f0 <Display_Data+0x308>)
			if(Clock_Hours%24 == 0){
 8001852:	4a68      	ldr	r2, [pc, #416]	; (80019f4 <Display_Data+0x30c>)
			Clock_Hours++;
 8001854:	7831      	ldrb	r1, [r6, #0]
			Clock_Minutes = 0;
 8001856:	7003      	strb	r3, [r0, #0]
			Clock_Hours++;
 8001858:	3101      	adds	r1, #1
 800185a:	b2c9      	uxtb	r1, r1
			if(Clock_Hours%24 == 0){
 800185c:	fba2 2301 	umull	r2, r3, r2, r1
 8001860:	091b      	lsrs	r3, r3, #4
 8001862:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001866:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 800186a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			Clock_Hours++;
 800186e:	7031      	strb	r1, [r6, #0]
			if(Clock_Hours%24 == 0){
 8001870:	f47f af62 	bne.w	8001738 <Display_Data+0x50>
				Clock_Days++;
 8001874:	4a60      	ldr	r2, [pc, #384]	; (80019f8 <Display_Data+0x310>)
				Clock_Hours = 0;
 8001876:	7033      	strb	r3, [r6, #0]
				Clock_Days++;
 8001878:	7813      	ldrb	r3, [r2, #0]
 800187a:	3301      	adds	r3, #1
 800187c:	7013      	strb	r3, [r2, #0]
 800187e:	e75b      	b.n	8001738 <Display_Data+0x50>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001880:	2000      	movs	r0, #0
 8001882:	f000 fb43 	bl	8001f0c <SSD1306_Fill>
		SSD1306_GotoXY(0,0);
 8001886:	2100      	movs	r1, #0
		char time_str[25] = {'\0'};
 8001888:	460d      	mov	r5, r1
		SSD1306_GotoXY(0,0);
 800188a:	4608      	mov	r0, r1
 800188c:	f000 fb4a 	bl	8001f24 <SSD1306_GotoXY>
		sprintf(time_str,"D:%1i H:%02i M:%02i S:%02i", (int)Clock_Days,(int)Clock_Hours,(int)Clock_Minutes,(int)Clock_Seconds);
 8001890:	494c      	ldr	r1, [pc, #304]	; (80019c4 <Display_Data+0x2dc>)
 8001892:	7820      	ldrb	r0, [r4, #0]
 8001894:	7809      	ldrb	r1, [r1, #0]
 8001896:	4b56      	ldr	r3, [pc, #344]	; (80019f0 <Display_Data+0x308>)
 8001898:	4a57      	ldr	r2, [pc, #348]	; (80019f8 <Display_Data+0x310>)
		char time_str[25] = {'\0'};
 800189a:	ac1d      	add	r4, sp, #116	; 0x74
		sprintf(time_str,"D:%1i H:%02i M:%02i S:%02i", (int)Clock_Days,(int)Clock_Hours,(int)Clock_Minutes,(int)Clock_Seconds);
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	7812      	ldrb	r2, [r2, #0]
 80018a0:	e9cd 1000 	strd	r1, r0, [sp]
 80018a4:	4955      	ldr	r1, [pc, #340]	; (80019fc <Display_Data+0x314>)
		char time_str[25] = {'\0'};
 80018a6:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80018aa:	e9c4 5503 	strd	r5, r5, [r4, #12]
 80018ae:	6165      	str	r5, [r4, #20]
 80018b0:	7625      	strb	r5, [r4, #24]
		sprintf(time_str,"D:%1i H:%02i M:%02i S:%02i", (int)Clock_Days,(int)Clock_Hours,(int)Clock_Minutes,(int)Clock_Seconds);
 80018b2:	4620      	mov	r0, r4
		char time_str[25] = {'\0'};
 80018b4:	951d      	str	r5, [sp, #116]	; 0x74
		sprintf(time_str,"D:%1i H:%02i M:%02i S:%02i", (int)Clock_Days,(int)Clock_Hours,(int)Clock_Minutes,(int)Clock_Seconds);
 80018b6:	f004 ff53 	bl	8006760 <siprintf>
		SSD1306_Puts(time_str,&Font_7x10,SSD1306_COLOR_WHITE);
 80018ba:	4642      	mov	r2, r8
 80018bc:	4950      	ldr	r1, [pc, #320]	; (8001a00 <Display_Data+0x318>)
 80018be:	4620      	mov	r0, r4
 80018c0:	f000 fb36 	bl	8001f30 <SSD1306_Puts>
		SSD1306_GotoXY(0,16);
 80018c4:	4628      	mov	r0, r5
 80018c6:	2110      	movs	r1, #16
 80018c8:	f000 fb2c 	bl	8001f24 <SSD1306_GotoXY>
		sprintf(Curr_str,"%.6f mA",ACT_current);
 80018cc:	f8db 0000 	ldr.w	r0, [fp]
		char Curr_str[20] = {'\0'};
 80018d0:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
 80018d4:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
 80018d8:	950d      	str	r5, [sp, #52]	; 0x34
		sprintf(Curr_str,"%.6f mA",ACT_current);
 80018da:	f7fe fda5 	bl	8000428 <__aeabi_f2d>
 80018de:	460b      	mov	r3, r1
 80018e0:	4602      	mov	r2, r0
 80018e2:	4948      	ldr	r1, [pc, #288]	; (8001a04 <Display_Data+0x31c>)
 80018e4:	a809      	add	r0, sp, #36	; 0x24
 80018e6:	f004 ff3b 	bl	8006760 <siprintf>
		SSD1306_Puts(Curr_str,&Font_7x10,SSD1306_COLOR_WHITE);
 80018ea:	4642      	mov	r2, r8
 80018ec:	4944      	ldr	r1, [pc, #272]	; (8001a00 <Display_Data+0x318>)
 80018ee:	a809      	add	r0, sp, #36	; 0x24
 80018f0:	f000 fb1e 	bl	8001f30 <SSD1306_Puts>
		SSD1306_GotoXY(0,26);
 80018f4:	4628      	mov	r0, r5
 80018f6:	211a      	movs	r1, #26
 80018f8:	f000 fb14 	bl	8001f24 <SSD1306_GotoXY>
		SSD1306_GotoXY(0,26);
 80018fc:	4628      	mov	r0, r5
 80018fe:	211a      	movs	r1, #26
		char mAh_str[20]  = {'\0'};
 8001900:	e9cd 550e 	strd	r5, r5, [sp, #56]	; 0x38
 8001904:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
 8001908:	9512      	str	r5, [sp, #72]	; 0x48
		SSD1306_GotoXY(0,26);
 800190a:	f000 fb0b 	bl	8001f24 <SSD1306_GotoXY>
		sprintf(mAh_str,"%.6f aver.",(float)(mAh_consumed/Time_seconds));
 800190e:	6838      	ldr	r0, [r7, #0]
 8001910:	f7ff f9e0 	bl	8000cd4 <__aeabi_ui2f>
 8001914:	4601      	mov	r1, r0
 8001916:	6830      	ldr	r0, [r6, #0]
 8001918:	f7ff fae8 	bl	8000eec <__aeabi_fdiv>
 800191c:	f7fe fd84 	bl	8000428 <__aeabi_f2d>
 8001920:	460b      	mov	r3, r1
 8001922:	4602      	mov	r2, r0
 8001924:	4938      	ldr	r1, [pc, #224]	; (8001a08 <Display_Data+0x320>)
 8001926:	a80e      	add	r0, sp, #56	; 0x38
 8001928:	f004 ff1a 	bl	8006760 <siprintf>
		SSD1306_Puts(mAh_str,&Font_7x10,SSD1306_COLOR_WHITE);
 800192c:	4642      	mov	r2, r8
 800192e:	4934      	ldr	r1, [pc, #208]	; (8001a00 <Display_Data+0x318>)
 8001930:	a80e      	add	r0, sp, #56	; 0x38
 8001932:	f000 fafd 	bl	8001f30 <SSD1306_Puts>
		SSD1306_GotoXY(0,36);
 8001936:	4628      	mov	r0, r5
 8001938:	2124      	movs	r1, #36	; 0x24
 800193a:	f000 faf3 	bl	8001f24 <SSD1306_GotoXY>
		sprintf(mAh_con_str,"%.6f mAh",(float)(mAh_consumed/3600));
 800193e:	4933      	ldr	r1, [pc, #204]	; (8001a0c <Display_Data+0x324>)
 8001940:	6830      	ldr	r0, [r6, #0]
		char mAh_con_str[20]  = {'\0'};
 8001942:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
 8001946:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 800194a:	9517      	str	r5, [sp, #92]	; 0x5c
		sprintf(mAh_con_str,"%.6f mAh",(float)(mAh_consumed/3600));
 800194c:	f7ff fa1a 	bl	8000d84 <__aeabi_fmul>
 8001950:	f7fe fd6a 	bl	8000428 <__aeabi_f2d>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	a813      	add	r0, sp, #76	; 0x4c
 800195a:	492d      	ldr	r1, [pc, #180]	; (8001a10 <Display_Data+0x328>)
 800195c:	f004 ff00 	bl	8006760 <siprintf>
		sprintf(max_curr_str,"%.6f mA",(float)(MAX_current));
 8001960:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <Display_Data+0x2f4>)
		SSD1306_Puts(mAh_con_str,&Font_7x10,SSD1306_COLOR_WHITE);
 8001962:	4642      	mov	r2, r8
 8001964:	4926      	ldr	r1, [pc, #152]	; (8001a00 <Display_Data+0x318>)
 8001966:	a813      	add	r0, sp, #76	; 0x4c
		sprintf(max_curr_str,"%.6f mA",(float)(MAX_current));
 8001968:	9306      	str	r3, [sp, #24]
		SSD1306_Puts(mAh_con_str,&Font_7x10,SSD1306_COLOR_WHITE);
 800196a:	f000 fae1 	bl	8001f30 <SSD1306_Puts>
		SSD1306_GotoXY(0,48);
 800196e:	4628      	mov	r0, r5
 8001970:	2130      	movs	r1, #48	; 0x30
 8001972:	f000 fad7 	bl	8001f24 <SSD1306_GotoXY>
		sprintf(max_curr_str,"%.6f mA",(float)(MAX_current));
 8001976:	9b06      	ldr	r3, [sp, #24]
		char max_curr_str[20]  = {'\0'};
 8001978:	e9cd 5518 	strd	r5, r5, [sp, #96]	; 0x60
		sprintf(max_curr_str,"%.6f mA",(float)(MAX_current));
 800197c:	6818      	ldr	r0, [r3, #0]
		char max_curr_str[20]  = {'\0'};
 800197e:	e9cd 551a 	strd	r5, r5, [sp, #104]	; 0x68
 8001982:	951c      	str	r5, [sp, #112]	; 0x70
		sprintf(max_curr_str,"%.6f mA",(float)(MAX_current));
 8001984:	f7fe fd50 	bl	8000428 <__aeabi_f2d>
 8001988:	460b      	mov	r3, r1
 800198a:	4602      	mov	r2, r0
 800198c:	491d      	ldr	r1, [pc, #116]	; (8001a04 <Display_Data+0x31c>)
 800198e:	a818      	add	r0, sp, #96	; 0x60
 8001990:	f004 fee6 	bl	8006760 <siprintf>
		SSD1306_Puts(max_curr_str,&Font_7x10,SSD1306_COLOR_WHITE);
 8001994:	4642      	mov	r2, r8
 8001996:	491a      	ldr	r1, [pc, #104]	; (8001a00 <Display_Data+0x318>)
 8001998:	a818      	add	r0, sp, #96	; 0x60
 800199a:	f000 fac9 	bl	8001f30 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800199e:	f000 fa43 	bl	8001e28 <SSD1306_UpdateScreen>
 80019a2:	683d      	ldr	r5, [r7, #0]
 80019a4:	f8db 9000 	ldr.w	r9, [fp]
 80019a8:	f8d6 a000 	ldr.w	sl, [r6]
 80019ac:	9b06      	ldr	r3, [sp, #24]
 80019ae:	e6fe      	b.n	80017ae <Display_Data+0xc6>
 80019b0:	71c71c72 	.word	0x71c71c72
 80019b4:	3fd1c71c 	.word	0x3fd1c71c
 80019b8:	200022b7 	.word	0x200022b7
 80019bc:	88888889 	.word	0x88888889
 80019c0:	200022c8 	.word	0x200022c8
 80019c4:	200022b6 	.word	0x200022b6
 80019c8:	200022cc 	.word	0x200022cc
 80019cc:	40012800 	.word	0x40012800
 80019d0:	40010c00 	.word	0x40010c00
 80019d4:	00100101 	.word	0x00100101
 80019d8:	200022b8 	.word	0x200022b8
 80019dc:	200022bc 	.word	0x200022bc
 80019e0:	200022c4 	.word	0x200022c4
 80019e4:	49742400 	.word	0x49742400
 80019e8:	08009d38 	.word	0x08009d38
 80019ec:	40011000 	.word	0x40011000
 80019f0:	200022b5 	.word	0x200022b5
 80019f4:	aaaaaaab 	.word	0xaaaaaaab
 80019f8:	200022b4 	.word	0x200022b4
 80019fc:	08009cfc 	.word	0x08009cfc
 8001a00:	20000000 	.word	0x20000000
 8001a04:	08009d18 	.word	0x08009d18
 8001a08:	08009d20 	.word	0x08009d20
 8001a0c:	3991a2b4 	.word	0x3991a2b4
 8001a10:	08009d2c 	.word	0x08009d2c
 8001a14:	20000370 	.word	0x20000370
 8001a18:	200022c0 	.word	0x200022c0

08001a1c <Device_CFG>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001a1c:	482d      	ldr	r0, [pc, #180]	; (8001ad4 <Device_CFG+0xb8>)
	HIGH_Amp.Zero_Level = (float)((float)HIGH_noise/(float)SAMPLES);
	LOW_Amp.Zero_Level 	= (float)((float)LOW_noise/(float)SAMPLES);
}

void Device_CFG(void)
{
 8001a1e:	b538      	push	{r3, r4, r5, lr}
 8001a20:	6801      	ldr	r1, [r0, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001a22:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <Device_CFG+0xbc>)
 8001a24:	f021 0101 	bic.w	r1, r1, #1
 8001a28:	6001      	str	r1, [r0, #0]
 8001a2a:	6819      	ldr	r1, [r3, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8001a2c:	4a2b      	ldr	r2, [pc, #172]	; (8001adc <Device_CFG+0xc0>)
    data_reg_addr = (uint32_t)&(ADCx->DR);
 8001a2e:	4d2c      	ldr	r5, [pc, #176]	; (8001ae0 <Device_CFG+0xc4>)
	LL_TIM_DisableCounter(TIM1);
	uint32_t calib_wait = 0;
	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_1);
	LL_DMA_ConfigAddresses(DMA1,LL_DMA_CHANNEL_1,LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA),
 8001a30:	4c2c      	ldr	r4, [pc, #176]	; (8001ae4 <Device_CFG+0xc8>)
 8001a32:	f021 0101 	bic.w	r1, r1, #1
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 8001a36:	4610      	mov	r0, r2
 8001a38:	6019      	str	r1, [r3, #0]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
  }
  /* Direction Periph to Memory and Memory to Memory */
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8001a3a:	609d      	str	r5, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8001a3c:	60dc      	str	r4, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001a3e:	6859      	ldr	r1, [r3, #4]
 8001a40:	0c09      	lsrs	r1, r1, #16
 8001a42:	0409      	lsls	r1, r1, #16
 8001a44:	f441 617a 	orr.w	r1, r1, #4000	; 0xfa0
 8001a48:	6059      	str	r1, [r3, #4]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001a4a:	6819      	ldr	r1, [r3, #0]
 8001a4c:	f041 0102 	orr.w	r1, r1, #2
 8001a50:	6019      	str	r1, [r3, #0]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8001a52:	6819      	ldr	r1, [r3, #0]
 8001a54:	f041 0104 	orr.w	r1, r1, #4
 8001a58:	6019      	str	r1, [r3, #0]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8001a5a:	6819      	ldr	r1, [r3, #0]
 8001a5c:	f041 0108 	orr.w	r1, r1, #8
 8001a60:	6019      	str	r1, [r3, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8001a62:	6893      	ldr	r3, [r2, #8]
 8001a64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a68:	6093      	str	r3, [r2, #8]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8001a6a:	6893      	ldr	r3, [r2, #8]
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6093      	str	r3, [r2, #8]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 8001a72:	6893      	ldr	r3, [r2, #8]
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	6093      	str	r3, [r2, #8]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 8001a7a:	6883      	ldr	r3, [r0, #8]
	calib_wait = ((LL_ADC_DELAY_ENABLE_CALIB_ADC_CYCLES * 32) >> 1);
	while(calib_wait != 0){
		calib_wait--;
	}
	LL_ADC_StartCalibration(ADC1);
	while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0) {
 8001a7c:	075b      	lsls	r3, r3, #29
 8001a7e:	d4fc      	bmi.n	8001a7a <Device_CFG+0x5e>
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8001a80:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <Device_CFG+0xcc>)
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  SET_BIT(TIMx->CCER, Channels);
 8001a82:	4914      	ldr	r1, [pc, #80]	; (8001ad4 <Device_CFG+0xb8>)
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 8001a84:	461a      	mov	r2, r3
 8001a86:	6a08      	ldr	r0, [r1, #32]
 8001a88:	f040 0001 	orr.w	r0, r0, #1
 8001a8c:	6208      	str	r0, [r1, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001a8e:	6808      	ldr	r0, [r1, #0]
 8001a90:	f040 0001 	orr.w	r0, r0, #1
 8001a94:	6008      	str	r0, [r1, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8001a96:	6899      	ldr	r1, [r3, #8]
 8001a98:	f041 0101 	orr.w	r1, r1, #1
 8001a9c:	6099      	str	r1, [r3, #8]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 8001a9e:	6899      	ldr	r1, [r3, #8]
 8001aa0:	f041 0104 	orr.w	r1, r1, #4
 8001aa4:	6099      	str	r1, [r3, #8]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 8001aa6:	6894      	ldr	r4, [r2, #8]
	calib_wait = ((LL_ADC_DELAY_ENABLE_CALIB_ADC_CYCLES * 32) >> 1);
	while(calib_wait != 0){
		calib_wait--;
	}
	LL_ADC_StartCalibration(ADC2);
	while (LL_ADC_IsCalibrationOnGoing(ADC2) != 0) {
 8001aa8:	f014 0404 	ands.w	r4, r4, #4
 8001aac:	d1fb      	bne.n	8001aa6 <Device_CFG+0x8a>
	}

	LL_ADC_Enable(ADC1);
	LL_mDelay(1);
 8001aae:	2001      	movs	r0, #1
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8001ab0:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <Device_CFG+0xc0>)
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
	//Amp_Calibration();

	Time_seconds = 0;
	FT_flag = HT_flag = 0;
 8001ab2:	4d0e      	ldr	r5, [pc, #56]	; (8001aec <Device_CFG+0xd0>)
 8001ab4:	6893      	ldr	r3, [r2, #8]
 8001ab6:	4303      	orrs	r3, r0
 8001ab8:	6093      	str	r3, [r2, #8]
	LL_mDelay(1);
 8001aba:	f002 ffb1 	bl	8004a20 <LL_mDelay>
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001abe:	4a06      	ldr	r2, [pc, #24]	; (8001ad8 <Device_CFG+0xbc>)
	Time_seconds = 0;
 8001ac0:	480b      	ldr	r0, [pc, #44]	; (8001af0 <Device_CFG+0xd4>)
 8001ac2:	6813      	ldr	r3, [r2, #0]
	FT_flag = HT_flag = 0;
 8001ac4:	490b      	ldr	r1, [pc, #44]	; (8001af4 <Device_CFG+0xd8>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	702c      	strb	r4, [r5, #0]
	Time_seconds = 0;
 8001ace:	6004      	str	r4, [r0, #0]
	FT_flag = HT_flag = 0;
 8001ad0:	700c      	strb	r4, [r1, #0]
}
 8001ad2:	bd38      	pop	{r3, r4, r5, pc}
 8001ad4:	40012c00 	.word	0x40012c00
 8001ad8:	40020008 	.word	0x40020008
 8001adc:	40012400 	.word	0x40012400
 8001ae0:	4001244c 	.word	0x4001244c
 8001ae4:	20000374 	.word	0x20000374
 8001ae8:	40012800 	.word	0x40012800
 8001aec:	20002940 	.word	0x20002940
 8001af0:	200022c8 	.word	0x200022c8
 8001af4:	20002968 	.word	0x20002968

08001af8 <main>:
{
 8001af8:	f8df 926c 	ldr.w	r9, [pc, #620]	; 8001d68 <main+0x270>
 8001afc:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
  HAL_Init();
 8001b00:	f000 fc3e 	bl	8002380 <HAL_Init>
 8001b04:	f109 0a02 	add.w	sl, r9, #2
  SystemClock_Config();
 8001b08:	f7ff fd60 	bl	80015cc <SystemClock_Config>
  MX_GPIO_Init();
 8001b0c:	f7ff fc7a 	bl	8001404 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b10:	f7ff fc5a 	bl	80013c8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001b14:	f7ff fb1c 	bl	8001150 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001b18:	f7ff fd04 	bl	8001524 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001b1c:	f000 fb7a 	bl	8002214 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8001b20:	f003 fd42 	bl	80055a8 <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 8001b24:	f7ff fbf2 	bl	800130c <MX_ADC2_Init>
  Device_CFG();
 8001b28:	f7ff ff78 	bl	8001a1c <Device_CFG>
 8001b2c:	e003      	b.n	8001b36 <main+0x3e>
	  if(HT_flag){
 8001b2e:	4b80      	ldr	r3, [pc, #512]	; (8001d30 <main+0x238>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d17e      	bne.n	8001c34 <main+0x13c>
	  if(FT_flag){
 8001b36:	4b7f      	ldr	r3, [pc, #508]	; (8001d34 <main+0x23c>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f7      	beq.n	8001b2e <main+0x36>
	MIN_current = MAX_current = 0;
 8001b3e:	f04f 0800 	mov.w	r8, #0
 8001b42:	2500      	movs	r5, #0
 8001b44:	4b7c      	ldr	r3, [pc, #496]	; (8001d38 <main+0x240>)
 8001b46:	462e      	mov	r6, r5
 8001b48:	f8c3 8000 	str.w	r8, [r3]
 8001b4c:	4b7b      	ldr	r3, [pc, #492]	; (8001d3c <main+0x244>)
 8001b4e:	4647      	mov	r7, r8
		if(ADC_RAW[i] > 4094){//проверяем слаботочный вход на "зашкаливание"
 8001b50:	f640 7bfe 	movw	fp, #4094	; 0xffe
 8001b54:	4c7a      	ldr	r4, [pc, #488]	; (8001d40 <main+0x248>)
	MIN_current = MAX_current = 0;
 8001b56:	f8c3 8000 	str.w	r8, [r3]
 8001b5a:	e00d      	b.n	8001b78 <main+0x80>
			HIGH_Amp.Summ += (float)ADC_RAW[i+1];
 8001b5c:	f8b4 0fa2 	ldrh.w	r0, [r4, #4002]	; 0xfa2
 8001b60:	f7ff f8b8 	bl	8000cd4 <__aeabi_ui2f>
 8001b64:	4601      	mov	r1, r0
 8001b66:	4640      	mov	r0, r8
 8001b68:	f7ff f804 	bl	8000b74 <__addsf3>
 8001b6c:	3404      	adds	r4, #4
	for(int i = start_sample;i < (start_sample + SAMPLES/2); i+=2){
 8001b6e:	45a1      	cmp	r9, r4
			HIGH_Amp.Count++;
 8001b70:	f105 0501 	add.w	r5, r5, #1
			HIGH_Amp.Summ += (float)ADC_RAW[i+1];
 8001b74:	4680      	mov	r8, r0
	for(int i = start_sample;i < (start_sample + SAMPLES/2); i+=2){
 8001b76:	d00f      	beq.n	8001b98 <main+0xa0>
		if(ADC_RAW[i] > 4094){//проверяем слаботочный вход на "зашкаливание"
 8001b78:	f8b4 0fa0 	ldrh.w	r0, [r4, #4000]	; 0xfa0
 8001b7c:	4558      	cmp	r0, fp
 8001b7e:	d8ed      	bhi.n	8001b5c <main+0x64>
			LOW_Amp.Summ += (float)ADC_RAW[i];
 8001b80:	f7ff f8a8 	bl	8000cd4 <__aeabi_ui2f>
 8001b84:	4601      	mov	r1, r0
 8001b86:	4638      	mov	r0, r7
 8001b88:	f7fe fff4 	bl	8000b74 <__addsf3>
 8001b8c:	3404      	adds	r4, #4
	for(int i = start_sample;i < (start_sample + SAMPLES/2); i+=2){
 8001b8e:	45a1      	cmp	r9, r4
			LOW_Amp.Summ += (float)ADC_RAW[i];
 8001b90:	4607      	mov	r7, r0
			LOW_Amp.Count++;
 8001b92:	f106 0601 	add.w	r6, r6, #1
	for(int i = start_sample;i < (start_sample + SAMPLES/2); i+=2){
 8001b96:	d1ef      	bne.n	8001b78 <main+0x80>
 8001b98:	4a6a      	ldr	r2, [pc, #424]	; (8001d44 <main+0x24c>)
 8001b9a:	4b6b      	ldr	r3, [pc, #428]	; (8001d48 <main+0x250>)
 8001b9c:	4614      	mov	r4, r2
 8001b9e:	601e      	str	r6, [r3, #0]
 8001ba0:	6015      	str	r5, [r2, #0]
	HIGH_Amp.Summ -=  (uint32_t)(HIGH_Amp.Zero_Level * (float)HIGH_Amp.Count);
 8001ba2:	4628      	mov	r0, r5
 8001ba4:	f7ff f896 	bl	8000cd4 <__aeabi_ui2f>
 8001ba8:	68a1      	ldr	r1, [r4, #8]
 8001baa:	f7ff f8eb 	bl	8000d84 <__aeabi_fmul>
 8001bae:	f7ff faaf 	bl	8001110 <__aeabi_f2uiz>
 8001bb2:	f7ff f88f 	bl	8000cd4 <__aeabi_ui2f>
 8001bb6:	4601      	mov	r1, r0
 8001bb8:	4640      	mov	r0, r8
 8001bba:	f7fe ffd9 	bl	8000b70 <__aeabi_fsub>
 8001bbe:	4604      	mov	r4, r0
 8001bc0:	4a60      	ldr	r2, [pc, #384]	; (8001d44 <main+0x24c>)
	LOW_Amp.Summ -= (uint32_t)(LOW_Amp.Zero_Level * (float)LOW_Amp.Count);
 8001bc2:	4630      	mov	r0, r6
	HIGH_Amp.Summ -=  (uint32_t)(HIGH_Amp.Zero_Level * (float)HIGH_Amp.Count);
 8001bc4:	6054      	str	r4, [r2, #4]
	LOW_Amp.Summ -= (uint32_t)(LOW_Amp.Zero_Level * (float)LOW_Amp.Count);
 8001bc6:	f7ff f885 	bl	8000cd4 <__aeabi_ui2f>
 8001bca:	4b5f      	ldr	r3, [pc, #380]	; (8001d48 <main+0x250>)
 8001bcc:	6899      	ldr	r1, [r3, #8]
 8001bce:	f7ff f8d9 	bl	8000d84 <__aeabi_fmul>
 8001bd2:	f7ff fa9d 	bl	8001110 <__aeabi_f2uiz>
 8001bd6:	f7ff f87d 	bl	8000cd4 <__aeabi_ui2f>
 8001bda:	4601      	mov	r1, r0
 8001bdc:	4638      	mov	r0, r7
 8001bde:	f7fe ffc7 	bl	8000b70 <__aeabi_fsub>
	lowmax = LOW_Amp.Count;
 8001be2:	4a5a      	ldr	r2, [pc, #360]	; (8001d4c <main+0x254>)
	LOW_Amp.Summ -= (uint32_t)(LOW_Amp.Zero_Level * (float)LOW_Amp.Count);
 8001be4:	4b58      	ldr	r3, [pc, #352]	; (8001d48 <main+0x250>)
	lowmax = LOW_Amp.Count;
 8001be6:	6016      	str	r6, [r2, #0]
	highmax = HIGH_Amp.Count;
 8001be8:	4a59      	ldr	r2, [pc, #356]	; (8001d50 <main+0x258>)
	LOW_Amp.Summ -= (uint32_t)(LOW_Amp.Zero_Level * (float)LOW_Amp.Count);
 8001bea:	6058      	str	r0, [r3, #4]
	highmax = HIGH_Amp.Count;
 8001bec:	6015      	str	r5, [r2, #0]
	ACT_current = (float)((float)LOW_Amp.Summ/LOW_C + (float)HIGH_Amp.Summ/HIGH_C) * V_REF / (SAMPLES/4) / R_SHUNT / 4095.f;//mV
 8001bee:	4959      	ldr	r1, [pc, #356]	; (8001d54 <main+0x25c>)
 8001bf0:	f7ff f8c8 	bl	8000d84 <__aeabi_fmul>
 8001bf4:	4958      	ldr	r1, [pc, #352]	; (8001d58 <main+0x260>)
 8001bf6:	4605      	mov	r5, r0
 8001bf8:	4620      	mov	r0, r4
 8001bfa:	f7ff f8c3 	bl	8000d84 <__aeabi_fmul>
 8001bfe:	4601      	mov	r1, r0
 8001c00:	4628      	mov	r0, r5
 8001c02:	f7fe ffb7 	bl	8000b74 <__addsf3>
 8001c06:	4955      	ldr	r1, [pc, #340]	; (8001d5c <main+0x264>)
 8001c08:	f7ff f8bc 	bl	8000d84 <__aeabi_fmul>
 8001c0c:	f7fe fc0c 	bl	8000428 <__aeabi_f2d>
 8001c10:	a345      	add	r3, pc, #276	; (adr r3, 8001d28 <main+0x230>)
 8001c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c16:	f7fe fc5f 	bl	80004d8 <__aeabi_dmul>
 8001c1a:	f7fe ff55 	bl	8000ac8 <__aeabi_d2f>
 8001c1e:	4b50      	ldr	r3, [pc, #320]	; (8001d60 <main+0x268>)
 8001c20:	6018      	str	r0, [r3, #0]
		  Display_Data();
 8001c22:	f7ff fd61 	bl	80016e8 <Display_Data>
		  FT_flag = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	4a42      	ldr	r2, [pc, #264]	; (8001d34 <main+0x23c>)
 8001c2a:	7013      	strb	r3, [r2, #0]
	  if(HT_flag){
 8001c2c:	4b40      	ldr	r3, [pc, #256]	; (8001d30 <main+0x238>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d080      	beq.n	8001b36 <main+0x3e>
	MIN_current = MAX_current = 0;
 8001c34:	f04f 0800 	mov.w	r8, #0
 8001c38:	2500      	movs	r5, #0
 8001c3a:	4b3f      	ldr	r3, [pc, #252]	; (8001d38 <main+0x240>)
 8001c3c:	462e      	mov	r6, r5
 8001c3e:	f8c3 8000 	str.w	r8, [r3]
 8001c42:	4b3e      	ldr	r3, [pc, #248]	; (8001d3c <main+0x244>)
 8001c44:	4647      	mov	r7, r8
		if(ADC_RAW[i] > 4094){//проверяем слаботочный вход на "зашкаливание"
 8001c46:	f640 7bfe 	movw	fp, #4094	; 0xffe
 8001c4a:	4c46      	ldr	r4, [pc, #280]	; (8001d64 <main+0x26c>)
	MIN_current = MAX_current = 0;
 8001c4c:	f8c3 8000 	str.w	r8, [r3]
 8001c50:	e00c      	b.n	8001c6c <main+0x174>
			HIGH_Amp.Summ += (float)ADC_RAW[i+1];
 8001c52:	8820      	ldrh	r0, [r4, #0]
 8001c54:	f7ff f83e 	bl	8000cd4 <__aeabi_ui2f>
 8001c58:	4601      	mov	r1, r0
 8001c5a:	4640      	mov	r0, r8
 8001c5c:	f7fe ff8a 	bl	8000b74 <__addsf3>
 8001c60:	3404      	adds	r4, #4
	for(int i = start_sample;i < (start_sample + SAMPLES/2); i+=2){
 8001c62:	45a2      	cmp	sl, r4
			HIGH_Amp.Count++;
 8001c64:	f105 0501 	add.w	r5, r5, #1
			HIGH_Amp.Summ += (float)ADC_RAW[i+1];
 8001c68:	4680      	mov	r8, r0
	for(int i = start_sample;i < (start_sample + SAMPLES/2); i+=2){
 8001c6a:	d00f      	beq.n	8001c8c <main+0x194>
		if(ADC_RAW[i] > 4094){//проверяем слаботочный вход на "зашкаливание"
 8001c6c:	f834 0c02 	ldrh.w	r0, [r4, #-2]
 8001c70:	4558      	cmp	r0, fp
 8001c72:	d8ee      	bhi.n	8001c52 <main+0x15a>
			LOW_Amp.Summ += (float)ADC_RAW[i];
 8001c74:	f7ff f82e 	bl	8000cd4 <__aeabi_ui2f>
 8001c78:	4601      	mov	r1, r0
 8001c7a:	4638      	mov	r0, r7
 8001c7c:	f7fe ff7a 	bl	8000b74 <__addsf3>
 8001c80:	3404      	adds	r4, #4
	for(int i = start_sample;i < (start_sample + SAMPLES/2); i+=2){
 8001c82:	45a2      	cmp	sl, r4
			LOW_Amp.Summ += (float)ADC_RAW[i];
 8001c84:	4607      	mov	r7, r0
			LOW_Amp.Count++;
 8001c86:	f106 0601 	add.w	r6, r6, #1
	for(int i = start_sample;i < (start_sample + SAMPLES/2); i+=2){
 8001c8a:	d1ef      	bne.n	8001c6c <main+0x174>
 8001c8c:	4a2d      	ldr	r2, [pc, #180]	; (8001d44 <main+0x24c>)
 8001c8e:	4b2e      	ldr	r3, [pc, #184]	; (8001d48 <main+0x250>)
 8001c90:	4614      	mov	r4, r2
 8001c92:	601e      	str	r6, [r3, #0]
 8001c94:	6015      	str	r5, [r2, #0]
	HIGH_Amp.Summ -=  (uint32_t)(HIGH_Amp.Zero_Level * (float)HIGH_Amp.Count);
 8001c96:	4628      	mov	r0, r5
 8001c98:	f7ff f81c 	bl	8000cd4 <__aeabi_ui2f>
 8001c9c:	68a1      	ldr	r1, [r4, #8]
 8001c9e:	f7ff f871 	bl	8000d84 <__aeabi_fmul>
 8001ca2:	f7ff fa35 	bl	8001110 <__aeabi_f2uiz>
 8001ca6:	f7ff f815 	bl	8000cd4 <__aeabi_ui2f>
 8001caa:	4601      	mov	r1, r0
 8001cac:	4640      	mov	r0, r8
 8001cae:	f7fe ff5f 	bl	8000b70 <__aeabi_fsub>
 8001cb2:	4604      	mov	r4, r0
 8001cb4:	4a23      	ldr	r2, [pc, #140]	; (8001d44 <main+0x24c>)
	LOW_Amp.Summ -= (uint32_t)(LOW_Amp.Zero_Level * (float)LOW_Amp.Count);
 8001cb6:	4630      	mov	r0, r6
	HIGH_Amp.Summ -=  (uint32_t)(HIGH_Amp.Zero_Level * (float)HIGH_Amp.Count);
 8001cb8:	6054      	str	r4, [r2, #4]
	LOW_Amp.Summ -= (uint32_t)(LOW_Amp.Zero_Level * (float)LOW_Amp.Count);
 8001cba:	f7ff f80b 	bl	8000cd4 <__aeabi_ui2f>
 8001cbe:	4b22      	ldr	r3, [pc, #136]	; (8001d48 <main+0x250>)
 8001cc0:	6899      	ldr	r1, [r3, #8]
 8001cc2:	f7ff f85f 	bl	8000d84 <__aeabi_fmul>
 8001cc6:	f7ff fa23 	bl	8001110 <__aeabi_f2uiz>
 8001cca:	f7ff f803 	bl	8000cd4 <__aeabi_ui2f>
 8001cce:	4601      	mov	r1, r0
 8001cd0:	4638      	mov	r0, r7
 8001cd2:	f7fe ff4d 	bl	8000b70 <__aeabi_fsub>
	lowmax = LOW_Amp.Count;
 8001cd6:	4a1d      	ldr	r2, [pc, #116]	; (8001d4c <main+0x254>)
	LOW_Amp.Summ -= (uint32_t)(LOW_Amp.Zero_Level * (float)LOW_Amp.Count);
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <main+0x250>)
	lowmax = LOW_Amp.Count;
 8001cda:	6016      	str	r6, [r2, #0]
	highmax = HIGH_Amp.Count;
 8001cdc:	4a1c      	ldr	r2, [pc, #112]	; (8001d50 <main+0x258>)
	LOW_Amp.Summ -= (uint32_t)(LOW_Amp.Zero_Level * (float)LOW_Amp.Count);
 8001cde:	6058      	str	r0, [r3, #4]
	highmax = HIGH_Amp.Count;
 8001ce0:	6015      	str	r5, [r2, #0]
	ACT_current = (float)((float)LOW_Amp.Summ/LOW_C + (float)HIGH_Amp.Summ/HIGH_C) * V_REF / (SAMPLES/4) / R_SHUNT / 4095.f;//mV
 8001ce2:	491c      	ldr	r1, [pc, #112]	; (8001d54 <main+0x25c>)
 8001ce4:	f7ff f84e 	bl	8000d84 <__aeabi_fmul>
 8001ce8:	491b      	ldr	r1, [pc, #108]	; (8001d58 <main+0x260>)
 8001cea:	4605      	mov	r5, r0
 8001cec:	4620      	mov	r0, r4
 8001cee:	f7ff f849 	bl	8000d84 <__aeabi_fmul>
 8001cf2:	4601      	mov	r1, r0
 8001cf4:	4628      	mov	r0, r5
 8001cf6:	f7fe ff3d 	bl	8000b74 <__addsf3>
 8001cfa:	4918      	ldr	r1, [pc, #96]	; (8001d5c <main+0x264>)
 8001cfc:	f7ff f842 	bl	8000d84 <__aeabi_fmul>
 8001d00:	f7fe fb92 	bl	8000428 <__aeabi_f2d>
 8001d04:	a308      	add	r3, pc, #32	; (adr r3, 8001d28 <main+0x230>)
 8001d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0a:	f7fe fbe5 	bl	80004d8 <__aeabi_dmul>
 8001d0e:	f7fe fedb 	bl	8000ac8 <__aeabi_d2f>
 8001d12:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <main+0x268>)
 8001d14:	6018      	str	r0, [r3, #0]
		  Display_Data();
 8001d16:	f7ff fce7 	bl	80016e8 <Display_Data>
		  HT_flag = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <main+0x238>)
 8001d1e:	7013      	strb	r3, [r2, #0]
 8001d20:	e709      	b.n	8001b36 <main+0x3e>
 8001d22:	bf00      	nop
 8001d24:	f3af 8000 	nop.w
 8001d28:	14014014 	.word	0x14014014
 8001d2c:	3f540140 	.word	0x3f540140
 8001d30:	20002940 	.word	0x20002940
 8001d34:	20002968 	.word	0x20002968
 8001d38:	200022bc 	.word	0x200022bc
 8001d3c:	200022c4 	.word	0x200022c4
 8001d40:	20000374 	.word	0x20000374
 8001d44:	20002944 	.word	0x20002944
 8001d48:	20002958 	.word	0x20002958
 8001d4c:	2000293c 	.word	0x2000293c
 8001d50:	20002954 	.word	0x20002954
 8001d54:	38d1b717 	.word	0x38d1b717
 8001d58:	3dcccccd 	.word	0x3dcccccd
 8001d5c:	40533334 	.word	0x40533334
 8001d60:	20000370 	.word	0x20000370
 8001d64:	20000376 	.word	0x20000376
 8001d68:	20001314 	.word	0x20001314

08001d6c <Error_Handler>:
 8001d6c:	b672      	cpsid	i
 8001d6e:	e7fe      	b.n	8001d6e <Error_Handler+0x2>

08001d70 <ssd1306_I2C_Write.constprop.3>:
{
	/* Generate I2C start pulse */
	I2Cx->CR1 |= I2C_CR1_START;

	/* Wait till I2C is busy */
	ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8001d70:	f644 6320 	movw	r3, #20000	; 0x4e20
	I2Cx->CR1 |= I2C_CR1_START;
 8001d74:	492a      	ldr	r1, [pc, #168]	; (8001e20 <ssd1306_I2C_Write.constprop.3+0xb0>)

	/* Send I2C data */
	I2Cx->DR = data;
}

void ssd1306_I2C_Write(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg, uint8_t data)
 8001d76:	b410      	push	{r4}
	I2Cx->CR1 |= I2C_CR1_START;
 8001d78:	680a      	ldr	r2, [r1, #0]
	ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8001d7a:	4c2a      	ldr	r4, [pc, #168]	; (8001e24 <ssd1306_I2C_Write.constprop.3+0xb4>)
	I2Cx->CR1 |= I2C_CR1_START;
 8001d7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d80:	600a      	str	r2, [r1, #0]
	ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8001d82:	6023      	str	r3, [r4, #0]
 8001d84:	e001      	b.n	8001d8a <ssd1306_I2C_Write.constprop.3+0x1a>
		if (--ssd1306_I2C_Timeout == 0x00) {
 8001d86:	3b01      	subs	r3, #1
 8001d88:	d010      	beq.n	8001dac <ssd1306_I2C_Write.constprop.3+0x3c>
	while (!(I2Cx->SR1 & I2C_SR1_SB)) {
 8001d8a:	694a      	ldr	r2, [r1, #20]
 8001d8c:	07d2      	lsls	r2, r2, #31
 8001d8e:	d5fa      	bpl.n	8001d86 <ssd1306_I2C_Write.constprop.3+0x16>
		I2Cx->DR = address & ~I2C_OAR1_ADD0;
 8001d90:	2378      	movs	r3, #120	; 0x78
		ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8001d92:	f644 6220 	movw	r2, #20000	; 0x4e20
		I2Cx->DR = address & ~I2C_OAR1_ADD0;
 8001d96:	610b      	str	r3, [r1, #16]
		ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8001d98:	4613      	mov	r3, r2
 8001d9a:	6022      	str	r2, [r4, #0]
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 8001d9c:	4920      	ldr	r1, [pc, #128]	; (8001e20 <ssd1306_I2C_Write.constprop.3+0xb0>)
 8001d9e:	e001      	b.n	8001da4 <ssd1306_I2C_Write.constprop.3+0x34>
			if (--ssd1306_I2C_Timeout == 0x00) {
 8001da0:	3b01      	subs	r3, #1
 8001da2:	d003      	beq.n	8001dac <ssd1306_I2C_Write.constprop.3+0x3c>
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 8001da4:	694a      	ldr	r2, [r1, #20]
 8001da6:	0792      	lsls	r2, r2, #30
 8001da8:	d5fa      	bpl.n	8001da0 <ssd1306_I2C_Write.constprop.3+0x30>
	I2Cx->SR2;
 8001daa:	698b      	ldr	r3, [r1, #24]
	ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8001dac:	f644 6320 	movw	r3, #20000	; 0x4e20
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && ssd1306_I2C_Timeout) {
 8001db0:	491b      	ldr	r1, [pc, #108]	; (8001e20 <ssd1306_I2C_Write.constprop.3+0xb0>)
	ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8001db2:	6023      	str	r3, [r4, #0]
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && ssd1306_I2C_Timeout) {
 8001db4:	694b      	ldr	r3, [r1, #20]
 8001db6:	061b      	lsls	r3, r3, #24
 8001db8:	d408      	bmi.n	8001dcc <ssd1306_I2C_Write.constprop.3+0x5c>
 8001dba:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8001dbe:	e001      	b.n	8001dc4 <ssd1306_I2C_Write.constprop.3+0x54>
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	d003      	beq.n	8001dcc <ssd1306_I2C_Write.constprop.3+0x5c>
 8001dc4:	694a      	ldr	r2, [r1, #20]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	0612      	lsls	r2, r2, #24
 8001dca:	d5f9      	bpl.n	8001dc0 <ssd1306_I2C_Write.constprop.3+0x50>
	ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8001dcc:	f644 6320 	movw	r3, #20000	; 0x4e20
	I2Cx->DR = data;
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	4913      	ldr	r1, [pc, #76]	; (8001e20 <ssd1306_I2C_Write.constprop.3+0xb0>)
 8001dd4:	610a      	str	r2, [r1, #16]
	ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8001dd6:	6023      	str	r3, [r4, #0]
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && ssd1306_I2C_Timeout) {
 8001dd8:	694b      	ldr	r3, [r1, #20]
 8001dda:	061b      	lsls	r3, r3, #24
 8001ddc:	d408      	bmi.n	8001df0 <ssd1306_I2C_Write.constprop.3+0x80>
 8001dde:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8001de2:	e001      	b.n	8001de8 <ssd1306_I2C_Write.constprop.3+0x78>
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	d003      	beq.n	8001df0 <ssd1306_I2C_Write.constprop.3+0x80>
 8001de8:	694a      	ldr	r2, [r1, #20]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	0612      	lsls	r2, r2, #24
 8001dee:	d5f9      	bpl.n	8001de4 <ssd1306_I2C_Write.constprop.3+0x74>


uint8_t ssd1306_I2C_Stop(I2C_TypeDef* I2Cx)
{
	/* Wait till transmitter not empty */
	ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8001df0:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001df4:	460b      	mov	r3, r1
	I2Cx->DR = data;
 8001df6:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <ssd1306_I2C_Write.constprop.3+0xb0>)
 8001df8:	6110      	str	r0, [r2, #16]
	ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8001dfa:	6021      	str	r1, [r4, #0]
	while (((!(I2Cx->SR1 & I2C_SR1_TXE)) || (!(I2Cx->SR1 & I2C_SR1_BTF)))) {
 8001dfc:	6951      	ldr	r1, [r2, #20]
 8001dfe:	0608      	lsls	r0, r1, #24
 8001e00:	d502      	bpl.n	8001e08 <ssd1306_I2C_Write.constprop.3+0x98>
 8001e02:	6951      	ldr	r1, [r2, #20]
 8001e04:	0749      	lsls	r1, r1, #29
 8001e06:	d404      	bmi.n	8001e12 <ssd1306_I2C_Write.constprop.3+0xa2>
		if (--ssd1306_I2C_Timeout == 0x00) {
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	d1f7      	bne.n	8001dfc <ssd1306_I2C_Write.constprop.3+0x8c>
 8001e0c:	6023      	str	r3, [r4, #0]
}
 8001e0e:	bc10      	pop	{r4}
 8001e10:	4770      	bx	lr
 8001e12:	6023      	str	r3, [r4, #0]
			return 1;
		}
	}

	/* Generate stop */
	I2Cx->CR1 |= I2C_CR1_STOP;
 8001e14:	6813      	ldr	r3, [r2, #0]
}
 8001e16:	bc10      	pop	{r4}
	I2Cx->CR1 |= I2C_CR1_STOP;
 8001e18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e1c:	6013      	str	r3, [r2, #0]
}
 8001e1e:	4770      	bx	lr
 8001e20:	40005400 	.word	0x40005400
 8001e24:	200026d8 	.word	0x200026d8

08001e28 <SSD1306_UpdateScreen>:
{
 8001e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e2c:	26b0      	movs	r6, #176	; 0xb0
	ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8001e2e:	f644 6820 	movw	r8, #20000	; 0x4e20
 8001e32:	4d33      	ldr	r5, [pc, #204]	; (8001f00 <SSD1306_UpdateScreen+0xd8>)
 8001e34:	4f33      	ldr	r7, [pc, #204]	; (8001f04 <SSD1306_UpdateScreen+0xdc>)
	I2Cx->CR1 |= I2C_CR1_START;
 8001e36:	4c34      	ldr	r4, [pc, #208]	; (8001f08 <SSD1306_UpdateScreen+0xe0>)
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001e38:	4630      	mov	r0, r6
 8001e3a:	f7ff ff99 	bl	8001d70 <ssd1306_I2C_Write.constprop.3>
		SSD1306_WRITECOMMAND(0x00);
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f7ff ff96 	bl	8001d70 <ssd1306_I2C_Write.constprop.3>
		SSD1306_WRITECOMMAND(0x10);
 8001e44:	2010      	movs	r0, #16
 8001e46:	f7ff ff93 	bl	8001d70 <ssd1306_I2C_Write.constprop.3>
	I2Cx->CR1 |= I2C_CR1_START;
 8001e4a:	6822      	ldr	r2, [r4, #0]
	ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8001e4c:	f644 6320 	movw	r3, #20000	; 0x4e20
	I2Cx->CR1 |= I2C_CR1_START;
 8001e50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e54:	6022      	str	r2, [r4, #0]
	ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8001e56:	f8c7 8000 	str.w	r8, [r7]
 8001e5a:	e001      	b.n	8001e60 <SSD1306_UpdateScreen+0x38>
		if (--ssd1306_I2C_Timeout == 0x00) {
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	d00f      	beq.n	8001e80 <SSD1306_UpdateScreen+0x58>
	while (!(I2Cx->SR1 & I2C_SR1_SB)) {
 8001e60:	6962      	ldr	r2, [r4, #20]
 8001e62:	07d0      	lsls	r0, r2, #31
 8001e64:	d5fa      	bpl.n	8001e5c <SSD1306_UpdateScreen+0x34>
		I2Cx->DR = address & ~I2C_OAR1_ADD0;
 8001e66:	2278      	movs	r2, #120	; 0x78
		ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8001e68:	f644 6320 	movw	r3, #20000	; 0x4e20
		I2Cx->DR = address & ~I2C_OAR1_ADD0;
 8001e6c:	6122      	str	r2, [r4, #16]
		ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8001e6e:	f8c7 8000 	str.w	r8, [r7]
 8001e72:	e001      	b.n	8001e78 <SSD1306_UpdateScreen+0x50>
			if (--ssd1306_I2C_Timeout == 0x00) {
 8001e74:	3b01      	subs	r3, #1
 8001e76:	d003      	beq.n	8001e80 <SSD1306_UpdateScreen+0x58>
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 8001e78:	6962      	ldr	r2, [r4, #20]
 8001e7a:	0791      	lsls	r1, r2, #30
 8001e7c:	d5fa      	bpl.n	8001e74 <SSD1306_UpdateScreen+0x4c>
	I2Cx->SR2;
 8001e7e:	69a3      	ldr	r3, [r4, #24]
	ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8001e80:	f8c7 8000 	str.w	r8, [r7]
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && ssd1306_I2C_Timeout) {
 8001e84:	6963      	ldr	r3, [r4, #20]
 8001e86:	061a      	lsls	r2, r3, #24
 8001e88:	d40a      	bmi.n	8001ea0 <SSD1306_UpdateScreen+0x78>
 8001e8a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001e8e:	e002      	b.n	8001e96 <SSD1306_UpdateScreen+0x6e>
 8001e90:	f112 32ff 	adds.w	r2, r2, #4294967295
 8001e94:	d32c      	bcc.n	8001ef0 <SSD1306_UpdateScreen+0xc8>
 8001e96:	6963      	ldr	r3, [r4, #20]
 8001e98:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8001e9c:	d0f8      	beq.n	8001e90 <SSD1306_UpdateScreen+0x68>
 8001e9e:	603a      	str	r2, [r7, #0]
	I2Cx->DR = data;
 8001ea0:	2340      	movs	r3, #64	; 0x40
 8001ea2:	f105 0080 	add.w	r0, r5, #128	; 0x80
 8001ea6:	6123      	str	r3, [r4, #16]
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && ssd1306_I2C_Timeout) {
 8001ea8:	6963      	ldr	r3, [r4, #20]
		ssd1306_I2C_WriteData(I2Cx, data[i]);
 8001eaa:	f815 1f01 	ldrb.w	r1, [r5, #1]!
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && ssd1306_I2C_Timeout) {
 8001eae:	061b      	lsls	r3, r3, #24
 8001eb0:	d408      	bmi.n	8001ec4 <SSD1306_UpdateScreen+0x9c>
 8001eb2:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8001eb6:	e001      	b.n	8001ebc <SSD1306_UpdateScreen+0x94>
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	d003      	beq.n	8001ec4 <SSD1306_UpdateScreen+0x9c>
 8001ebc:	6962      	ldr	r2, [r4, #20]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	0612      	lsls	r2, r2, #24
 8001ec2:	d5f9      	bpl.n	8001eb8 <SSD1306_UpdateScreen+0x90>
	for (i = 0; i < count; i++) {
 8001ec4:	42a8      	cmp	r0, r5
	I2Cx->DR = data;
 8001ec6:	6121      	str	r1, [r4, #16]
	for (i = 0; i < count; i++) {
 8001ec8:	d1ee      	bne.n	8001ea8 <SSD1306_UpdateScreen+0x80>
	ssd1306_I2C_Timeout = ssd1306_I2C_TIMEOUT;
 8001eca:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001ece:	f8c7 8000 	str.w	r8, [r7]
	while (((!(I2Cx->SR1 & I2C_SR1_TXE)) || (!(I2Cx->SR1 & I2C_SR1_BTF)))) {
 8001ed2:	6962      	ldr	r2, [r4, #20]
 8001ed4:	0611      	lsls	r1, r2, #24
 8001ed6:	d502      	bpl.n	8001ede <SSD1306_UpdateScreen+0xb6>
 8001ed8:	6962      	ldr	r2, [r4, #20]
 8001eda:	0752      	lsls	r2, r2, #29
 8001edc:	d40a      	bmi.n	8001ef4 <SSD1306_UpdateScreen+0xcc>
		if (--ssd1306_I2C_Timeout == 0x00) {
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	d1f7      	bne.n	8001ed2 <SSD1306_UpdateScreen+0xaa>
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	3601      	adds	r6, #1
 8001ee6:	b2f6      	uxtb	r6, r6
	for (m = 0; m < 8; m++) {
 8001ee8:	2eb8      	cmp	r6, #184	; 0xb8
 8001eea:	d1a5      	bne.n	8001e38 <SSD1306_UpdateScreen+0x10>
}
 8001eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ef0:	603b      	str	r3, [r7, #0]
 8001ef2:	e7d5      	b.n	8001ea0 <SSD1306_UpdateScreen+0x78>
 8001ef4:	603b      	str	r3, [r7, #0]
	I2Cx->CR1 |= I2C_CR1_STOP;
 8001ef6:	6823      	ldr	r3, [r4, #0]
 8001ef8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001efc:	6023      	str	r3, [r4, #0]
 8001efe:	e7f1      	b.n	8001ee4 <SSD1306_UpdateScreen+0xbc>
 8001f00:	200022d7 	.word	0x200022d7
 8001f04:	200026d8 	.word	0x200026d8
 8001f08:	40005400 	.word	0x40005400

08001f0c <SSD1306_Fill>:
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001f0c:	2800      	cmp	r0, #0
 8001f0e:	bf14      	ite	ne
 8001f10:	21ff      	movne	r1, #255	; 0xff
 8001f12:	2100      	moveq	r1, #0
 8001f14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f18:	4801      	ldr	r0, [pc, #4]	; (8001f20 <SSD1306_Fill+0x14>)
 8001f1a:	f003 bde5 	b.w	8005ae8 <memset>
 8001f1e:	bf00      	nop
 8001f20:	200022d8 	.word	0x200022d8

08001f24 <SSD1306_GotoXY>:
	SSD1306.CurrentX = x;
 8001f24:	4b01      	ldr	r3, [pc, #4]	; (8001f2c <SSD1306_GotoXY+0x8>)
 8001f26:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8001f28:	8059      	strh	r1, [r3, #2]
}
 8001f2a:	4770      	bx	lr
 8001f2c:	200022d0 	.word	0x200022d0

08001f30 <SSD1306_Puts>:
{
 8001f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f34:	4682      	mov	sl, r0
	while (*str) {
 8001f36:	7800      	ldrb	r0, [r0, #0]
{
 8001f38:	b087      	sub	sp, #28
	while (*str) {
 8001f3a:	2800      	cmp	r0, #0
 8001f3c:	d074      	beq.n	8002028 <SSD1306_Puts+0xf8>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001f3e:	2a00      	cmp	r2, #0
 8001f40:	bf08      	it	eq
 8001f42:	2301      	moveq	r3, #1
	if (SSD1306.Inverted) {
 8001f44:	4e6c      	ldr	r6, [pc, #432]	; (80020f8 <SSD1306_Puts+0x1c8>)
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001f46:	bf18      	it	ne
 8001f48:	2300      	movne	r3, #0
	if (SSD1306.Inverted) {
 8001f4a:	7935      	ldrb	r5, [r6, #4]
		color = (SSD1306_COLOR_t)!color;
 8001f4c:	bf0c      	ite	eq
 8001f4e:	2400      	moveq	r4, #0
 8001f50:	2401      	movne	r4, #1
 8001f52:	2d00      	cmp	r5, #0
 8001f54:	bf04      	itt	eq
 8001f56:	461c      	moveq	r4, r3
 8001f58:	4613      	moveq	r3, r2
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001f5a:	8877      	ldrh	r7, [r6, #2]
 8001f5c:	9302      	str	r3, [sp, #8]
 8001f5e:	f8b6 e000 	ldrh.w	lr, [r6]
 8001f62:	780b      	ldrb	r3, [r1, #0]
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001f64:	f8df 8194 	ldr.w	r8, [pc, #404]	; 80020fc <SSD1306_Puts+0x1cc>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001f68:	9703      	str	r7, [sp, #12]
 8001f6a:	9401      	str	r4, [sp, #4]
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001f6c:	eb0e 0203 	add.w	r2, lr, r3
	if (
 8001f70:	2a7f      	cmp	r2, #127	; 0x7f
 8001f72:	dc56      	bgt.n	8002022 <SSD1306_Puts+0xf2>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001f74:	784d      	ldrb	r5, [r1, #1]
 8001f76:	9e03      	ldr	r6, [sp, #12]
 8001f78:	19ac      	adds	r4, r5, r6
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001f7a:	2c3f      	cmp	r4, #63	; 0x3f
 8001f7c:	dc51      	bgt.n	8002022 <SSD1306_Puts+0xf2>
	for (i = 0; i < Font->FontHeight; i++) {
 8001f7e:	2d00      	cmp	r5, #0
 8001f80:	f000 80b6 	beq.w	80020f0 <SSD1306_Puts+0x1c0>
 8001f84:	f1a0 0220 	sub.w	r2, r0, #32
 8001f88:	e9cd 0a04 	strd	r0, sl, [sp, #16]
 8001f8c:	2400      	movs	r4, #0
 8001f8e:	4691      	mov	r9, r2
 8001f90:	46b2      	mov	sl, r6
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001f92:	fb09 4005 	mla	r0, r9, r5, r4
 8001f96:	684a      	ldr	r2, [r1, #4]
 8001f98:	f832 7010 	ldrh.w	r7, [r2, r0, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8001f9c:	b383      	cbz	r3, 8002000 <SSD1306_Puts+0xd0>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001f9e:	2601      	movs	r6, #1
 8001fa0:	eb0a 0004 	add.w	r0, sl, r4
 8001fa4:	b280      	uxth	r0, r0
 8001fa6:	f000 0207 	and.w	r2, r0, #7
 8001faa:	fa06 f202 	lsl.w	r2, r6, r2
 8001fae:	b252      	sxtb	r2, r2
 8001fb0:	08c6      	lsrs	r6, r0, #3
 8001fb2:	283f      	cmp	r0, #63	; 0x3f
 8001fb4:	ea6f 0c02 	mvn.w	ip, r2
 8001fb8:	ea4f 16c6 	mov.w	r6, r6, lsl #7
 8001fbc:	d820      	bhi.n	8002000 <SSD1306_Puts+0xd0>
 8001fbe:	9802      	ldr	r0, [sp, #8]
 8001fc0:	2801      	cmp	r0, #1
 8001fc2:	d034      	beq.n	800202e <SSD1306_Puts+0xfe>
 8001fc4:	9801      	ldr	r0, [sp, #4]
 8001fc6:	2800      	cmp	r0, #0
 8001fc8:	d155      	bne.n	8002076 <SSD1306_Puts+0x146>
 8001fca:	4672      	mov	r2, lr
 8001fcc:	e00f      	b.n	8001fee <SSD1306_Puts+0xbe>
	if (
 8001fce:	2a7f      	cmp	r2, #127	; 0x7f
 8001fd0:	eb02 0506 	add.w	r5, r2, r6
 8001fd4:	d806      	bhi.n	8001fe4 <SSD1306_Puts+0xb4>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001fd6:	f818 3005 	ldrb.w	r3, [r8, r5]
 8001fda:	ea0c 0303 	and.w	r3, ip, r3
 8001fde:	f808 3005 	strb.w	r3, [r8, r5]
 8001fe2:	780b      	ldrb	r3, [r1, #0]
		for (j = 0; j < Font->FontWidth; j++) {
 8001fe4:	3001      	adds	r0, #1
 8001fe6:	3201      	adds	r2, #1
 8001fe8:	4283      	cmp	r3, r0
 8001fea:	b292      	uxth	r2, r2
 8001fec:	d907      	bls.n	8001ffe <SSD1306_Puts+0xce>
			if ((b << j) & 0x8000) {
 8001fee:	fa07 f500 	lsl.w	r5, r7, r0
 8001ff2:	042d      	lsls	r5, r5, #16
 8001ff4:	d5eb      	bpl.n	8001fce <SSD1306_Puts+0x9e>
	if (
 8001ff6:	2a7f      	cmp	r2, #127	; 0x7f
 8001ff8:	d8f4      	bhi.n	8001fe4 <SSD1306_Puts+0xb4>
 8001ffa:	1995      	adds	r5, r2, r6
 8001ffc:	e7eb      	b.n	8001fd6 <SSD1306_Puts+0xa6>
 8001ffe:	784d      	ldrb	r5, [r1, #1]
	for (i = 0; i < Font->FontHeight; i++) {
 8002000:	3401      	adds	r4, #1
 8002002:	42ac      	cmp	r4, r5
 8002004:	d3c5      	bcc.n	8001f92 <SSD1306_Puts+0x62>
 8002006:	e9dd 0a04 	ldrd	r0, sl, [sp, #16]
 800200a:	f89a 4000 	ldrb.w	r4, [sl]
 800200e:	eb0e 0203 	add.w	r2, lr, r3
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002012:	42a0      	cmp	r0, r4
	SSD1306.CurrentX += Font->FontWidth;
 8002014:	fa1f fe82 	uxth.w	lr, r2
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002018:	d16c      	bne.n	80020f4 <SSD1306_Puts+0x1c4>
	while (*str) {
 800201a:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
 800201e:	2800      	cmp	r0, #0
 8002020:	d1a4      	bne.n	8001f6c <SSD1306_Puts+0x3c>
 8002022:	4b35      	ldr	r3, [pc, #212]	; (80020f8 <SSD1306_Puts+0x1c8>)
 8002024:	f8a3 e000 	strh.w	lr, [r3]
}
 8002028:	b007      	add	sp, #28
 800202a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800202e:	9d01      	ldr	r5, [sp, #4]
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002030:	4670      	mov	r0, lr
 8002032:	b17d      	cbz	r5, 8002054 <SSD1306_Puts+0x124>
 8002034:	e041      	b.n	80020ba <SSD1306_Puts+0x18a>
	if (
 8002036:	287f      	cmp	r0, #127	; 0x7f
 8002038:	eb00 0b06 	add.w	fp, r0, r6
 800203c:	d805      	bhi.n	800204a <SSD1306_Puts+0x11a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800203e:	f818 300b 	ldrb.w	r3, [r8, fp]
 8002042:	4313      	orrs	r3, r2
 8002044:	f808 300b 	strb.w	r3, [r8, fp]
 8002048:	780b      	ldrb	r3, [r1, #0]
		for (j = 0; j < Font->FontWidth; j++) {
 800204a:	3501      	adds	r5, #1
 800204c:	3001      	adds	r0, #1
 800204e:	429d      	cmp	r5, r3
 8002050:	b280      	uxth	r0, r0
 8002052:	d2d4      	bcs.n	8001ffe <SSD1306_Puts+0xce>
			if ((b << j) & 0x8000) {
 8002054:	fa07 fb05 	lsl.w	fp, r7, r5
 8002058:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
 800205c:	d1eb      	bne.n	8002036 <SSD1306_Puts+0x106>
	if (
 800205e:	287f      	cmp	r0, #127	; 0x7f
 8002060:	d8f3      	bhi.n	800204a <SSD1306_Puts+0x11a>
 8002062:	eb00 0b06 	add.w	fp, r0, r6
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002066:	f818 300b 	ldrb.w	r3, [r8, fp]
 800206a:	ea0c 0303 	and.w	r3, ip, r3
 800206e:	f808 300b 	strb.w	r3, [r8, fp]
 8002072:	780b      	ldrb	r3, [r1, #0]
 8002074:	e7e9      	b.n	800204a <SSD1306_Puts+0x11a>
		for (j = 0; j < Font->FontWidth; j++) {
 8002076:	2500      	movs	r5, #0
 8002078:	e00d      	b.n	8002096 <SSD1306_Puts+0x166>
	if (
 800207a:	287f      	cmp	r0, #127	; 0x7f
 800207c:	eb00 0b06 	add.w	fp, r0, r6
 8002080:	d806      	bhi.n	8002090 <SSD1306_Puts+0x160>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002082:	f818 300b 	ldrb.w	r3, [r8, fp]
 8002086:	ea0c 0303 	and.w	r3, ip, r3
 800208a:	f808 300b 	strb.w	r3, [r8, fp]
 800208e:	780b      	ldrb	r3, [r1, #0]
		for (j = 0; j < Font->FontWidth; j++) {
 8002090:	3501      	adds	r5, #1
 8002092:	42ab      	cmp	r3, r5
 8002094:	d9b3      	bls.n	8001ffe <SSD1306_Puts+0xce>
			if ((b << j) & 0x8000) {
 8002096:	fa07 fb05 	lsl.w	fp, r7, r5
 800209a:	eb0e 0005 	add.w	r0, lr, r5
 800209e:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
 80020a2:	b280      	uxth	r0, r0
 80020a4:	d1e9      	bne.n	800207a <SSD1306_Puts+0x14a>
	if (
 80020a6:	287f      	cmp	r0, #127	; 0x7f
 80020a8:	d8f2      	bhi.n	8002090 <SSD1306_Puts+0x160>
 80020aa:	4430      	add	r0, r6
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80020ac:	f818 3000 	ldrb.w	r3, [r8, r0]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	f808 3000 	strb.w	r3, [r8, r0]
 80020b6:	780b      	ldrb	r3, [r1, #0]
 80020b8:	e7ea      	b.n	8002090 <SSD1306_Puts+0x160>
		for (j = 0; j < Font->FontWidth; j++) {
 80020ba:	2500      	movs	r5, #0
 80020bc:	e00e      	b.n	80020dc <SSD1306_Puts+0x1ac>
	if (
 80020be:	287f      	cmp	r0, #127	; 0x7f
 80020c0:	eb00 0c06 	add.w	ip, r0, r6
 80020c4:	d805      	bhi.n	80020d2 <SSD1306_Puts+0x1a2>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80020c6:	f818 300c 	ldrb.w	r3, [r8, ip]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	f808 300c 	strb.w	r3, [r8, ip]
 80020d0:	780b      	ldrb	r3, [r1, #0]
		for (j = 0; j < Font->FontWidth; j++) {
 80020d2:	3501      	adds	r5, #1
 80020d4:	3001      	adds	r0, #1
 80020d6:	42ab      	cmp	r3, r5
 80020d8:	b280      	uxth	r0, r0
 80020da:	d990      	bls.n	8001ffe <SSD1306_Puts+0xce>
			if ((b << j) & 0x8000) {
 80020dc:	fa07 fc05 	lsl.w	ip, r7, r5
 80020e0:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 80020e4:	d0eb      	beq.n	80020be <SSD1306_Puts+0x18e>
	if (
 80020e6:	287f      	cmp	r0, #127	; 0x7f
 80020e8:	d8f3      	bhi.n	80020d2 <SSD1306_Puts+0x1a2>
 80020ea:	eb00 0c06 	add.w	ip, r0, r6
 80020ee:	e7ea      	b.n	80020c6 <SSD1306_Puts+0x196>
	for (i = 0; i < Font->FontHeight; i++) {
 80020f0:	4604      	mov	r4, r0
 80020f2:	e78e      	b.n	8002012 <SSD1306_Puts+0xe2>
 80020f4:	4620      	mov	r0, r4
 80020f6:	e794      	b.n	8002022 <SSD1306_Puts+0xf2>
 80020f8:	200022d0 	.word	0x200022d0
 80020fc:	200022d8 	.word	0x200022d8

08002100 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002100:	4b0e      	ldr	r3, [pc, #56]	; (800213c <HAL_MspInit+0x3c>)
{
 8002102:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002104:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002106:	490e      	ldr	r1, [pc, #56]	; (8002140 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002108:	f042 0201 	orr.w	r2, r2, #1
 800210c:	619a      	str	r2, [r3, #24]
 800210e:	699a      	ldr	r2, [r3, #24]
 8002110:	f002 0201 	and.w	r2, r2, #1
 8002114:	9200      	str	r2, [sp, #0]
 8002116:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002118:	69da      	ldr	r2, [r3, #28]
 800211a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800211e:	61da      	str	r2, [r3, #28]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002126:	9301      	str	r3, [sp, #4]
 8002128:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800212a:	684b      	ldr	r3, [r1, #4]
 800212c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002130:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002134:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002136:	b002      	add	sp, #8
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40021000 	.word	0x40021000
 8002140:	40010000 	.word	0x40010000

08002144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002144:	e7fe      	b.n	8002144 <NMI_Handler>
 8002146:	bf00      	nop

08002148 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002148:	e7fe      	b.n	8002148 <HardFault_Handler>
 800214a:	bf00      	nop

0800214c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800214c:	e7fe      	b.n	800214c <MemManage_Handler>
 800214e:	bf00      	nop

08002150 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002150:	e7fe      	b.n	8002150 <BusFault_Handler>
 8002152:	bf00      	nop

08002154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002154:	e7fe      	b.n	8002154 <UsageFault_Handler>
 8002156:	bf00      	nop

08002158 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop

0800215c <DebugMon_Handler>:
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop

08002160 <PendSV_Handler>:
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop

08002164 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002164:	f000 b91e 	b.w	80023a4 <HAL_IncTick>

08002168 <DMA1_Channel1_IRQHandler>:
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1));
 8002168:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <DMA1_Channel1_IRQHandler+0x48>)

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800216a:	b470      	push	{r4, r5, r6}
 800216c:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC1(DMA1) == 1){
 800216e:	0790      	lsls	r0, r2, #30
 8002170:	d509      	bpl.n	8002186 <DMA1_Channel1_IRQHandler+0x1e>
		FT_flag = 1;
 8002172:	2601      	movs	r6, #1
		HT_flag = 0;
 8002174:	2400      	movs	r4, #0
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8002176:	2102      	movs	r1, #2
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 8002178:	2204      	movs	r2, #4
		FT_flag = 1;
 800217a:	4d0e      	ldr	r5, [pc, #56]	; (80021b4 <DMA1_Channel1_IRQHandler+0x4c>)
		HT_flag = 0;
 800217c:	480e      	ldr	r0, [pc, #56]	; (80021b8 <DMA1_Channel1_IRQHandler+0x50>)
		FT_flag = 1;
 800217e:	702e      	strb	r6, [r5, #0]
		HT_flag = 0;
 8002180:	7004      	strb	r4, [r0, #0]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8002182:	6059      	str	r1, [r3, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 8002184:	605a      	str	r2, [r3, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1));
 8002186:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <DMA1_Channel1_IRQHandler+0x48>)
 8002188:	681a      	ldr	r2, [r3, #0]
		LL_DMA_ClearFlag_TC1(DMA1);
		LL_DMA_ClearFlag_HT1(DMA1);
	}

	if(LL_DMA_IsActiveFlag_HT1(DMA1) == 1){
 800218a:	0751      	lsls	r1, r2, #29
 800218c:	d507      	bpl.n	800219e <DMA1_Channel1_IRQHandler+0x36>
		HT_flag = 1;
 800218e:	2501      	movs	r5, #1
		FT_flag = 0;
 8002190:	2000      	movs	r0, #0
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 8002192:	2204      	movs	r2, #4
		HT_flag = 1;
 8002194:	4c08      	ldr	r4, [pc, #32]	; (80021b8 <DMA1_Channel1_IRQHandler+0x50>)
		FT_flag = 0;
 8002196:	4907      	ldr	r1, [pc, #28]	; (80021b4 <DMA1_Channel1_IRQHandler+0x4c>)
		HT_flag = 1;
 8002198:	7025      	strb	r5, [r4, #0]
		FT_flag = 0;
 800219a:	7008      	strb	r0, [r1, #0]
 800219c:	605a      	str	r2, [r3, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1));
 800219e:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <DMA1_Channel1_IRQHandler+0x48>)
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80021a0:	bc70      	pop	{r4, r5, r6}
 80021a2:	681a      	ldr	r2, [r3, #0]
	if(LL_DMA_IsActiveFlag_TE1(DMA1) == 1){
 80021a4:	0712      	lsls	r2, r2, #28
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 80021a6:	bf44      	itt	mi
 80021a8:	2208      	movmi	r2, #8
 80021aa:	605a      	strmi	r2, [r3, #4]
}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40020000 	.word	0x40020000
 80021b4:	20002968 	.word	0x20002968
 80021b8:	20002940 	.word	0x20002940

080021bc <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80021bc:	4801      	ldr	r0, [pc, #4]	; (80021c4 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80021be:	f000 bc51 	b.w	8002a64 <HAL_PCD_IRQHandler>
 80021c2:	bf00      	nop
 80021c4:	20003604 	.word	0x20003604

080021c8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c8:	490d      	ldr	r1, [pc, #52]	; (8002200 <_sbrk+0x38>)
{
 80021ca:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021cc:	4a0d      	ldr	r2, [pc, #52]	; (8002204 <_sbrk+0x3c>)
 80021ce:	4c0e      	ldr	r4, [pc, #56]	; (8002208 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80021d0:	680b      	ldr	r3, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d2:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80021d4:	b12b      	cbz	r3, 80021e2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021d6:	4418      	add	r0, r3
 80021d8:	4290      	cmp	r0, r2
 80021da:	d808      	bhi.n	80021ee <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80021dc:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80021de:	4618      	mov	r0, r3
 80021e0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80021e2:	4c0a      	ldr	r4, [pc, #40]	; (800220c <_sbrk+0x44>)
 80021e4:	4623      	mov	r3, r4
  if (__sbrk_heap_end + incr > max_heap)
 80021e6:	4418      	add	r0, r3
 80021e8:	4290      	cmp	r0, r2
    __sbrk_heap_end = &_end;
 80021ea:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80021ec:	d9f6      	bls.n	80021dc <_sbrk+0x14>
    errno = ENOMEM;
 80021ee:	f003 fc51 	bl	8005a94 <__errno>
 80021f2:	220c      	movs	r2, #12
    return (void *)-1;
 80021f4:	f04f 33ff 	mov.w	r3, #4294967295
    errno = ENOMEM;
 80021f8:	6002      	str	r2, [r0, #0]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	bd10      	pop	{r4, pc}
 80021fe:	bf00      	nop
 8002200:	200026dc 	.word	0x200026dc
 8002204:	20005000 	.word	0x20005000
 8002208:	00000400 	.word	0x00000400
 800220c:	200038f8 	.word	0x200038f8

08002210 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop

08002214 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002214:	b5f0      	push	{r4, r5, r6, r7, lr}
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002216:	2400      	movs	r4, #0
{
 8002218:	b095      	sub	sp, #84	; 0x54
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800221a:	4621      	mov	r1, r4
 800221c:	a80c      	add	r0, sp, #48	; 0x30
 800221e:	2220      	movs	r2, #32
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002220:	f8cd 4006 	str.w	r4, [sp, #6]
 8002224:	f8cd 400a 	str.w	r4, [sp, #10]
 8002228:	f8cd 400e 	str.w	r4, [sp, #14]
 800222c:	f8cd 4012 	str.w	r4, [sp, #18]
 8002230:	f8ad 4016 	strh.w	r4, [sp, #22]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002234:	f003 fc58 	bl	8005ae8 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);

  TIM_InitStruct.Prescaler = 17999;
 8002238:	f244 614f 	movw	r1, #17999	; 0x464f
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
  TIM_InitStruct.Autoreload = 1;
 800223c:	2601      	movs	r6, #1
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
  TIM_InitStruct.RepetitionCounter = 0;
  LL_TIM_Init(TIM1, &TIM_InitStruct);
  LL_TIM_DisableARRPreload(TIM1);
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_TOGGLE;
 800223e:	2730      	movs	r7, #48	; 0x30
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8002240:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002244:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8002248:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  SET_BIT(RCC->APB2ENR, Periphs);
 800224c:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <MX_TIM1_Init+0xd0>)
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800224e:	4d26      	ldr	r5, [pc, #152]	; (80022e8 <MX_TIM1_Init+0xd4>)
 8002250:	699a      	ldr	r2, [r3, #24]
 8002252:	4628      	mov	r0, r5
 8002254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002258:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800225a:	699b      	ldr	r3, [r3, #24]
  TIM_InitStruct.Prescaler = 17999;
 800225c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8002260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002264:	9300      	str	r3, [sp, #0]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8002266:	a901      	add	r1, sp, #4
  (void)tmpreg;
 8002268:	9b00      	ldr	r3, [sp, #0]
  TIM_InitStruct.Autoreload = 1;
 800226a:	9603      	str	r6, [sp, #12]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800226c:	f001 fbfc 	bl	8003a68 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002270:	682b      	ldr	r3, [r5, #0]
  TIM_OC_InitStruct.CompareValue = 0;
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002272:	eb0d 0207 	add.w	r2, sp, r7
 8002276:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800227a:	602b      	str	r3, [r5, #0]
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800227c:	68ab      	ldr	r3, [r5, #8]
 800227e:	4631      	mov	r1, r6
 8002280:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002284:	f023 0307 	bic.w	r3, r3, #7
 8002288:	60ab      	str	r3, [r5, #8]
 800228a:	4628      	mov	r0, r5
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800228c:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002290:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002294:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002298:	9413      	str	r4, [sp, #76]	; 0x4c
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_TOGGLE;
 800229a:	970c      	str	r7, [sp, #48]	; 0x30
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
  TIM_BDTRInitStruct.DeadTime = 0;
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 800229c:	f44f 5600 	mov.w	r6, #8192	; 0x2000
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80022a0:	f001 fc18 	bl	8003ad4 <LL_TIM_OC_Init>
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_ENABLE;
 80022a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80022a8:	69ab      	ldr	r3, [r5, #24]
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 80022aa:	a906      	add	r1, sp, #24
 80022ac:	f023 0304 	bic.w	r3, r3, #4
 80022b0:	61ab      	str	r3, [r5, #24]
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80022b2:	686b      	ldr	r3, [r5, #4]
 80022b4:	4628      	mov	r0, r5
 80022b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022be:	606b      	str	r3, [r5, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80022c0:	68ab      	ldr	r3, [r5, #8]
 80022c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022c6:	60ab      	str	r3, [r5, #8]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 80022c8:	e9cd 4406 	strd	r4, r4, [sp, #24]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 80022cc:	9408      	str	r4, [sp, #32]
  TIM_BDTRInitStruct.DeadTime = 0;
 80022ce:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 80022d2:	f8ad 4026 	strh.w	r4, [sp, #38]	; 0x26
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_ENABLE;
 80022d6:	e9cd 620a 	strd	r6, r2, [sp, #40]	; 0x28
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 80022da:	f001 fcd5 	bl	8003c88 <LL_TIM_BDTR_Init>

}
 80022de:	b015      	add	sp, #84	; 0x54
 80022e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40012c00 	.word	0x40012c00

080022ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80022ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80022ee:	e003      	b.n	80022f8 <LoopCopyDataInit>

080022f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80022f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80022f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80022f6:	3104      	adds	r1, #4

080022f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80022f8:	480a      	ldr	r0, [pc, #40]	; (8002324 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80022fa:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80022fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80022fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002300:	d3f6      	bcc.n	80022f0 <CopyDataInit>
  ldr r2, =_sbss
 8002302:	4a0a      	ldr	r2, [pc, #40]	; (800232c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002304:	e002      	b.n	800230c <LoopFillZerobss>

08002306 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002306:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002308:	f842 3b04 	str.w	r3, [r2], #4

0800230c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800230c:	4b08      	ldr	r3, [pc, #32]	; (8002330 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800230e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002310:	d3f9      	bcc.n	8002306 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002312:	f7ff ff7d 	bl	8002210 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002316:	f003 fbc3 	bl	8005aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800231a:	f7ff fbed 	bl	8001af8 <main>
  bx lr
 800231e:	4770      	bx	lr
  ldr r3, =_sidata
 8002320:	0800a078 	.word	0x0800a078
  ldr r0, =_sdata
 8002324:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002328:	20000354 	.word	0x20000354
  ldr r2, =_sbss
 800232c:	20000354 	.word	0x20000354
  ldr r3, = _ebss
 8002330:	200038f4 	.word	0x200038f4

08002334 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002334:	e7fe      	b.n	8002334 <ADC1_2_IRQHandler>
	...

08002338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002338:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800233a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800233e:	490d      	ldr	r1, [pc, #52]	; (8002374 <HAL_InitTick+0x3c>)
 8002340:	4a0d      	ldr	r2, [pc, #52]	; (8002378 <HAL_InitTick+0x40>)
 8002342:	7809      	ldrb	r1, [r1, #0]
 8002344:	6812      	ldr	r2, [r2, #0]
 8002346:	fbb3 f3f1 	udiv	r3, r3, r1
{
 800234a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800234c:	fbb2 f0f3 	udiv	r0, r2, r3
 8002350:	f000 f9e0 	bl	8002714 <HAL_SYSTICK_Config>
 8002354:	b908      	cbnz	r0, 800235a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002356:	2d0f      	cmp	r5, #15
 8002358:	d901      	bls.n	800235e <HAL_InitTick+0x26>
    return HAL_ERROR;
 800235a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800235c:	bd38      	pop	{r3, r4, r5, pc}
 800235e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002360:	4602      	mov	r2, r0
 8002362:	4629      	mov	r1, r5
 8002364:	f04f 30ff 	mov.w	r0, #4294967295
 8002368:	f000 f990 	bl	800268c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800236c:	4b03      	ldr	r3, [pc, #12]	; (800237c <HAL_InitTick+0x44>)
 800236e:	4620      	mov	r0, r4
 8002370:	601d      	str	r5, [r3, #0]
}
 8002372:	bd38      	pop	{r3, r4, r5, pc}
 8002374:	2000000c 	.word	0x2000000c
 8002378:	20000008 	.word	0x20000008
 800237c:	20000010 	.word	0x20000010

08002380 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002380:	4a07      	ldr	r2, [pc, #28]	; (80023a0 <HAL_Init+0x20>)
{
 8002382:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002384:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002386:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002388:	f043 0310 	orr.w	r3, r3, #16
 800238c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800238e:	f000 f96b 	bl	8002668 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002392:	2000      	movs	r0, #0
 8002394:	f7ff ffd0 	bl	8002338 <HAL_InitTick>
  HAL_MspInit();
 8002398:	f7ff feb2 	bl	8002100 <HAL_MspInit>
}
 800239c:	2000      	movs	r0, #0
 800239e:	bd08      	pop	{r3, pc}
 80023a0:	40022000 	.word	0x40022000

080023a4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80023a4:	4a03      	ldr	r2, [pc, #12]	; (80023b4 <HAL_IncTick+0x10>)
 80023a6:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <HAL_IncTick+0x14>)
 80023a8:	6811      	ldr	r1, [r2, #0]
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	440b      	add	r3, r1
 80023ae:	6013      	str	r3, [r2, #0]
}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	2000296c 	.word	0x2000296c
 80023b8:	2000000c 	.word	0x2000000c

080023bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80023bc:	4b01      	ldr	r3, [pc, #4]	; (80023c4 <HAL_GetTick+0x8>)
 80023be:	6818      	ldr	r0, [r3, #0]
}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	2000296c 	.word	0x2000296c

080023c8 <HAL_ADC_Init>:
  uint32_t tmp_cr1 = 0U;
  uint32_t tmp_cr2 = 0U;
  uint32_t tmp_sqr1 = 0U;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023c8:	2800      	cmp	r0, #0
 80023ca:	d071      	beq.n	80024b0 <HAL_ADC_Init+0xe8>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023cc:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 80023ce:	b570      	push	{r4, r5, r6, lr}
 80023d0:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d062      	beq.n	800249c <HAL_ADC_Init+0xd4>
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80023d6:	6823      	ldr	r3, [r4, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	07d0      	lsls	r0, r2, #31
 80023dc:	d449      	bmi.n	8002472 <HAL_ADC_Init+0xaa>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023de:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80023e0:	06d2      	lsls	r2, r2, #27
 80023e2:	d440      	bmi.n	8002466 <HAL_ADC_Init+0x9e>
    ADC_STATE_CLR_SET(hadc->State,
 80023e4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023e6:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80023e8:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023ec:	69e6      	ldr	r6, [r4, #28]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80023ee:	68a0      	ldr	r0, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80023f0:	f022 0202 	bic.w	r2, r2, #2
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80023f4:	7b25      	ldrb	r5, [r4, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80023f6:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023fa:	4331      	orrs	r1, r6
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80023fc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    ADC_STATE_CLR_SET(hadc->State,
 8002400:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002402:	ea41 0245 	orr.w	r2, r1, r5, lsl #1
 8002406:	7d21      	ldrb	r1, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002408:	d05d      	beq.n	80024c6 <HAL_ADC_Init+0xfe>
 800240a:	2801      	cmp	r0, #1
 800240c:	f000 8087 	beq.w	800251e <HAL_ADC_Init+0x156>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002410:	2901      	cmp	r1, #1
 8002412:	f000 8093 	beq.w	800253c <HAL_ADC_Init+0x174>
      MODIFY_REG(hadc->Instance->CR1,
 8002416:	6858      	ldr	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002418:	4949      	ldr	r1, [pc, #292]	; (8002540 <HAL_ADC_Init+0x178>)
      MODIFY_REG(hadc->Instance->CR1,
 800241a:	f420 4069 	bic.w	r0, r0, #59648	; 0xe900
 800241e:	6058      	str	r0, [r3, #4]
  uint32_t tmp_sqr1 = 0U;
 8002420:	2000      	movs	r0, #0
      MODIFY_REG(hadc->Instance->CR2,
 8002422:	689d      	ldr	r5, [r3, #8]
 8002424:	4029      	ands	r1, r5
 8002426:	4311      	orrs	r1, r2
 8002428:	6099      	str	r1, [r3, #8]
    MODIFY_REG(hadc->Instance->SQR1,
 800242a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800242c:	4d45      	ldr	r5, [pc, #276]	; (8002544 <HAL_ADC_Init+0x17c>)
    MODIFY_REG(hadc->Instance->SQR1,
 800242e:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8002432:	4301      	orrs	r1, r0
 8002434:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	401d      	ands	r5, r3
 800243a:	42aa      	cmp	r2, r5
 800243c:	d03a      	beq.n	80024b4 <HAL_ADC_Init+0xec>
      tmp_hal_status = HAL_ERROR;
 800243e:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8002440:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002442:	f023 0312 	bic.w	r3, r3, #18
 8002446:	f043 0310 	orr.w	r3, r3, #16
 800244a:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800244c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800244e:	4303      	orrs	r3, r0
 8002450:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8002452:	bd70      	pop	{r4, r5, r6, pc}
    while(ADC_IS_ENABLE(hadc) != RESET)
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002454:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002456:	f043 0310 	orr.w	r3, r3, #16
 800245a:	62a3      	str	r3, [r4, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800245c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002464:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002466:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8002468:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800246a:	f043 0310 	orr.w	r3, r3, #16
 800246e:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002470:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_DISABLE(hadc);
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	f022 0201 	bic.w	r2, r2, #1
 8002478:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800247a:	f7ff ff9f 	bl	80023bc <HAL_GetTick>
 800247e:	4605      	mov	r5, r0
 8002480:	e004      	b.n	800248c <HAL_ADC_Init+0xc4>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002482:	f7ff ff9b 	bl	80023bc <HAL_GetTick>
 8002486:	1b40      	subs	r0, r0, r5
 8002488:	2802      	cmp	r0, #2
 800248a:	d8e3      	bhi.n	8002454 <HAL_ADC_Init+0x8c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800248c:	6823      	ldr	r3, [r4, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	07d1      	lsls	r1, r2, #31
 8002492:	d4f6      	bmi.n	8002482 <HAL_ADC_Init+0xba>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002494:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002496:	06d2      	lsls	r2, r2, #27
 8002498:	d4e5      	bmi.n	8002466 <HAL_ADC_Init+0x9e>
 800249a:	e7a3      	b.n	80023e4 <HAL_ADC_Init+0x1c>
    ADC_CLEAR_ERRORCODE(hadc);
 800249c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800249e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80024a2:	f7fe ff5f 	bl	8001364 <HAL_ADC_MspInit>
  if (ADC_IS_ENABLE(hadc) != RESET)
 80024a6:	6823      	ldr	r3, [r4, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	07d0      	lsls	r0, r2, #31
 80024ac:	d4e1      	bmi.n	8002472 <HAL_ADC_Init+0xaa>
 80024ae:	e796      	b.n	80023de <HAL_ADC_Init+0x16>
    return HAL_ERROR;
 80024b0:	2001      	movs	r0, #1
}
 80024b2:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 80024b4:	2000      	movs	r0, #0
 80024b6:	62e0      	str	r0, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80024b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80024ba:	f023 0303 	bic.w	r3, r3, #3
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80024c4:	bd70      	pop	{r4, r5, r6, pc}
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024c6:	2901      	cmp	r1, #1
 80024c8:	d00e      	beq.n	80024e8 <HAL_ADC_Init+0x120>
      MODIFY_REG(hadc->Instance->CR1,
 80024ca:	6858      	ldr	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80024cc:	491c      	ldr	r1, [pc, #112]	; (8002540 <HAL_ADC_Init+0x178>)
      MODIFY_REG(hadc->Instance->CR1,
 80024ce:	f420 4069 	bic.w	r0, r0, #59648	; 0xe900
 80024d2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80024d6:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80024d8:	6898      	ldr	r0, [r3, #8]
 80024da:	4001      	ands	r1, r0
 80024dc:	4311      	orrs	r1, r2
 80024de:	6099      	str	r1, [r3, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80024e0:	6921      	ldr	r1, [r4, #16]
 80024e2:	3901      	subs	r1, #1
 80024e4:	0508      	lsls	r0, r1, #20
 80024e6:	e7a0      	b.n	800242a <HAL_ADC_Init+0x62>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80024e8:	4606      	mov	r6, r0
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80024ea:	b9f5      	cbnz	r5, 800252a <HAL_ADC_Init+0x162>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80024ec:	69a1      	ldr	r1, [r4, #24]
 80024ee:	1e4d      	subs	r5, r1, #1
 80024f0:	ea46 3545 	orr.w	r5, r6, r5, lsl #13
 80024f4:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80024f8:	685d      	ldr	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80024fa:	4911      	ldr	r1, [pc, #68]	; (8002540 <HAL_ADC_Init+0x178>)
      MODIFY_REG(hadc->Instance->CR1,
 80024fc:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8002500:	4335      	orrs	r5, r6
 8002502:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002504:	689d      	ldr	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002506:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR2,
 800250a:	ea01 0105 	and.w	r1, r1, r5
 800250e:	ea41 0102 	orr.w	r1, r1, r2
 8002512:	6099      	str	r1, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002514:	d0e4      	beq.n	80024e0 <HAL_ADC_Init+0x118>
 8002516:	2801      	cmp	r0, #1
 8002518:	d0e2      	beq.n	80024e0 <HAL_ADC_Init+0x118>
  uint32_t tmp_sqr1 = 0U;
 800251a:	2000      	movs	r0, #0
 800251c:	e785      	b.n	800242a <HAL_ADC_Init+0x62>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800251e:	2901      	cmp	r1, #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002520:	bf08      	it	eq
 8002522:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002526:	d0e0      	beq.n	80024ea <HAL_ADC_Init+0x122>
 8002528:	e7cf      	b.n	80024ca <HAL_ADC_Init+0x102>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800252a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800252c:	f041 0120 	orr.w	r1, r1, #32
 8002530:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002532:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002534:	f041 0101 	orr.w	r1, r1, #1
 8002538:	62e1      	str	r1, [r4, #44]	; 0x2c
 800253a:	e7dd      	b.n	80024f8 <HAL_ADC_Init+0x130>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800253c:	2600      	movs	r6, #0
 800253e:	e7d4      	b.n	80024ea <HAL_ADC_Init+0x122>
 8002540:	ffe1f7fd 	.word	0xffe1f7fd
 8002544:	ff1f0efe 	.word	0xff1f0efe

08002548 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8002548:	2200      	movs	r2, #0
{ 
 800254a:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hadc);
 800254c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 8002550:	b083      	sub	sp, #12
  __HAL_LOCK(hadc);
 8002552:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 8002554:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002556:	d05f      	beq.n	8002618 <HAL_ADC_ConfigChannel+0xd0>
 8002558:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 800255a:	684d      	ldr	r5, [r1, #4]
 800255c:	6804      	ldr	r4, [r0, #0]
 800255e:	2d06      	cmp	r5, #6
  __HAL_LOCK(hadc);
 8002560:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8002564:	680a      	ldr	r2, [r1, #0]
 8002566:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800256a:	f04f 061f 	mov.w	r6, #31
  if (sConfig->Rank < 7U)
 800256e:	d925      	bls.n	80025bc <HAL_ADC_ConfigChannel+0x74>
  else if (sConfig->Rank < 13U)
 8002570:	2d0c      	cmp	r5, #12
 8002572:	d847      	bhi.n	8002604 <HAL_ADC_ConfigChannel+0xbc>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002574:	3b23      	subs	r3, #35	; 0x23
 8002576:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8002578:	409e      	lsls	r6, r3
 800257a:	ea25 0506 	bic.w	r5, r5, r6
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	432b      	orrs	r3, r5
 8002584:	6323      	str	r3, [r4, #48]	; 0x30
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002586:	2a09      	cmp	r2, #9
 8002588:	688b      	ldr	r3, [r1, #8]
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800258a:	f04f 0607 	mov.w	r6, #7
 800258e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002592:	d923      	bls.n	80025dc <HAL_ADC_ConfigChannel+0x94>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002594:	391e      	subs	r1, #30
 8002596:	68e5      	ldr	r5, [r4, #12]
 8002598:	408e      	lsls	r6, r1
 800259a:	408b      	lsls	r3, r1
 800259c:	ea25 0106 	bic.w	r1, r5, r6
 80025a0:	430b      	orrs	r3, r1
 80025a2:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025a4:	f1a2 0310 	sub.w	r3, r2, #16
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d922      	bls.n	80025f2 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ac:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 80025ae:	2200      	movs	r2, #0
 80025b0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	b003      	add	sp, #12
 80025b8:	bc70      	pop	{r4, r5, r6}
 80025ba:	4770      	bx	lr
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80025bc:	3b05      	subs	r3, #5
 80025be:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80025c0:	409e      	lsls	r6, r3
 80025c2:	ea25 0506 	bic.w	r5, r5, r6
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	432b      	orrs	r3, r5
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80025cc:	2a09      	cmp	r2, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80025ce:	6363      	str	r3, [r4, #52]	; 0x34
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80025d0:	f04f 0607 	mov.w	r6, #7
 80025d4:	688b      	ldr	r3, [r1, #8]
 80025d6:	eb02 0142 	add.w	r1, r2, r2, lsl #1
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80025da:	d8db      	bhi.n	8002594 <HAL_ADC_ConfigChannel+0x4c>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80025dc:	6925      	ldr	r5, [r4, #16]
 80025de:	408e      	lsls	r6, r1
 80025e0:	408b      	lsls	r3, r1
 80025e2:	ea25 0106 	bic.w	r1, r5, r6
 80025e6:	430b      	orrs	r3, r1
 80025e8:	6123      	str	r3, [r4, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025ea:	f1a2 0310 	sub.w	r3, r2, #16
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d8dc      	bhi.n	80025ac <HAL_ADC_ConfigChannel+0x64>
    if (hadc->Instance == ADC1)
 80025f2:	4b1a      	ldr	r3, [pc, #104]	; (800265c <HAL_ADC_ConfigChannel+0x114>)
 80025f4:	429c      	cmp	r4, r3
 80025f6:	d014      	beq.n	8002622 <HAL_ADC_ConfigChannel+0xda>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025f8:	6a82      	ldr	r2, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025fc:	f042 0220 	orr.w	r2, r2, #32
 8002600:	6282      	str	r2, [r0, #40]	; 0x28
 8002602:	e7d4      	b.n	80025ae <HAL_ADC_ConfigChannel+0x66>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002604:	3b41      	subs	r3, #65	; 0x41
 8002606:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8002608:	409e      	lsls	r6, r3
 800260a:	ea25 0506 	bic.w	r5, r5, r6
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	432b      	orrs	r3, r5
 8002614:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002616:	e7b6      	b.n	8002586 <HAL_ADC_ConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 8002618:	2302      	movs	r3, #2
}
 800261a:	4618      	mov	r0, r3
 800261c:	b003      	add	sp, #12
 800261e:	bc70      	pop	{r4, r5, r6}
 8002620:	4770      	bx	lr
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002622:	68a3      	ldr	r3, [r4, #8]
 8002624:	021b      	lsls	r3, r3, #8
 8002626:	d4c1      	bmi.n	80025ac <HAL_ADC_ConfigChannel+0x64>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002628:	68a3      	ldr	r3, [r4, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800262a:	2a10      	cmp	r2, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800262c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002630:	60a3      	str	r3, [r4, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002632:	d1bb      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x64>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002634:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <HAL_ADC_ConfigChannel+0x118>)
 8002636:	4a0b      	ldr	r2, [pc, #44]	; (8002664 <HAL_ADC_ConfigChannel+0x11c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	fba2 2303 	umull	r2, r3, r2, r3
 800263e:	0c9b      	lsrs	r3, r3, #18
 8002640:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002648:	9b01      	ldr	r3, [sp, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0ae      	beq.n	80025ac <HAL_ADC_ConfigChannel+0x64>
            wait_loop_index--;
 800264e:	9b01      	ldr	r3, [sp, #4]
 8002650:	3b01      	subs	r3, #1
 8002652:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002654:	9b01      	ldr	r3, [sp, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f9      	bne.n	800264e <HAL_ADC_ConfigChannel+0x106>
 800265a:	e7a7      	b.n	80025ac <HAL_ADC_ConfigChannel+0x64>
 800265c:	40012400 	.word	0x40012400
 8002660:	20000008 	.word	0x20000008
 8002664:	431bde83 	.word	0x431bde83

08002668 <HAL_NVIC_SetPriorityGrouping>:
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002668:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800266c:	4a06      	ldr	r2, [pc, #24]	; (8002688 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800266e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002670:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002672:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002676:	400b      	ands	r3, r1
 8002678:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800267c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8002680:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002682:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	e000ed00 	.word	0xe000ed00

0800268c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800268c:	4b18      	ldr	r3, [pc, #96]	; (80026f0 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800268e:	b430      	push	{r4, r5}
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002696:	f1c3 0507 	rsb	r5, r3, #7
 800269a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800269c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a0:	bf28      	it	cs
 80026a2:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026a4:	2c06      	cmp	r4, #6
 80026a6:	d919      	bls.n	80026dc <HAL_NVIC_SetPriority+0x50>
 80026a8:	f04f 34ff 	mov.w	r4, #4294967295
 80026ac:	3b03      	subs	r3, #3
 80026ae:	409c      	lsls	r4, r3
 80026b0:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b4:	f04f 32ff 	mov.w	r2, #4294967295
 80026b8:	40aa      	lsls	r2, r5
 80026ba:	ea21 0102 	bic.w	r1, r1, r2
 80026be:	fa01 f203 	lsl.w	r2, r1, r3
 80026c2:	4322      	orrs	r2, r4
 80026c4:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 80026c6:	2800      	cmp	r0, #0
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	db0a      	blt.n	80026e2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026cc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80026d0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80026d4:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80026d8:	bc30      	pop	{r4, r5}
 80026da:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026dc:	2400      	movs	r4, #0
 80026de:	4623      	mov	r3, r4
 80026e0:	e7e8      	b.n	80026b4 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e2:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <HAL_NVIC_SetPriority+0x68>)
 80026e4:	f000 000f 	and.w	r0, r0, #15
 80026e8:	4403      	add	r3, r0
 80026ea:	761a      	strb	r2, [r3, #24]
 80026ec:	bc30      	pop	{r4, r5}
 80026ee:	4770      	bx	lr
 80026f0:	e000ed00 	.word	0xe000ed00
 80026f4:	e000ecfc 	.word	0xe000ecfc

080026f8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80026f8:	2800      	cmp	r0, #0
 80026fa:	db07      	blt.n	800270c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026fc:	2301      	movs	r3, #1
 80026fe:	f000 011f 	and.w	r1, r0, #31
 8002702:	4a03      	ldr	r2, [pc, #12]	; (8002710 <HAL_NVIC_EnableIRQ+0x18>)
 8002704:	408b      	lsls	r3, r1
 8002706:	0940      	lsrs	r0, r0, #5
 8002708:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	e000e100 	.word	0xe000e100

08002714 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002714:	3801      	subs	r0, #1
 8002716:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800271a:	d20d      	bcs.n	8002738 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800271c:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271e:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002720:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002722:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002724:	4b05      	ldr	r3, [pc, #20]	; (800273c <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002726:	4c06      	ldr	r4, [pc, #24]	; (8002740 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002728:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272a:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800272e:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 8002730:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002732:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002734:	6019      	str	r1, [r3, #0]
 8002736:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002738:	2001      	movs	r0, #1
 800273a:	4770      	bx	lr
 800273c:	e000e010 	.word	0xe000e010
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002744:	680a      	ldr	r2, [r1, #0]
 8002746:	2a00      	cmp	r2, #0
 8002748:	f000 80db 	beq.w	8002902 <HAL_GPIO_Init+0x1be>
{
 800274c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00u;
 8002750:	f04f 0a00 	mov.w	sl, #0
{
 8002754:	b085      	sub	sp, #20
  uint32_t position = 0x00u;
 8002756:	4655      	mov	r5, sl
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002758:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 800292c <HAL_GPIO_Init+0x1e8>
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800275c:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 8002930 <HAL_GPIO_Init+0x1ec>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002760:	4f6d      	ldr	r7, [pc, #436]	; (8002918 <HAL_GPIO_Init+0x1d4>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002762:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8002934 <HAL_GPIO_Init+0x1f0>
 8002766:	e003      	b.n	8002770 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8002768:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800276a:	fa32 f305 	lsrs.w	r3, r2, r5
 800276e:	d078      	beq.n	8002862 <HAL_GPIO_Init+0x11e>
    ioposition = (0x01uL << position);
 8002770:	2301      	movs	r3, #1
 8002772:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002774:	ea02 0403 	and.w	r4, r2, r3
    if (iocurrent == ioposition)
 8002778:	42a3      	cmp	r3, r4
 800277a:	d1f5      	bne.n	8002768 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 800277c:	684a      	ldr	r2, [r1, #4]
 800277e:	2a12      	cmp	r2, #18
 8002780:	f000 809e 	beq.w	80028c0 <HAL_GPIO_Init+0x17c>
 8002784:	f200 8087 	bhi.w	8002896 <HAL_GPIO_Init+0x152>
 8002788:	2a02      	cmp	r2, #2
 800278a:	f000 809d 	beq.w	80028c8 <HAL_GPIO_Init+0x184>
 800278e:	d97c      	bls.n	800288a <HAL_GPIO_Init+0x146>
 8002790:	2a03      	cmp	r2, #3
 8002792:	d069      	beq.n	8002868 <HAL_GPIO_Init+0x124>
 8002794:	2a11      	cmp	r2, #17
 8002796:	d102      	bne.n	800279e <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002798:	68cb      	ldr	r3, [r1, #12]
 800279a:	f103 0a04 	add.w	sl, r3, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800279e:	2cff      	cmp	r4, #255	; 0xff
 80027a0:	d866      	bhi.n	8002870 <HAL_GPIO_Init+0x12c>
 80027a2:	4681      	mov	r9, r0
 80027a4:	6803      	ldr	r3, [r0, #0]
 80027a6:	00aa      	lsls	r2, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027a8:	260f      	movs	r6, #15
 80027aa:	fa06 fb02 	lsl.w	fp, r6, r2
 80027ae:	ea23 030b 	bic.w	r3, r3, fp
 80027b2:	fa0a f202 	lsl.w	r2, sl, r2
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c9 3000 	str.w	r3, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027bc:	684a      	ldr	r2, [r1, #4]
 80027be:	00d3      	lsls	r3, r2, #3
 80027c0:	d561      	bpl.n	8002886 <HAL_GPIO_Init+0x142>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027c2:	f8dc 9018 	ldr.w	r9, [ip, #24]
 80027c6:	f025 0303 	bic.w	r3, r5, #3
 80027ca:	f049 0901 	orr.w	r9, r9, #1
 80027ce:	f8cc 9018 	str.w	r9, [ip, #24]
 80027d2:	f8dc 9018 	ldr.w	r9, [ip, #24]
 80027d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80027da:	f009 0901 	and.w	r9, r9, #1
 80027de:	f8cd 900c 	str.w	r9, [sp, #12]
 80027e2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027e6:	f005 0903 	and.w	r9, r5, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027ea:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027ee:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80027f2:	f8d3 b008 	ldr.w	fp, [r3, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027f6:	fa06 f609 	lsl.w	r6, r6, r9
 80027fa:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027fe:	4570      	cmp	r0, lr
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002800:	9601      	str	r6, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002802:	d011      	beq.n	8002828 <HAL_GPIO_Init+0xe4>
 8002804:	4540      	cmp	r0, r8
 8002806:	d063      	beq.n	80028d0 <HAL_GPIO_Init+0x18c>
 8002808:	4e44      	ldr	r6, [pc, #272]	; (800291c <HAL_GPIO_Init+0x1d8>)
 800280a:	42b0      	cmp	r0, r6
 800280c:	d07a      	beq.n	8002904 <HAL_GPIO_Init+0x1c0>
 800280e:	4e44      	ldr	r6, [pc, #272]	; (8002920 <HAL_GPIO_Init+0x1dc>)
 8002810:	42b0      	cmp	r0, r6
 8002812:	bf0c      	ite	eq
 8002814:	f04f 0b03 	moveq.w	fp, #3
 8002818:	f04f 0b04 	movne.w	fp, #4
 800281c:	9e01      	ldr	r6, [sp, #4]
 800281e:	fa0b f909 	lsl.w	r9, fp, r9
 8002822:	ea46 0609 	orr.w	r6, r6, r9
 8002826:	9601      	str	r6, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 8002828:	609e      	str	r6, [r3, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800282a:	683b      	ldr	r3, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800282c:	03d6      	lsls	r6, r2, #15
          SET_BIT(EXTI->IMR, iocurrent);
 800282e:	bf4c      	ite	mi
 8002830:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002832:	43a3      	bicpl	r3, r4
 8002834:	603b      	str	r3, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8002836:	687b      	ldr	r3, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002838:	0396      	lsls	r6, r2, #14
          SET_BIT(EXTI->EMR, iocurrent);
 800283a:	bf4c      	ite	mi
 800283c:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800283e:	43a3      	bicpl	r3, r4
 8002840:	607b      	str	r3, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002842:	68bb      	ldr	r3, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002844:	02d6      	lsls	r6, r2, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 8002846:	bf4c      	ite	mi
 8002848:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800284a:	43a3      	bicpl	r3, r4
 800284c:	60bb      	str	r3, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800284e:	0292      	lsls	r2, r2, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 8002850:	68fb      	ldr	r3, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002852:	d515      	bpl.n	8002880 <HAL_GPIO_Init+0x13c>
          SET_BIT(EXTI->FTSR, iocurrent);
 8002854:	431c      	orrs	r4, r3
 8002856:	60fc      	str	r4, [r7, #12]
 8002858:	680a      	ldr	r2, [r1, #0]
	position++;
 800285a:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800285c:	fa32 f305 	lsrs.w	r3, r2, r5
 8002860:	d186      	bne.n	8002770 <HAL_GPIO_Init+0x2c>
  }
}
 8002862:	b005      	add	sp, #20
 8002864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002868:	2cff      	cmp	r4, #255	; 0xff
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800286a:	f04f 0a00 	mov.w	sl, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800286e:	d998      	bls.n	80027a2 <HAL_GPIO_Init+0x5e>
 8002870:	f105 4280 	add.w	r2, r5, #1073741824	; 0x40000000
 8002874:	3a08      	subs	r2, #8
 8002876:	6843      	ldr	r3, [r0, #4]
 8002878:	0092      	lsls	r2, r2, #2
 800287a:	f100 0904 	add.w	r9, r0, #4
 800287e:	e793      	b.n	80027a8 <HAL_GPIO_Init+0x64>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002880:	ea23 0404 	bic.w	r4, r3, r4
 8002884:	60fc      	str	r4, [r7, #12]
 8002886:	680a      	ldr	r2, [r1, #0]
 8002888:	e76e      	b.n	8002768 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 800288a:	b1a2      	cbz	r2, 80028b6 <HAL_GPIO_Init+0x172>
 800288c:	2a01      	cmp	r2, #1
 800288e:	d186      	bne.n	800279e <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002890:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8002894:	e783      	b.n	800279e <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 8002896:	4e23      	ldr	r6, [pc, #140]	; (8002924 <HAL_GPIO_Init+0x1e0>)
 8002898:	42b2      	cmp	r2, r6
 800289a:	d00c      	beq.n	80028b6 <HAL_GPIO_Init+0x172>
 800289c:	d920      	bls.n	80028e0 <HAL_GPIO_Init+0x19c>
 800289e:	4e22      	ldr	r6, [pc, #136]	; (8002928 <HAL_GPIO_Init+0x1e4>)
 80028a0:	42b2      	cmp	r2, r6
 80028a2:	d008      	beq.n	80028b6 <HAL_GPIO_Init+0x172>
 80028a4:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80028a8:	42b2      	cmp	r2, r6
 80028aa:	d004      	beq.n	80028b6 <HAL_GPIO_Init+0x172>
 80028ac:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 80028b0:	42b2      	cmp	r2, r6
 80028b2:	f47f af74 	bne.w	800279e <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028b6:	688a      	ldr	r2, [r1, #8]
 80028b8:	b9e2      	cbnz	r2, 80028f4 <HAL_GPIO_Init+0x1b0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028ba:	f04f 0a04 	mov.w	sl, #4
 80028be:	e76e      	b.n	800279e <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028c0:	68cb      	ldr	r3, [r1, #12]
 80028c2:	f103 0a0c 	add.w	sl, r3, #12
          break;
 80028c6:	e76a      	b.n	800279e <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028c8:	68cb      	ldr	r3, [r1, #12]
 80028ca:	f103 0a08 	add.w	sl, r3, #8
          break;
 80028ce:	e766      	b.n	800279e <HAL_GPIO_Init+0x5a>
 80028d0:	f04f 0b01 	mov.w	fp, #1
 80028d4:	fa0b f909 	lsl.w	r9, fp, r9
 80028d8:	ea46 0609 	orr.w	r6, r6, r9
 80028dc:	9601      	str	r6, [sp, #4]
 80028de:	e7a3      	b.n	8002828 <HAL_GPIO_Init+0xe4>
      switch (GPIO_Init->Mode)
 80028e0:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 80028e4:	42b2      	cmp	r2, r6
 80028e6:	d0e6      	beq.n	80028b6 <HAL_GPIO_Init+0x172>
 80028e8:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80028ec:	42b2      	cmp	r2, r6
 80028ee:	f47f af56 	bne.w	800279e <HAL_GPIO_Init+0x5a>
 80028f2:	e7e0      	b.n	80028b6 <HAL_GPIO_Init+0x172>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028f4:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80028f6:	bf0c      	ite	eq
 80028f8:	6103      	streq	r3, [r0, #16]
            GPIOx->BRR = ioposition;
 80028fa:	6143      	strne	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028fc:	f04f 0a08 	mov.w	sl, #8
 8002900:	e74d      	b.n	800279e <HAL_GPIO_Init+0x5a>
 8002902:	4770      	bx	lr
 8002904:	f04f 0b02 	mov.w	fp, #2
 8002908:	9e01      	ldr	r6, [sp, #4]
 800290a:	fa0b f909 	lsl.w	r9, fp, r9
 800290e:	ea46 0609 	orr.w	r6, r6, r9
 8002912:	9601      	str	r6, [sp, #4]
 8002914:	e788      	b.n	8002828 <HAL_GPIO_Init+0xe4>
 8002916:	bf00      	nop
 8002918:	40010400 	.word	0x40010400
 800291c:	40011000 	.word	0x40011000
 8002920:	40011400 	.word	0x40011400
 8002924:	10210000 	.word	0x10210000
 8002928:	10310000 	.word	0x10310000
 800292c:	40021000 	.word	0x40021000
 8002930:	40010800 	.word	0x40010800
 8002934:	40010c00 	.word	0x40010c00

08002938 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800293a:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800293c:	2800      	cmp	r0, #0
 800293e:	d073      	beq.n	8002a28 <HAL_PCD_Init+0xf0>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002940:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8002944:	4604      	mov	r4, r0
 8002946:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800294a:	2b00      	cmp	r3, #0
 800294c:	d067      	beq.n	8002a1e <HAL_PCD_Init+0xe6>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800294e:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002950:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002952:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8002956:	6820      	ldr	r0, [r4, #0]
 8002958:	f001 f9c4 	bl	8003ce4 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800295c:	f855 cb10 	ldr.w	ip, [r5], #16
 8002960:	466f      	mov	r7, sp
 8002962:	462e      	mov	r6, r5
 8002964:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002966:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8002968:	6833      	ldr	r3, [r6, #0]
 800296a:	1d26      	adds	r6, r4, #4
 800296c:	603b      	str	r3, [r7, #0]
 800296e:	4660      	mov	r0, ip
 8002970:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002974:	f001 f9a4 	bl	8003cc0 <USB_CoreInit>
 8002978:	4607      	mov	r7, r0
 800297a:	b130      	cbz	r0, 800298a <HAL_PCD_Init+0x52>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800297c:	2302      	movs	r3, #2
    return HAL_ERROR;
 800297e:	2501      	movs	r5, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002980:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8002984:	4628      	mov	r0, r5
 8002986:	b007      	add	sp, #28
 8002988:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800298a:	4601      	mov	r1, r0
 800298c:	6820      	ldr	r0, [r4, #0]
 800298e:	f001 f9b3 	bl	8003cf8 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002992:	6860      	ldr	r0, [r4, #4]
 8002994:	b358      	cbz	r0, 80029ee <HAL_PCD_Init+0xb6>
 8002996:	4639      	mov	r1, r7
    hpcd->IN_ep[i].is_in = 1U;
 8002998:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800299c:	463a      	mov	r2, r7
 800299e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80029a2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029a6:	1c4f      	adds	r7, r1, #1
    hpcd->IN_ep[i].num = i;
 80029a8:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029ac:	86d9      	strh	r1, [r3, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ae:	b2f9      	uxtb	r1, r7
 80029b0:	4281      	cmp	r1, r0
    hpcd->IN_ep[i].is_in = 1U;
 80029b2:	f883 c029 	strb.w	ip, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029b6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029ba:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    hpcd->IN_ep[i].xfer_len = 0U;
 80029be:	641a      	str	r2, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029c0:	d3ed      	bcc.n	800299e <HAL_PCD_Init+0x66>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029c2:	2200      	movs	r2, #0
    hpcd->OUT_ep[i].is_in = 0U;
 80029c4:	4611      	mov	r1, r2
 80029c6:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80029ca:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ce:	1c57      	adds	r7, r2, #1
    hpcd->OUT_ep[i].num = i;
 80029d0:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d4:	b2fa      	uxtb	r2, r7
 80029d6:	4282      	cmp	r2, r0
    hpcd->OUT_ep[i].is_in = 0U;
 80029d8:	f883 1169 	strb.w	r1, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029dc:	f883 116b 	strb.w	r1, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029e0:	f8c3 1178 	str.w	r1, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029e4:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029e8:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ec:	d3eb      	bcc.n	80029c6 <HAL_PCD_Init+0x8e>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029f0:	466f      	mov	r7, sp
 80029f2:	f8d4 c000 	ldr.w	ip, [r4]
 80029f6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80029f8:	682b      	ldr	r3, [r5, #0]
 80029fa:	4660      	mov	r0, ip
 80029fc:	603b      	str	r3, [r7, #0]
 80029fe:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002a02:	f001 f97b 	bl	8003cfc <USB_DevInit>
 8002a06:	4605      	mov	r5, r0
 8002a08:	2800      	cmp	r0, #0
 8002a0a:	d1b7      	bne.n	800297c <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_READY;
 8002a0c:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8002a0e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a12:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8002a14:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a18:	f001 ffc4 	bl	80049a4 <USB_DevDisconnect>
  return HAL_OK;
 8002a1c:	e7b2      	b.n	8002984 <HAL_PCD_Init+0x4c>
    hpcd->Lock = HAL_UNLOCKED;
 8002a1e:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8002a22:	f002 feff 	bl	8005824 <HAL_PCD_MspInit>
 8002a26:	e792      	b.n	800294e <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 8002a28:	2501      	movs	r5, #1
}
 8002a2a:	4628      	mov	r0, r5
 8002a2c:	b007      	add	sp, #28
 8002a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a30 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a30:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8002a32:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d011      	beq.n	8002a5e <HAL_PCD_Start+0x2e>
 8002a3a:	4604      	mov	r4, r0
 8002a3c:	2501      	movs	r5, #1
  __HAL_PCD_ENABLE(hpcd);
 8002a3e:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8002a40:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002a44:	f001 f944 	bl	8003cd0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002a48:	4629      	mov	r1, r5
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	f003 f820 	bl	8005a90 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002a50:	6820      	ldr	r0, [r4, #0]
 8002a52:	f001 ffa5 	bl	80049a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a56:	2000      	movs	r0, #0
 8002a58:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8002a5c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8002a5e:	2002      	movs	r0, #2
}
 8002a60:	bd38      	pop	{r3, r4, r5, pc}
 8002a62:	bf00      	nop

08002a64 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a68:	4604      	mov	r4, r0
 8002a6a:	b083      	sub	sp, #12
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002a6c:	6800      	ldr	r0, [r0, #0]
 8002a6e:	f001 ff9b 	bl	80049a8 <USB_ReadInterrupts>
 8002a72:	0403      	lsls	r3, r0, #16
 8002a74:	f8d4 c000 	ldr.w	ip, [r4]
 8002a78:	f100 809a 	bmi.w	8002bb0 <HAL_PCD_IRQHandler+0x14c>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002a7c:	4660      	mov	r0, ip
 8002a7e:	f001 ff93 	bl	80049a8 <USB_ReadInterrupts>
 8002a82:	0547      	lsls	r7, r0, #21
 8002a84:	f100 81af 	bmi.w	8002de6 <HAL_PCD_IRQHandler+0x382>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002a88:	6820      	ldr	r0, [r4, #0]
 8002a8a:	f001 ff8d 	bl	80049a8 <USB_ReadInterrupts>
 8002a8e:	f410 4f80 	tst.w	r0, #16384	; 0x4000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002a92:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002a94:	d007      	beq.n	8002aa6 <HAL_PCD_IRQHandler+0x42>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002a96:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8002a9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a9e:	041b      	lsls	r3, r3, #16
 8002aa0:	0c1b      	lsrs	r3, r3, #16
 8002aa2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002aa6:	f001 ff7f 	bl	80049a8 <USB_ReadInterrupts>
 8002aaa:	f410 5f00 	tst.w	r0, #8192	; 0x2000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002aae:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002ab0:	d007      	beq.n	8002ac2 <HAL_PCD_IRQHandler+0x5e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002ab2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8002ab6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002aba:	041b      	lsls	r3, r3, #16
 8002abc:	0c1b      	lsrs	r3, r3, #16
 8002abe:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002ac2:	f001 ff71 	bl	80049a8 <USB_ReadInterrupts>
 8002ac6:	04c6      	lsls	r6, r0, #19
 8002ac8:	f100 816f 	bmi.w	8002daa <HAL_PCD_IRQHandler+0x346>
 8002acc:	6820      	ldr	r0, [r4, #0]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002ace:	f001 ff6b 	bl	80049a8 <USB_ReadInterrupts>
 8002ad2:	0505      	lsls	r5, r0, #20
 8002ad4:	d555      	bpl.n	8002b82 <HAL_PCD_IRQHandler+0x11e>
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002ad6:	6823      	ldr	r3, [r4, #0]
 8002ad8:	f8b3 9000 	ldrh.w	r9, [r3]
 8002adc:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8002ae0:	f8b3 e008 	ldrh.w	lr, [r3, #8]
 8002ae4:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 8002ae8:	8a1f      	ldrh	r7, [r3, #16]
 8002aea:	8a9e      	ldrh	r6, [r3, #20]
 8002aec:	8b1d      	ldrh	r5, [r3, #24]
 8002aee:	8b99      	ldrh	r1, [r3, #28]
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002af0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002af4:	fa1f f989 	uxth.w	r9, r9
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002af8:	f042 0201 	orr.w	r2, r2, #1
 8002afc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002b00:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002b04:	fa1f f888 	uxth.w	r8, r8
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002b08:	f022 0201 	bic.w	r2, r2, #1
 8002b0c:	0412      	lsls	r2, r2, #16
 8002b0e:	0c12      	lsrs	r2, r2, #16
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002b10:	fa1f fe8e 	uxth.w	lr, lr
 8002b14:	fa1f fc8c 	uxth.w	ip, ip
 8002b18:	b2bf      	uxth	r7, r7
 8002b1a:	b2b6      	uxth	r6, r6
 8002b1c:	b2ad      	uxth	r5, r5
 8002b1e:	b289      	uxth	r1, r1
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002b20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002b24:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002b28:	0550      	lsls	r0, r2, #21
 8002b2a:	d5fb      	bpl.n	8002b24 <HAL_PCD_IRQHandler+0xc0>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002b2c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002b30:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b36:	0412      	lsls	r2, r2, #16
 8002b38:	0c12      	lsrs	r2, r2, #16
 8002b3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002b3e:	f8a3 9000 	strh.w	r9, [r3]
 8002b42:	f8a3 8004 	strh.w	r8, [r3, #4]
 8002b46:	f8a3 e008 	strh.w	lr, [r3, #8]
 8002b4a:	f8a3 c00c 	strh.w	ip, [r3, #12]
 8002b4e:	821f      	strh	r7, [r3, #16]
 8002b50:	829e      	strh	r6, [r3, #20]
 8002b52:	831d      	strh	r5, [r3, #24]
 8002b54:	8399      	strh	r1, [r3, #28]
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002b56:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002b5a:	f042 0208 	orr.w	r2, r2, #8
 8002b5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002b62:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002b66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b6a:	0412      	lsls	r2, r2, #16
 8002b6c:	0c12      	lsrs	r2, r2, #16
 8002b6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002b72:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002b76:	f042 0204 	orr.w	r2, r2, #4
 8002b7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8002b7e:	f002 fea1 	bl	80058c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002b82:	6820      	ldr	r0, [r4, #0]
 8002b84:	f001 ff10 	bl	80049a8 <USB_ReadInterrupts>
 8002b88:	0582      	lsls	r2, r0, #22
 8002b8a:	f100 8101 	bmi.w	8002d90 <HAL_PCD_IRQHandler+0x32c>
#else
    HAL_PCD_SOFCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002b8e:	6820      	ldr	r0, [r4, #0]
 8002b90:	f001 ff0a 	bl	80049a8 <USB_ReadInterrupts>
 8002b94:	05c3      	lsls	r3, r0, #23
 8002b96:	d508      	bpl.n	8002baa <HAL_PCD_IRQHandler+0x146>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002b98:	6822      	ldr	r2, [r4, #0]
 8002b9a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002b9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ba2:	041b      	lsls	r3, r3, #16
 8002ba4:	0c1b      	lsrs	r3, r3, #16
 8002ba6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 8002baa:	b003      	add	sp, #12
 8002bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002bb0:	f8df 943c 	ldr.w	r9, [pc, #1084]	; 8002ff0 <HAL_PCD_IRQHandler+0x58c>
 8002bb4:	f8df a43c 	ldr.w	sl, [pc, #1084]	; 8002ff4 <HAL_PCD_IRQHandler+0x590>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002bb8:	f8df b43c 	ldr.w	fp, [pc, #1084]	; 8002ff8 <HAL_PCD_IRQHandler+0x594>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002bbc:	f8bc 3044 	ldrh.w	r3, [ip, #68]	; 0x44
 8002bc0:	041b      	lsls	r3, r3, #16
 8002bc2:	f57f af5b 	bpl.w	8002a7c <HAL_PCD_IRQHandler+0x18>
    wIstr = hpcd->Instance->ISTR;
 8002bc6:	f8bc 1044 	ldrh.w	r1, [ip, #68]	; 0x44
 8002bca:	b289      	uxth	r1, r1
    if (epindex == 0U)
 8002bcc:	f011 050f 	ands.w	r5, r1, #15
 8002bd0:	d15b      	bne.n	8002c8a <HAL_PCD_IRQHandler+0x226>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002bd2:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002bd6:	f8bc 3000 	ldrh.w	r3, [ip]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002bda:	f000 8122 	beq.w	8002e22 <HAL_PCD_IRQHandler+0x3be>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002bde:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002be0:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 8002be4:	f040 8157 	bne.w	8002e96 <HAL_PCD_IRQHandler+0x432>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002be8:	041f      	lsls	r7, r3, #16
 8002bea:	d5e7      	bpl.n	8002bbc <HAL_PCD_IRQHandler+0x158>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002bec:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002bf0:	f8bc 2000 	ldrh.w	r2, [ip]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bfa:	f8ac 3000 	strh.w	r3, [ip]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bfe:	f8bc 3050 	ldrh.w	r3, [ip, #80]	; 0x50
 8002c02:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8002c06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002c0a:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8002c0e:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8002c12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c16:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002c1a:	b1a3      	cbz	r3, 8002c46 <HAL_PCD_IRQHandler+0x1e2>
 8002c1c:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8002c20:	b189      	cbz	r1, 8002c46 <HAL_PCD_IRQHandler+0x1e2>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c22:	4660      	mov	r0, ip
 8002c24:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8002c28:	f001 fed4 	bl	80049d4 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8002c2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002c30:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002c34:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8002c36:	4413      	add	r3, r2
 8002c38:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	f002 fe17 	bl	8005870 <HAL_PCD_DataOutStageCallback>
 8002c42:	f8d4 c000 	ldr.w	ip, [r4]
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002c46:	f8bc 3050 	ldrh.w	r3, [ip, #80]	; 0x50
 8002c4a:	f8d4 2178 	ldr.w	r2, [r4, #376]	; 0x178
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	f20c 410c 	addw	r1, ip, #1036	; 0x40c
 8002c54:	2a00      	cmp	r2, #0
 8002c56:	f040 81b5 	bne.w	8002fc4 <HAL_PCD_IRQHandler+0x560>
 8002c5a:	5aca      	ldrh	r2, [r1, r3]
 8002c5c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002c60:	0412      	lsls	r2, r2, #16
 8002c62:	0c12      	lsrs	r2, r2, #16
 8002c64:	52ca      	strh	r2, [r1, r3]
 8002c66:	5aca      	ldrh	r2, [r1, r3]
 8002c68:	ea4a 0202 	orr.w	r2, sl, r2
 8002c6c:	b292      	uxth	r2, r2
 8002c6e:	52ca      	strh	r2, [r1, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002c70:	f8bc 2000 	ldrh.w	r2, [ip]
 8002c74:	4bdd      	ldr	r3, [pc, #884]	; (8002fec <HAL_PCD_IRQHandler+0x588>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c84:	f8ac 3000 	strh.w	r3, [ip]
 8002c88:	e798      	b.n	8002bbc <HAL_PCD_IRQHandler+0x158>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002c8a:	f83c 6025 	ldrh.w	r6, [ip, r5, lsl #2]
 8002c8e:	00af      	lsls	r7, r5, #2
 8002c90:	b2b6      	uxth	r6, r6
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c92:	0431      	lsls	r1, r6, #16
 8002c94:	d43a      	bmi.n	8002d0c <HAL_PCD_IRQHandler+0x2a8>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002c96:	0631      	lsls	r1, r6, #24
 8002c98:	d590      	bpl.n	8002bbc <HAL_PCD_IRQHandler+0x158>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002c9a:	f83c 3025 	ldrh.w	r3, [ip, r5, lsl #2]
 8002c9e:	eb07 0805 	add.w	r8, r7, r5
 8002ca2:	ea09 0303 	and.w	r3, r9, r3
 8002ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002caa:	f82c 3025 	strh.w	r3, [ip, r5, lsl #2]
 8002cae:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
        if ((ep->type != EP_TYPE_BULK) ||
 8002cb2:	f898 302b 	ldrb.w	r3, [r8, #43]	; 0x2b
 8002cb6:	f50c 6e80 	add.w	lr, ip, #1024	; 0x400
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	f000 813e 	beq.w	8002f3c <HAL_PCD_IRQHandler+0x4d8>
 8002cc0:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 8002cc4:	f8d8 0040 	ldr.w	r0, [r8, #64]	; 0x40
 8002cc8:	00db      	lsls	r3, r3, #3
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002cca:	f8bc 2050 	ldrh.w	r2, [ip, #80]	; 0x50
 8002cce:	4413      	add	r3, r2
 8002cd0:	3302      	adds	r3, #2
 8002cd2:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
          if (ep->xfer_len > TxByteNbre)
 8002cd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cda:	4283      	cmp	r3, r0
 8002cdc:	f080 80ce 	bcs.w	8002e7c <HAL_PCD_IRQHandler+0x418>
 8002ce0:	442f      	add	r7, r5
 8002ce2:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
            ep->xfer_buff += TxByteNbre;
 8002ce6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8002ce8:	6c7e      	ldr	r6, [r7, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 8002cea:	3501      	adds	r5, #1
            ep->xfer_len -= TxByteNbre;
 8002cec:	1ac0      	subs	r0, r0, r3
            ep->xfer_buff += TxByteNbre;
 8002cee:	441a      	add	r2, r3
        ep = &hpcd->IN_ep[epindex];
 8002cf0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
            ep->xfer_count += TxByteNbre;
 8002cf4:	4433      	add	r3, r6
 8002cf6:	6438      	str	r0, [r7, #64]	; 0x40
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002cf8:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8002cfc:	4660      	mov	r0, ip
            ep->xfer_buff += TxByteNbre;
 8002cfe:	63fa      	str	r2, [r7, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8002d00:	647b      	str	r3, [r7, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d02:	f001 fa4d 	bl	80041a0 <USB_EPStartXfer>
 8002d06:	f8d4 c000 	ldr.w	ip, [r4]
 8002d0a:	e757      	b.n	8002bbc <HAL_PCD_IRQHandler+0x158>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002d0c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d10:	f83c 2025 	ldrh.w	r2, [ip, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8002d14:	1979      	adds	r1, r7, r5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002d16:	4013      	ands	r3, r2
 8002d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d1c:	f82c 3025 	strh.w	r3, [ip, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8002d20:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002d24:	f891 2174 	ldrb.w	r2, [r1, #372]	; 0x174
 8002d28:	f50c 6380 	add.w	r3, ip, #1024	; 0x400
 8002d2c:	2a00      	cmp	r2, #0
 8002d2e:	f040 80d5 	bne.w	8002edc <HAL_PCD_IRQHandler+0x478>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d32:	f8bc 2050 	ldrh.w	r2, [ip, #80]	; 0x50
 8002d36:	f891 0168 	ldrb.w	r0, [r1, #360]	; 0x168
 8002d3a:	3206      	adds	r2, #6
 8002d3c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8002d40:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 8002d44:	f3c8 0809 	ubfx	r8, r8, #0, #10
          if (count != 0U)
 8002d48:	f1b8 0f00 	cmp.w	r8, #0
 8002d4c:	f040 816a 	bne.w	8003024 <HAL_PCD_IRQHandler+0x5c0>
        ep->xfer_count += count;
 8002d50:	1979      	adds	r1, r7, r5
 8002d52:	00c9      	lsls	r1, r1, #3
 8002d54:	1863      	adds	r3, r4, r1
 8002d56:	f8d3 0184 	ldr.w	r0, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8002d5a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
        ep->xfer_count += count;
 8002d5e:	4440      	add	r0, r8
 8002d60:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002d64:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
        ep->xfer_buff += count;
 8002d68:	4442      	add	r2, r8
 8002d6a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002d6e:	b120      	cbz	r0, 8002d7a <HAL_PCD_IRQHandler+0x316>
 8002d70:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8002d74:	4543      	cmp	r3, r8
 8002d76:	f240 812f 	bls.w	8002fd8 <HAL_PCD_IRQHandler+0x574>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002d7a:	197b      	adds	r3, r7, r5
 8002d7c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002d80:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8002d84:	4620      	mov	r0, r4
 8002d86:	f002 fd73 	bl	8005870 <HAL_PCD_DataOutStageCallback>
 8002d8a:	f8d4 c000 	ldr.w	ip, [r4]
 8002d8e:	e782      	b.n	8002c96 <HAL_PCD_IRQHandler+0x232>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002d90:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8002d92:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002d94:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002d98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d9c:	041b      	lsls	r3, r3, #16
 8002d9e:	0c1b      	lsrs	r3, r3, #16
 8002da0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8002da4:	f002 fd78 	bl	8005898 <HAL_PCD_SOFCallback>
 8002da8:	e6f1      	b.n	8002b8e <HAL_PCD_IRQHandler+0x12a>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002daa:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8002dac:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002dae:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002db2:	f023 0304 	bic.w	r3, r3, #4
 8002db6:	041b      	lsls	r3, r3, #16
 8002db8:	0c1b      	lsrs	r3, r3, #16
 8002dba:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002dbe:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002dc2:	f023 0308 	bic.w	r3, r3, #8
 8002dc6:	041b      	lsls	r3, r3, #16
 8002dc8:	0c1b      	lsrs	r3, r3, #16
 8002dca:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8002dce:	f002 fd89 	bl	80058e4 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002dd2:	6820      	ldr	r0, [r4, #0]
 8002dd4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8002dd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ddc:	041b      	lsls	r3, r3, #16
 8002dde:	0c1b      	lsrs	r3, r3, #16
 8002de0:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8002de4:	e673      	b.n	8002ace <HAL_PCD_IRQHandler+0x6a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002de6:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8002de8:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002dea:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002dee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002df2:	041b      	lsls	r3, r3, #16
 8002df4:	0c1b      	lsrs	r3, r3, #16
 8002df6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8002dfa:	f002 fd51 	bl	80058a0 <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 8002dfe:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	f43f ae40 	beq.w	8002a88 <HAL_PCD_IRQHandler+0x24>
  hpcd->USB_Address = address;
 8002e08:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 8002e0a:	2301      	movs	r3, #1
  hpcd->USB_Address = address;
 8002e0c:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8002e10:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e14:	4629      	mov	r1, r5
 8002e16:	6820      	ldr	r0, [r4, #0]
 8002e18:	f001 fdbc 	bl	8004994 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e1c:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
 8002e20:	e632      	b.n	8002a88 <HAL_PCD_IRQHandler+0x24>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e22:	ea09 0303 	and.w	r3, r9, r3
 8002e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e2a:	f8ac 3000 	strh.w	r3, [ip]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e2e:	f8bc 3050 	ldrh.w	r3, [ip, #80]	; 0x50
 8002e32:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
        ep->xfer_buff += ep->xfer_count;
 8002e36:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e38:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8002e3c:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
 8002e40:	f8bc 3404 	ldrh.w	r3, [ip, #1028]	; 0x404
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002e44:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e46:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8002e4a:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e4c:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8002e4e:	63e2      	str	r2, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002e50:	f002 fd18 	bl	8005884 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002e54:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f43f af54 	beq.w	8002d06 <HAL_PCD_IRQHandler+0x2a2>
 8002e5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e60:	f8d4 c000 	ldr.w	ip, [r4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f47f aea9 	bne.w	8002bbc <HAL_PCD_IRQHandler+0x158>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002e6a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8002e6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e72:	f8ac 204c 	strh.w	r2, [ip, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002e76:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8002e7a:	e69f      	b.n	8002bbc <HAL_PCD_IRQHandler+0x158>
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	443d      	add	r5, r7
 8002e80:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8002e84:	642b      	str	r3, [r5, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e86:	f898 1028 	ldrb.w	r1, [r8, #40]	; 0x28
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f002 fcfa 	bl	8005884 <HAL_PCD_DataInStageCallback>
 8002e90:	f8d4 c000 	ldr.w	ip, [r4]
 8002e94:	e692      	b.n	8002bbc <HAL_PCD_IRQHandler+0x158>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e96:	f8bc 3050 	ldrh.w	r3, [ip, #80]	; 0x50
 8002e9a:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e9e:	4660      	mov	r0, ip
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ea0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ea4:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
 8002ea8:	f8bc 340c 	ldrh.w	r3, [ip, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002eac:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8002eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002eb4:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002eb8:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8002ebc:	f001 fd8a 	bl	80049d4 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ec0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ec4:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002ec6:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ec8:	8811      	ldrh	r1, [r2, #0]
 8002eca:	400b      	ands	r3, r1
 8002ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ed0:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002ed2:	f002 fcc7 	bl	8005864 <HAL_PCD_SetupStageCallback>
 8002ed6:	f8d4 c000 	ldr.w	ip, [r4]
 8002eda:	e66f      	b.n	8002bbc <HAL_PCD_IRQHandler+0x158>
          if (ep->type == EP_TYPE_BULK)
 8002edc:	f891 016b 	ldrb.w	r0, [r1, #363]	; 0x16b
 8002ee0:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8002ee4:	2802      	cmp	r0, #2
 8002ee6:	f000 80d3 	beq.w	8003090 <HAL_PCD_IRQHandler+0x62c>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002eea:	f83c 0022 	ldrh.w	r0, [ip, r2, lsl #2]
 8002eee:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
 8002ef2:	0500      	lsls	r0, r0, #20
 8002ef4:	0d00      	lsrs	r0, r0, #20
 8002ef6:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8002efa:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 8002efe:	f82c 0022 	strh.w	r0, [ip, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002f02:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8002f06:	f83c 0022 	ldrh.w	r0, [ip, r2, lsl #2]
 8002f0a:	f410 4f80 	tst.w	r0, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f0e:	f8bc 0050 	ldrh.w	r0, [ip, #80]	; 0x50
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002f12:	d073      	beq.n	8002ffc <HAL_PCD_IRQHandler+0x598>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f14:	3002      	adds	r0, #2
 8002f16:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8002f1a:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 8002f1e:	f3c8 0809 	ubfx	r8, r8, #0, #10
              if (count != 0U)
 8002f22:	f1b8 0f00 	cmp.w	r8, #0
 8002f26:	f43f af13 	beq.w	8002d50 <HAL_PCD_IRQHandler+0x2ec>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f2a:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8002f2e:	4660      	mov	r0, ip
 8002f30:	4643      	mov	r3, r8
 8002f32:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002f36:	f001 fd4d 	bl	80049d4 <USB_ReadPMA>
 8002f3a:	e709      	b.n	8002d50 <HAL_PCD_IRQHandler+0x2ec>
 8002f3c:	f898 1028 	ldrb.w	r1, [r8, #40]	; 0x28
        if ((ep->type != EP_TYPE_BULK) ||
 8002f40:	05f2      	lsls	r2, r6, #23
 8002f42:	f8d8 0040 	ldr.w	r0, [r8, #64]	; 0x40
 8002f46:	ea4f 03c1 	mov.w	r3, r1, lsl #3
 8002f4a:	f57f aebe 	bpl.w	8002cca <HAL_PCD_IRQHandler+0x266>
 8002f4e:	f406 4280 	and.w	r2, r6, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f52:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 8002f56:	9601      	str	r6, [sp, #4]
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f58:	f8bc 6050 	ldrh.w	r6, [ip, #80]	; 0x50
 8002f5c:	4433      	add	r3, r6
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f5e:	d174      	bne.n	800304a <HAL_PCD_IRQHandler+0x5e6>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f60:	3306      	adds	r3, #6
 8002f62:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
    if (ep->xfer_len >= TxByteNbre)
 8002f66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f6a:	4283      	cmp	r3, r0
 8002f6c:	f200 8150 	bhi.w	8003210 <HAL_PCD_IRQHandler+0x7ac>
      ep->xfer_len -= TxByteNbre;
 8002f70:	1ac0      	subs	r0, r0, r3
 8002f72:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8002f76:	2800      	cmp	r0, #0
 8002f78:	f000 814d 	beq.w	8003216 <HAL_PCD_IRQHandler+0x7b2>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f7c:	b95a      	cbnz	r2, 8002f96 <HAL_PCD_IRQHandler+0x532>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f7e:	f83c 2021 	ldrh.w	r2, [ip, r1, lsl #2]
 8002f82:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002f86:	0512      	lsls	r2, r2, #20
 8002f88:	0d12      	lsrs	r2, r2, #20
 8002f8a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002f8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f92:	f82c 2021 	strh.w	r2, [ip, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002f96:	197a      	adds	r2, r7, r5
 8002f98:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002f9c:	f892 104c 	ldrb.w	r1, [r2, #76]	; 0x4c
 8002fa0:	2901      	cmp	r1, #1
 8002fa2:	f000 8143 	beq.w	800322c <HAL_PCD_IRQHandler+0x7c8>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002fa6:	f898 2028 	ldrb.w	r2, [r8, #40]	; 0x28
 8002faa:	f83c 3022 	ldrh.w	r3, [ip, r2, lsl #2]
 8002fae:	ea0b 0303 	and.w	r3, fp, r3
 8002fb2:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fbe:	f82c 3022 	strh.w	r3, [ip, r2, lsl #2]
 8002fc2:	e5fb      	b.n	8002bbc <HAL_PCD_IRQHandler+0x158>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002fc4:	2a3e      	cmp	r2, #62	; 0x3e
 8002fc6:	d836      	bhi.n	8003036 <HAL_PCD_IRQHandler+0x5d2>
 8002fc8:	0850      	lsrs	r0, r2, #1
 8002fca:	07d6      	lsls	r6, r2, #31
 8002fcc:	bf48      	it	mi
 8002fce:	3001      	addmi	r0, #1
 8002fd0:	0282      	lsls	r2, r0, #10
 8002fd2:	b292      	uxth	r2, r2
 8002fd4:	52ca      	strh	r2, [r1, r3]
 8002fd6:	e64b      	b.n	8002c70 <HAL_PCD_IRQHandler+0x20c>
        ep = &hpcd->OUT_ep[epindex];
 8002fd8:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002fdc:	4421      	add	r1, r4
 8002fde:	6820      	ldr	r0, [r4, #0]
 8002fe0:	f001 f8de 	bl	80041a0 <USB_EPStartXfer>
 8002fe4:	f8d4 c000 	ldr.w	ip, [r4]
 8002fe8:	e655      	b.n	8002c96 <HAL_PCD_IRQHandler+0x232>
 8002fea:	bf00      	nop
 8002fec:	ffffbf8f 	.word	0xffffbf8f
 8002ff0:	ffff8f0f 	.word	0xffff8f0f
 8002ff4:	ffff8000 	.word	0xffff8000
 8002ff8:	ffff8fbf 	.word	0xffff8fbf
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ffc:	3006      	adds	r0, #6
 8002ffe:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8003002:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 8003006:	f3c8 0809 	ubfx	r8, r8, #0, #10
              if (count != 0U)
 800300a:	f1b8 0f00 	cmp.w	r8, #0
 800300e:	f43f ae9f 	beq.w	8002d50 <HAL_PCD_IRQHandler+0x2ec>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003012:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8003016:	4660      	mov	r0, ip
 8003018:	4643      	mov	r3, r8
 800301a:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800301e:	f001 fcd9 	bl	80049d4 <USB_ReadPMA>
 8003022:	e695      	b.n	8002d50 <HAL_PCD_IRQHandler+0x2ec>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003024:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8003028:	4660      	mov	r0, ip
 800302a:	4643      	mov	r3, r8
 800302c:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8003030:	f001 fcd0 	bl	80049d4 <USB_ReadPMA>
 8003034:	e68c      	b.n	8002d50 <HAL_PCD_IRQHandler+0x2ec>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003036:	0950      	lsrs	r0, r2, #5
 8003038:	06d5      	lsls	r5, r2, #27
 800303a:	bf08      	it	eq
 800303c:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8003040:	ea4a 2280 	orr.w	r2, sl, r0, lsl #10
 8003044:	b292      	uxth	r2, r2
 8003046:	52ca      	strh	r2, [r1, r3]
 8003048:	e612      	b.n	8002c70 <HAL_PCD_IRQHandler+0x20c>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800304a:	3302      	adds	r3, #2
 800304c:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
    if (ep->xfer_len > TxByteNbre)
 8003050:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003054:	4283      	cmp	r3, r0
 8003056:	d358      	bcc.n	800310a <HAL_PCD_IRQHandler+0x6a6>
 8003058:	2300      	movs	r3, #0
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800305a:	4620      	mov	r0, r4
 800305c:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
 8003060:	9201      	str	r2, [sp, #4]
 8003062:	f002 fc0f 	bl	8005884 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003066:	9a01      	ldr	r2, [sp, #4]
 8003068:	2a00      	cmp	r2, #0
 800306a:	f000 8116 	beq.w	800329a <HAL_PCD_IRQHandler+0x836>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800306e:	f8d4 c000 	ldr.w	ip, [r4]
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003072:	f898 2028 	ldrb.w	r2, [r8, #40]	; 0x28
 8003076:	f83c 3022 	ldrh.w	r3, [ip, r2, lsl #2]
 800307a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800307e:	051b      	lsls	r3, r3, #20
 8003080:	0d1b      	lsrs	r3, r3, #20
 8003082:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800308a:	f82c 3022 	strh.w	r3, [ip, r2, lsl #2]
 800308e:	e78a      	b.n	8002fa6 <HAL_PCD_IRQHandler+0x542>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003090:	f416 4080 	ands.w	r0, r6, #16384	; 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003094:	f8bc 8050 	ldrh.w	r8, [ip, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003098:	9001      	str	r0, [sp, #4]
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800309a:	ea4f 00c2 	mov.w	r0, r2, lsl #3
 800309e:	f8d1 e180 	ldr.w	lr, [r1, #384]	; 0x180
 80030a2:	4440      	add	r0, r8
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030a4:	f000 8085 	beq.w	80031b2 <HAL_PCD_IRQHandler+0x74e>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030a8:	3002      	adds	r0, #2
 80030aa:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 80030ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 80030b2:	4573      	cmp	r3, lr
 80030b4:	4698      	mov	r8, r3
 80030b6:	f200 8103 	bhi.w	80032c0 <HAL_PCD_IRQHandler+0x85c>
      ep->xfer_len -= count;
 80030ba:	ebae 0003 	sub.w	r0, lr, r3
 80030be:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80030c2:	2800      	cmp	r0, #0
 80030c4:	f000 80ff 	beq.w	80032c6 <HAL_PCD_IRQHandler+0x862>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80030c8:	0672      	lsls	r2, r6, #25
 80030ca:	d510      	bpl.n	80030ee <HAL_PCD_IRQHandler+0x68a>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80030cc:	197a      	adds	r2, r7, r5
 80030ce:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80030d2:	f892 1168 	ldrb.w	r1, [r2, #360]	; 0x168
 80030d6:	f83c 2021 	ldrh.w	r2, [ip, r1, lsl #2]
 80030da:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80030de:	0512      	lsls	r2, r2, #20
 80030e0:	0d12      	lsrs	r2, r2, #20
 80030e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030e6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80030ea:	f82c 2021 	strh.w	r2, [ip, r1, lsl #2]
    if (count != 0U)
 80030ee:	b90b      	cbnz	r3, 80030f4 <HAL_PCD_IRQHandler+0x690>
    if (count != 0U)
 80030f0:	4698      	mov	r8, r3
 80030f2:	e62d      	b.n	8002d50 <HAL_PCD_IRQHandler+0x2ec>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80030f4:	1979      	adds	r1, r7, r5
 80030f6:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80030fa:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 80030fe:	4660      	mov	r0, ip
 8003100:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8003104:	f001 fc66 	bl	80049d4 <USB_ReadPMA>
 8003108:	e622      	b.n	8002d50 <HAL_PCD_IRQHandler+0x2ec>
      ep->xfer_len -= TxByteNbre;
 800310a:	1ac0      	subs	r0, r0, r3
 800310c:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003110:	b15a      	cbz	r2, 800312a <HAL_PCD_IRQHandler+0x6c6>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003112:	f83c 2021 	ldrh.w	r2, [ip, r1, lsl #2]
 8003116:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800311a:	0512      	lsls	r2, r2, #20
 800311c:	0d12      	lsrs	r2, r2, #20
 800311e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003122:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003126:	f82c 2021 	strh.w	r2, [ip, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800312a:	197a      	adds	r2, r7, r5
 800312c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8003130:	f892 104c 	ldrb.w	r1, [r2, #76]	; 0x4c
 8003134:	2901      	cmp	r1, #1
 8003136:	f47f af36 	bne.w	8002fa6 <HAL_PCD_IRQHandler+0x542>
        if (ep->xfer_len_db >= ep->maxpacket)
 800313a:	e9d2 1611 	ldrd	r1, r6, [r2, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 800313e:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8003140:	f8d2 e038 	ldr.w	lr, [r2, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8003144:	4418      	add	r0, r3
        ep->xfer_count += TxByteNbre;
 8003146:	4419      	add	r1, r3
        if (ep->xfer_len_db >= ep->maxpacket)
 8003148:	4576      	cmp	r6, lr
        ep->xfer_buff += TxByteNbre;
 800314a:	63d0      	str	r0, [r2, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 800314c:	6451      	str	r1, [r2, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800314e:	f0c0 80d6 	bcc.w	80032fe <HAL_PCD_IRQHandler+0x89a>
          ep->xfer_len_db -= len;
 8003152:	eba6 060e 	sub.w	r6, r6, lr
 8003156:	6496      	str	r6, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003158:	f898 2029 	ldrb.w	r2, [r8, #41]	; 0x29
 800315c:	fa1f f38e 	uxth.w	r3, lr
 8003160:	461e      	mov	r6, r3
 8003162:	2a00      	cmp	r2, #0
 8003164:	f040 80bd 	bne.w	80032e2 <HAL_PCD_IRQHandler+0x87e>
 8003168:	f898 2028 	ldrb.w	r2, [r8, #40]	; 0x28
 800316c:	f8bc 1050 	ldrh.w	r1, [ip, #80]	; 0x50
 8003170:	eb0c 1202 	add.w	r2, ip, r2, lsl #4
 8003174:	f202 4204 	addw	r2, r2, #1028	; 0x404
 8003178:	b289      	uxth	r1, r1
 800317a:	1853      	adds	r3, r2, r1
 800317c:	f1be 0f00 	cmp.w	lr, #0
 8003180:	f040 80e8 	bne.w	8003354 <HAL_PCD_IRQHandler+0x8f0>
 8003184:	4673      	mov	r3, lr
 8003186:	5a56      	ldrh	r6, [r2, r1]
 8003188:	f426 46f8 	bic.w	r6, r6, #31744	; 0x7c00
 800318c:	0436      	lsls	r6, r6, #16
 800318e:	0c36      	lsrs	r6, r6, #16
 8003190:	5256      	strh	r6, [r2, r1]
 8003192:	5a56      	ldrh	r6, [r2, r1]
 8003194:	ea4a 0606 	orr.w	r6, sl, r6
 8003198:	b2b6      	uxth	r6, r6
 800319a:	5256      	strh	r6, [r2, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800319c:	197a      	adds	r2, r7, r5
 800319e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80031a2:	4601      	mov	r1, r0
 80031a4:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 80031a6:	4660      	mov	r0, ip
 80031a8:	f001 fc04 	bl	80049b4 <USB_WritePMA>
 80031ac:	f8d4 c000 	ldr.w	ip, [r4]
 80031b0:	e6f9      	b.n	8002fa6 <HAL_PCD_IRQHandler+0x542>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031b2:	3006      	adds	r0, #6
 80031b4:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 80031b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 80031bc:	4573      	cmp	r3, lr
 80031be:	4698      	mov	r8, r3
 80031c0:	d86e      	bhi.n	80032a0 <HAL_PCD_IRQHandler+0x83c>
      ep->xfer_len -= count;
 80031c2:	ebae 0003 	sub.w	r0, lr, r3
 80031c6:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80031ca:	2800      	cmp	r0, #0
 80031cc:	d06b      	beq.n	80032a6 <HAL_PCD_IRQHandler+0x842>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80031ce:	0670      	lsls	r0, r6, #25
 80031d0:	d410      	bmi.n	80031f4 <HAL_PCD_IRQHandler+0x790>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80031d2:	197a      	adds	r2, r7, r5
 80031d4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80031d8:	f892 1168 	ldrb.w	r1, [r2, #360]	; 0x168
 80031dc:	f83c 2021 	ldrh.w	r2, [ip, r1, lsl #2]
 80031e0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80031e4:	0512      	lsls	r2, r2, #20
 80031e6:	0d12      	lsrs	r2, r2, #20
 80031e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031ec:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80031f0:	f82c 2021 	strh.w	r2, [ip, r1, lsl #2]
    if (count != 0U)
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f43f af7b 	beq.w	80030f0 <HAL_PCD_IRQHandler+0x68c>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80031fa:	1979      	adds	r1, r7, r5
 80031fc:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8003200:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8003204:	4660      	mov	r0, ip
 8003206:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800320a:	f001 fbe3 	bl	80049d4 <USB_ReadPMA>
 800320e:	e59f      	b.n	8002d50 <HAL_PCD_IRQHandler+0x2ec>
 8003210:	9b01      	ldr	r3, [sp, #4]
 8003212:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003216:	4620      	mov	r0, r4
 8003218:	9201      	str	r2, [sp, #4]
 800321a:	f002 fb33 	bl	8005884 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800321e:	9a01      	ldr	r2, [sp, #4]
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003220:	f8d4 c000 	ldr.w	ip, [r4]
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003224:	2a00      	cmp	r2, #0
 8003226:	f43f af24 	beq.w	8003072 <HAL_PCD_IRQHandler+0x60e>
 800322a:	e6bc      	b.n	8002fa6 <HAL_PCD_IRQHandler+0x542>
        ep->xfer_buff += TxByteNbre;
 800322c:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800322e:	f8d2 e038 	ldr.w	lr, [r2, #56]	; 0x38
 8003232:	e9d2 1611 	ldrd	r1, r6, [r2, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8003236:	4418      	add	r0, r3
        ep->xfer_count += TxByteNbre;
 8003238:	4419      	add	r1, r3
        if (ep->xfer_len_db >= ep->maxpacket)
 800323a:	4576      	cmp	r6, lr
        ep->xfer_buff += TxByteNbre;
 800323c:	63d0      	str	r0, [r2, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 800323e:	6451      	str	r1, [r2, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8003240:	d370      	bcc.n	8003324 <HAL_PCD_IRQHandler+0x8c0>
          ep->xfer_len_db -= len;
 8003242:	eba6 060e 	sub.w	r6, r6, lr
 8003246:	6496      	str	r6, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003248:	f898 2029 	ldrb.w	r2, [r8, #41]	; 0x29
 800324c:	fa1f f38e 	uxth.w	r3, lr
 8003250:	461e      	mov	r6, r3
 8003252:	2a00      	cmp	r2, #0
 8003254:	d159      	bne.n	800330a <HAL_PCD_IRQHandler+0x8a6>
 8003256:	f898 2028 	ldrb.w	r2, [r8, #40]	; 0x28
 800325a:	f8bc 1050 	ldrh.w	r1, [ip, #80]	; 0x50
 800325e:	eb0c 1202 	add.w	r2, ip, r2, lsl #4
 8003262:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8003266:	b289      	uxth	r1, r1
 8003268:	1853      	adds	r3, r2, r1
 800326a:	f1be 0f00 	cmp.w	lr, #0
 800326e:	f040 8092 	bne.w	8003396 <HAL_PCD_IRQHandler+0x932>
 8003272:	4673      	mov	r3, lr
 8003274:	5a56      	ldrh	r6, [r2, r1]
 8003276:	f426 46f8 	bic.w	r6, r6, #31744	; 0x7c00
 800327a:	0436      	lsls	r6, r6, #16
 800327c:	0c36      	lsrs	r6, r6, #16
 800327e:	5256      	strh	r6, [r2, r1]
 8003280:	5a56      	ldrh	r6, [r2, r1]
 8003282:	ea4a 0606 	orr.w	r6, sl, r6
 8003286:	b2b6      	uxth	r6, r6
 8003288:	5256      	strh	r6, [r2, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800328a:	197a      	adds	r2, r7, r5
 800328c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8003290:	4601      	mov	r1, r0
 8003292:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8003294:	4660      	mov	r0, ip
 8003296:	f001 fb8d 	bl	80049b4 <USB_WritePMA>
 800329a:	f8d4 c000 	ldr.w	ip, [r4]
 800329e:	e682      	b.n	8002fa6 <HAL_PCD_IRQHandler+0x542>
 80032a0:	9801      	ldr	r0, [sp, #4]
 80032a2:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80032a6:	f83c 0022 	ldrh.w	r0, [ip, r2, lsl #2]
 80032aa:	494f      	ldr	r1, [pc, #316]	; (80033e8 <HAL_PCD_IRQHandler+0x984>)
 80032ac:	4001      	ands	r1, r0
 80032ae:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 80032b2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80032b6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80032ba:	f82c 1022 	strh.w	r1, [ip, r2, lsl #2]
 80032be:	e786      	b.n	80031ce <HAL_PCD_IRQHandler+0x76a>
 80032c0:	2000      	movs	r0, #0
 80032c2:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80032c6:	f83c 0022 	ldrh.w	r0, [ip, r2, lsl #2]
 80032ca:	4947      	ldr	r1, [pc, #284]	; (80033e8 <HAL_PCD_IRQHandler+0x984>)
 80032cc:	4001      	ands	r1, r0
 80032ce:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 80032d2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80032d6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80032da:	f82c 1022 	strh.w	r1, [ip, r2, lsl #2]
 80032de:	e6f3      	b.n	80030c8 <HAL_PCD_IRQHandler+0x664>
 80032e0:	b2b3      	uxth	r3, r6
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80032e2:	2a01      	cmp	r2, #1
 80032e4:	f47f af5a 	bne.w	800319c <HAL_PCD_IRQHandler+0x738>
 80032e8:	f898 2028 	ldrb.w	r2, [r8, #40]	; 0x28
 80032ec:	f8bc 1050 	ldrh.w	r1, [ip, #80]	; 0x50
 80032f0:	eb0c 1202 	add.w	r2, ip, r2, lsl #4
 80032f4:	f202 4204 	addw	r2, r2, #1028	; 0x404
 80032f8:	b289      	uxth	r1, r1
 80032fa:	5253      	strh	r3, [r2, r1]
 80032fc:	e74e      	b.n	800319c <HAL_PCD_IRQHandler+0x738>
        else if (ep->xfer_len_db == 0U)
 80032fe:	b9b6      	cbnz	r6, 800332e <HAL_PCD_IRQHandler+0x8ca>
          ep->xfer_fill_db = 0U;
 8003300:	f882 604c 	strb.w	r6, [r2, #76]	; 0x4c
 8003304:	469e      	mov	lr, r3
 8003306:	e727      	b.n	8003158 <HAL_PCD_IRQHandler+0x6f4>
 8003308:	b2b3      	uxth	r3, r6
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800330a:	2a01      	cmp	r2, #1
 800330c:	d1bd      	bne.n	800328a <HAL_PCD_IRQHandler+0x826>
 800330e:	f898 2028 	ldrb.w	r2, [r8, #40]	; 0x28
 8003312:	f8bc 1050 	ldrh.w	r1, [ip, #80]	; 0x50
 8003316:	eb0c 1202 	add.w	r2, ip, r2, lsl #4
 800331a:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 800331e:	b289      	uxth	r1, r1
 8003320:	5253      	strh	r3, [r2, r1]
 8003322:	e7b2      	b.n	800328a <HAL_PCD_IRQHandler+0x826>
        else if (ep->xfer_len_db == 0U)
 8003324:	bb26      	cbnz	r6, 8003370 <HAL_PCD_IRQHandler+0x90c>
          ep->xfer_fill_db = 0U;
 8003326:	f882 604c 	strb.w	r6, [r2, #76]	; 0x4c
 800332a:	469e      	mov	lr, r3
 800332c:	e78c      	b.n	8003248 <HAL_PCD_IRQHandler+0x7e4>
          ep->xfer_fill_db = 0U;
 800332e:	2300      	movs	r3, #0
 8003330:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8003334:	6493      	str	r3, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003336:	f898 2029 	ldrb.w	r2, [r8, #41]	; 0x29
 800333a:	2a00      	cmp	r2, #0
 800333c:	d1d0      	bne.n	80032e0 <HAL_PCD_IRQHandler+0x87c>
 800333e:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 8003342:	f8bc 2050 	ldrh.w	r2, [ip, #80]	; 0x50
 8003346:	eb0c 1303 	add.w	r3, ip, r3, lsl #4
 800334a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800334e:	46b6      	mov	lr, r6
 8003350:	4413      	add	r3, r2
 8003352:	b2b6      	uxth	r6, r6
 8003354:	f1be 0f3e 	cmp.w	lr, #62	; 0x3e
 8003358:	d82b      	bhi.n	80033b2 <HAL_PCD_IRQHandler+0x94e>
 800335a:	ea4f 025e 	mov.w	r2, lr, lsr #1
 800335e:	f01e 0f01 	tst.w	lr, #1
 8003362:	bf18      	it	ne
 8003364:	3201      	addne	r2, #1
 8003366:	0292      	lsls	r2, r2, #10
 8003368:	b292      	uxth	r2, r2
 800336a:	801a      	strh	r2, [r3, #0]
 800336c:	4633      	mov	r3, r6
 800336e:	e715      	b.n	800319c <HAL_PCD_IRQHandler+0x738>
          ep->xfer_len_db = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	6493      	str	r3, [r2, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8003374:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003378:	f898 2029 	ldrb.w	r2, [r8, #41]	; 0x29
 800337c:	2a00      	cmp	r2, #0
 800337e:	d1c3      	bne.n	8003308 <HAL_PCD_IRQHandler+0x8a4>
 8003380:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 8003384:	f8bc 2050 	ldrh.w	r2, [ip, #80]	; 0x50
 8003388:	eb0c 1303 	add.w	r3, ip, r3, lsl #4
 800338c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003390:	46b6      	mov	lr, r6
 8003392:	4413      	add	r3, r2
 8003394:	b2b6      	uxth	r6, r6
 8003396:	f1be 0f3e 	cmp.w	lr, #62	; 0x3e
 800339a:	d817      	bhi.n	80033cc <HAL_PCD_IRQHandler+0x968>
 800339c:	ea4f 025e 	mov.w	r2, lr, lsr #1
 80033a0:	f01e 0f01 	tst.w	lr, #1
 80033a4:	bf18      	it	ne
 80033a6:	3201      	addne	r2, #1
 80033a8:	0292      	lsls	r2, r2, #10
 80033aa:	b292      	uxth	r2, r2
 80033ac:	801a      	strh	r2, [r3, #0]
 80033ae:	4633      	mov	r3, r6
 80033b0:	e76b      	b.n	800328a <HAL_PCD_IRQHandler+0x826>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033b2:	ea4f 125e 	mov.w	r2, lr, lsr #5
 80033b6:	f01e 0f1f 	tst.w	lr, #31
 80033ba:	bf08      	it	eq
 80033bc:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80033c0:	ea4a 2282 	orr.w	r2, sl, r2, lsl #10
 80033c4:	b292      	uxth	r2, r2
 80033c6:	801a      	strh	r2, [r3, #0]
 80033c8:	4633      	mov	r3, r6
 80033ca:	e6e7      	b.n	800319c <HAL_PCD_IRQHandler+0x738>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033cc:	ea4f 125e 	mov.w	r2, lr, lsr #5
 80033d0:	f01e 0f1f 	tst.w	lr, #31
 80033d4:	bf08      	it	eq
 80033d6:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80033da:	ea4a 2282 	orr.w	r2, sl, r2, lsl #10
 80033de:	b292      	uxth	r2, r2
 80033e0:	801a      	strh	r2, [r3, #0]
 80033e2:	4633      	mov	r3, r6
 80033e4:	e751      	b.n	800328a <HAL_PCD_IRQHandler+0x826>
 80033e6:	bf00      	nop
 80033e8:	ffffbf8f 	.word	0xffffbf8f

080033ec <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80033ec:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 80033f0:	2a01      	cmp	r2, #1
 80033f2:	d00d      	beq.n	8003410 <HAL_PCD_SetAddress+0x24>
{
 80033f4:	b510      	push	{r4, lr}
 80033f6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80033f8:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 80033fa:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  __HAL_LOCK(hpcd);
 80033fe:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003402:	6800      	ldr	r0, [r0, #0]
 8003404:	f001 fac6 	bl	8004994 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003408:	2000      	movs	r0, #0
 800340a:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800340e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003410:	2002      	movs	r0, #2
}
 8003412:	4770      	bx	lr

08003414 <HAL_PCD_EP_Open>:
{
 8003414:	b570      	push	{r4, r5, r6, lr}
 8003416:	f001 0507 	and.w	r5, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 800341a:	0609      	lsls	r1, r1, #24
 800341c:	d422      	bmi.n	8003464 <HAL_PCD_EP_Open+0x50>
    ep->is_in = 0U;
 800341e:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003420:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 8003424:	00e4      	lsls	r4, r4, #3
 8003426:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    ep->is_in = 0U;
 800342a:	4404      	add	r4, r0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800342c:	4401      	add	r1, r0
    ep->is_in = 0U;
 800342e:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
  if (ep->is_in != 0U)
 8003432:	784c      	ldrb	r4, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003434:	700d      	strb	r5, [r1, #0]
  ep->maxpacket = ep_mps;
 8003436:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8003438:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800343a:	b104      	cbz	r4, 800343e <HAL_PCD_EP_Open+0x2a>
    ep->tx_fifo_num = ep->num;
 800343c:	81cd      	strh	r5, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 800343e:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8003440:	bf04      	itt	eq
 8003442:	2300      	moveq	r3, #0
 8003444:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8003446:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 800344a:	2b01      	cmp	r3, #1
 800344c:	d012      	beq.n	8003474 <HAL_PCD_EP_Open+0x60>
 800344e:	2301      	movs	r3, #1
 8003450:	4604      	mov	r4, r0
 8003452:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003456:	6800      	ldr	r0, [r0, #0]
 8003458:	f000 fc64 	bl	8003d24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800345c:	2000      	movs	r0, #0
 800345e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8003462:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 1U;
 8003464:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003466:	1929      	adds	r1, r5, r4
 8003468:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800346c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8003470:	704c      	strb	r4, [r1, #1]
 8003472:	e7de      	b.n	8003432 <HAL_PCD_EP_Open+0x1e>
  __HAL_LOCK(hpcd);
 8003474:	2002      	movs	r0, #2
}
 8003476:	bd70      	pop	{r4, r5, r6, pc}

08003478 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8003478:	060b      	lsls	r3, r1, #24
{
 800347a:	b510      	push	{r4, lr}
 800347c:	f001 0207 	and.w	r2, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 8003480:	d419      	bmi.n	80034b6 <HAL_PCD_EP_Close+0x3e>
    ep->is_in = 0U;
 8003482:	2400      	movs	r4, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003484:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 800348e:	4401      	add	r1, r0
    ep->is_in = 0U;
 8003490:	4403      	add	r3, r0
 8003492:	f883 4169 	strb.w	r4, [r3, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003496:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003498:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 800349c:	2b01      	cmp	r3, #1
 800349e:	d016      	beq.n	80034ce <HAL_PCD_EP_Close+0x56>
 80034a0:	2301      	movs	r3, #1
 80034a2:	4604      	mov	r4, r0
 80034a4:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80034a8:	6800      	ldr	r0, [r0, #0]
 80034aa:	f000 fda3 	bl	8003ff4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034ae:	2000      	movs	r0, #0
 80034b0:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80034b4:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 80034b6:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034b8:	18d1      	adds	r1, r2, r3
 80034ba:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80034be:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->num   = ep_addr & EP_ADDR_MSK;
 80034c2:	700a      	strb	r2, [r1, #0]
    ep->is_in = 1U;
 80034c4:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 80034c6:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d1e8      	bne.n	80034a0 <HAL_PCD_EP_Close+0x28>
 80034ce:	2002      	movs	r0, #2
}
 80034d0:	bd10      	pop	{r4, pc}
 80034d2:	bf00      	nop

080034d4 <HAL_PCD_EP_Receive>:
{
 80034d4:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_count = 0U;
 80034d6:	2600      	movs	r6, #0
 80034d8:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 80034dc:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 80034e0:	00e4      	lsls	r4, r4, #3
 80034e2:	1905      	adds	r5, r0, r4
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034e4:	f504 74b4 	add.w	r4, r4, #360	; 0x168
  ep->num = ep_addr & EP_ADDR_MSK;
 80034e8:	f885 1168 	strb.w	r1, [r5, #360]	; 0x168
  ep->xfer_buff = pBuf;
 80034ec:	f8c5 217c 	str.w	r2, [r5, #380]	; 0x17c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034f0:	1901      	adds	r1, r0, r4
  ep->xfer_len = len;
 80034f2:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034f6:	6800      	ldr	r0, [r0, #0]
  ep->xfer_count = 0U;
 80034f8:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
  ep->is_in = 0U;
 80034fc:	f885 6169 	strb.w	r6, [r5, #361]	; 0x169
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003500:	f000 fe4e 	bl	80041a0 <USB_EPStartXfer>
}
 8003504:	4630      	mov	r0, r6
 8003506:	bd70      	pop	{r4, r5, r6, pc}

08003508 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003508:	f001 0107 	and.w	r1, r1, #7
 800350c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003510:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8003514:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop

0800351c <HAL_PCD_EP_Transmit>:
{
 800351c:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_fill_db = 1U;
 800351e:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 8003520:	2500      	movs	r5, #0
 8003522:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8003526:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 800352a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800352e:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003530:	198a      	adds	r2, r1, r6
 8003532:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  ep->num = ep_addr & EP_ADDR_MSK;
 8003536:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep->xfer_len = len;
 800353a:	6423      	str	r3, [r4, #64]	; 0x40
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800353c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
  ep->xfer_len_db = len;
 8003540:	64a3      	str	r3, [r4, #72]	; 0x48
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003542:	6800      	ldr	r0, [r0, #0]
  ep->xfer_fill_db = 1U;
 8003544:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
  ep->is_in = 1U;
 8003548:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
  ep->xfer_count = 0U;
 800354c:	6465      	str	r5, [r4, #68]	; 0x44
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800354e:	f000 fe27 	bl	80041a0 <USB_EPStartXfer>
}
 8003552:	4628      	mov	r0, r5
 8003554:	bd70      	pop	{r4, r5, r6, pc}
 8003556:	bf00      	nop

08003558 <HAL_PCD_EP_SetStall>:
{
 8003558:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800355a:	6843      	ldr	r3, [r0, #4]
 800355c:	f001 0507 	and.w	r5, r1, #7
 8003560:	429d      	cmp	r5, r3
 8003562:	d81d      	bhi.n	80035a0 <HAL_PCD_EP_SetStall+0x48>
  if ((0x80U & ep_addr) == 0x80U)
 8003564:	060b      	lsls	r3, r1, #24
 8003566:	d41d      	bmi.n	80035a4 <HAL_PCD_EP_SetStall+0x4c>
    ep->is_in = 0U;
 8003568:	2400      	movs	r4, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800356a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800356e:	00c9      	lsls	r1, r1, #3
    ep->is_in = 0U;
 8003570:	1843      	adds	r3, r0, r1
 8003572:	f883 4169 	strb.w	r4, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 8003576:	2301      	movs	r3, #1
    ep = &hpcd->OUT_ep[ep_addr];
 8003578:	f501 72b4 	add.w	r2, r1, #360	; 0x168
 800357c:	1881      	adds	r1, r0, r2
  ep->num = ep_addr & EP_ADDR_MSK;
 800357e:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8003580:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8003582:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 8003586:	429a      	cmp	r2, r3
 8003588:	d01a      	beq.n	80035c0 <HAL_PCD_EP_SetStall+0x68>
 800358a:	4604      	mov	r4, r0
 800358c:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003590:	6800      	ldr	r0, [r0, #0]
 8003592:	f001 f989 	bl	80048a8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003596:	b1ad      	cbz	r5, 80035c4 <HAL_PCD_EP_SetStall+0x6c>
  __HAL_UNLOCK(hpcd);
 8003598:	2000      	movs	r0, #0
 800359a:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800359e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80035a0:	2001      	movs	r0, #1
}
 80035a2:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 80035a4:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035a6:	18e9      	adds	r1, r5, r3
 80035a8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80035ac:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 80035b0:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 1U;
 80035b2:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80035b4:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80035b6:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80035b8:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 80035bc:	429a      	cmp	r2, r3
 80035be:	d1e4      	bne.n	800358a <HAL_PCD_EP_SetStall+0x32>
 80035c0:	2002      	movs	r0, #2
}
 80035c2:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80035c4:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 80035c8:	6820      	ldr	r0, [r4, #0]
 80035ca:	f001 f9f1 	bl	80049b0 <USB_EP0_OutStart>
 80035ce:	e7e3      	b.n	8003598 <HAL_PCD_EP_SetStall+0x40>

080035d0 <HAL_PCD_EP_ClrStall>:
{
 80035d0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035d2:	6843      	ldr	r3, [r0, #4]
 80035d4:	f001 020f 	and.w	r2, r1, #15
 80035d8:	429a      	cmp	r2, r3
 80035da:	d81f      	bhi.n	800361c <HAL_PCD_EP_ClrStall+0x4c>
  if ((0x80U & ep_addr) == 0x80U)
 80035dc:	060b      	lsls	r3, r1, #24
 80035de:	f001 0207 	and.w	r2, r1, #7
 80035e2:	d41d      	bmi.n	8003620 <HAL_PCD_EP_ClrStall+0x50>
    ep->is_in = 0U;
 80035e4:	2400      	movs	r4, #0
  ep->is_stall = 0U;
 80035e6:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035e8:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 80035f2:	4401      	add	r1, r0
    ep->is_in = 0U;
 80035f4:	4403      	add	r3, r0
 80035f6:	f883 4169 	strb.w	r4, [r3, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80035fa:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 80035fc:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80035fe:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8003602:	2b01      	cmp	r3, #1
 8003604:	d01a      	beq.n	800363c <HAL_PCD_EP_ClrStall+0x6c>
 8003606:	2301      	movs	r3, #1
 8003608:	4604      	mov	r4, r0
 800360a:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800360e:	6800      	ldr	r0, [r0, #0]
 8003610:	f001 f96c 	bl	80048ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003614:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 8003618:	4628      	mov	r0, r5
}
 800361a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800361c:	2001      	movs	r0, #1
}
 800361e:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8003620:	2301      	movs	r3, #1
  ep->is_stall = 0U;
 8003622:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003624:	18d1      	adds	r1, r2, r3
 8003626:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800362a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->num = ep_addr & EP_ADDR_MSK;
 800362e:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8003630:	708d      	strb	r5, [r1, #2]
    ep->is_in = 1U;
 8003632:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8003634:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8003638:	2b01      	cmp	r3, #1
 800363a:	d1e4      	bne.n	8003606 <HAL_PCD_EP_ClrStall+0x36>
 800363c:	2002      	movs	r0, #2
}
 800363e:	bd38      	pop	{r3, r4, r5, pc}

08003640 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003640:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003644:	d00f      	beq.n	8003666 <HAL_PCDEx_PMAConfig+0x26>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003646:	f001 0107 	and.w	r1, r1, #7
 800364a:	3101      	adds	r1, #1
 800364c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003650:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8003654:	b298      	uxth	r0, r3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003656:	b17a      	cbz	r2, 8003678 <HAL_PCDEx_PMAConfig+0x38>
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003658:	2201      	movs	r2, #1
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800365a:	0c1b      	lsrs	r3, r3, #16
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800365c:	8108      	strh	r0, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800365e:	814b      	strh	r3, [r1, #10]
 8003660:	730a      	strb	r2, [r1, #12]
  }

  return HAL_OK;
}
 8003662:	2000      	movs	r0, #0
 8003664:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8003666:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800366a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800366e:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8003672:	b298      	uxth	r0, r3
  if (ep_kind == PCD_SNG_BUF)
 8003674:	2a00      	cmp	r2, #0
 8003676:	d1ef      	bne.n	8003658 <HAL_PCDEx_PMAConfig+0x18>
    ep->pmaadress = (uint16_t)pmaadress;
 8003678:	80c8      	strh	r0, [r1, #6]
 800367a:	730a      	strb	r2, [r1, #12]
}
 800367c:	2000      	movs	r0, #0
 800367e:	4770      	bx	lr

08003680 <LL_ADC_CommonInit>:
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8003680:	4a0c      	ldr	r2, [pc, #48]	; (80036b4 <LL_ADC_CommonInit+0x34>)
 8003682:	4b0d      	ldr	r3, [pc, #52]	; (80036b8 <LL_ADC_CommonInit+0x38>)
 8003684:	6892      	ldr	r2, [r2, #8]
 8003686:	689b      	ldr	r3, [r3, #8]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8003688:	4313      	orrs	r3, r2
 800368a:	f013 0301 	ands.w	r3, r3, #1
 800368e:	d10e      	bne.n	80036ae <LL_ADC_CommonInit+0x2e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8003690:	680a      	ldr	r2, [r1, #0]
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8003692:	6841      	ldr	r1, [r0, #4]
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8003694:	b92a      	cbnz	r2, 80036a2 <LL_ADC_CommonInit+0x22>
  ErrorStatus status = SUCCESS;
 8003696:	4613      	mov	r3, r2
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8003698:	f421 2170 	bic.w	r1, r1, #983040	; 0xf0000
 800369c:	6041      	str	r1, [r0, #4]
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
  }
  
  return status;
}
 800369e:	4618      	mov	r0, r3
 80036a0:	4770      	bx	lr
      MODIFY_REG(ADCxy_COMMON->CR1,
 80036a2:	f421 2170 	bic.w	r1, r1, #983040	; 0xf0000
 80036a6:	430a      	orrs	r2, r1
 80036a8:	6042      	str	r2, [r0, #4]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	4770      	bx	lr
    status = ERROR;
 80036ae:	2301      	movs	r3, #1
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	4770      	bx	lr
 80036b4:	40012400 	.word	0x40012400
 80036b8:	40012800 	.word	0x40012800

080036bc <LL_ADC_Init>:
 80036bc:	6883      	ldr	r3, [r0, #8]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80036be:	f013 0301 	ands.w	r3, r3, #1
 80036c2:	d10f      	bne.n	80036e4 <LL_ADC_Init+0x28>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80036c4:	6842      	ldr	r2, [r0, #4]
{
 80036c6:	b410      	push	{r4}
    MODIFY_REG(ADCx->CR1,
 80036c8:	684c      	ldr	r4, [r1, #4]
 80036ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036ce:	4322      	orrs	r2, r4
 80036d0:	6042      	str	r2, [r0, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80036d2:	6882      	ldr	r2, [r0, #8]
 80036d4:	6809      	ldr	r1, [r1, #0]
 80036d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036da:	430a      	orrs	r2, r1
 80036dc:	6082      	str	r2, [r0, #8]
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 80036de:	bc10      	pop	{r4}
 80036e0:	4618      	mov	r0, r3
 80036e2:	4770      	bx	lr
    status = ERROR;
 80036e4:	2301      	movs	r3, #1
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop

080036ec <LL_ADC_REG_Init>:
 80036ec:	6883      	ldr	r3, [r0, #8]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80036ee:	07db      	lsls	r3, r3, #31
 80036f0:	d423      	bmi.n	800373a <LL_ADC_REG_Init+0x4e>
{
 80036f2:	b430      	push	{r4, r5}
  if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80036f4:	684c      	ldr	r4, [r1, #4]
 80036f6:	4602      	mov	r2, r0
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80036f8:	b9bc      	cbnz	r4, 800372a <LL_ADC_REG_Init+0x3e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80036fa:	6843      	ldr	r3, [r0, #4]
 80036fc:	f423 4368 	bic.w	r3, r3, #59392	; 0xe800
 8003700:	6043      	str	r3, [r0, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8003702:	6893      	ldr	r3, [r2, #8]
 8003704:	680d      	ldr	r5, [r1, #0]
 8003706:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 800370a:	68c8      	ldr	r0, [r1, #12]
 800370c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003710:	6909      	ldr	r1, [r1, #16]
 8003712:	432b      	orrs	r3, r5
 8003714:	4303      	orrs	r3, r0
 8003716:	430b      	orrs	r3, r1
 8003718:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800371a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  ErrorStatus status = SUCCESS;
 800371c:	2000      	movs	r0, #0
 800371e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003722:	4323      	orrs	r3, r4
 8003724:	62d3      	str	r3, [r2, #44]	; 0x2c
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 8003726:	bc30      	pop	{r4, r5}
 8003728:	4770      	bx	lr
      MODIFY_REG(ADCx->CR1,
 800372a:	6840      	ldr	r0, [r0, #4]
 800372c:	688b      	ldr	r3, [r1, #8]
 800372e:	f420 4068 	bic.w	r0, r0, #59392	; 0xe800
 8003732:	4320      	orrs	r0, r4
 8003734:	4318      	orrs	r0, r3
 8003736:	6050      	str	r0, [r2, #4]
 8003738:	e7e3      	b.n	8003702 <LL_ADC_REG_Init+0x16>
    status = ERROR;
 800373a:	2001      	movs	r0, #1
}
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop

08003740 <LL_EXTI_Init>:
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8003740:	7901      	ldrb	r1, [r0, #4]
{
 8003742:	b410      	push	{r4}
 8003744:	6803      	ldr	r3, [r0, #0]
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8003746:	b1d1      	cbz	r1, 800377e <LL_EXTI_Init+0x3e>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8003748:	b1b3      	cbz	r3, 8003778 <LL_EXTI_Init+0x38>
    {
      switch (EXTI_InitStruct->Mode)
 800374a:	7942      	ldrb	r2, [r0, #5]
 800374c:	2a01      	cmp	r2, #1
 800374e:	d037      	beq.n	80037c0 <LL_EXTI_Init+0x80>
 8003750:	d321      	bcc.n	8003796 <LL_EXTI_Init+0x56>
 8003752:	2a02      	cmp	r2, #2
 8003754:	d13e      	bne.n	80037d4 <LL_EXTI_Init+0x94>
  SET_BIT(EXTI->EMR, ExtiLine);
 8003756:	2100      	movs	r1, #0
  SET_BIT(EXTI->IMR, ExtiLine);
 8003758:	4a27      	ldr	r2, [pc, #156]	; (80037f8 <LL_EXTI_Init+0xb8>)
 800375a:	6814      	ldr	r4, [r2, #0]
 800375c:	431c      	orrs	r4, r3
 800375e:	6014      	str	r4, [r2, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8003760:	6854      	ldr	r4, [r2, #4]
 8003762:	431c      	orrs	r4, r3
 8003764:	6054      	str	r4, [r2, #4]
          break;
        default:
          status = ERROR;
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003766:	7982      	ldrb	r2, [r0, #6]
 8003768:	b332      	cbz	r2, 80037b8 <LL_EXTI_Init+0x78>
      {
        switch (EXTI_InitStruct->Trigger)
 800376a:	2a02      	cmp	r2, #2
 800376c:	d03e      	beq.n	80037ec <LL_EXTI_Init+0xac>
 800376e:	2a03      	cmp	r2, #3
 8003770:	d01b      	beq.n	80037aa <LL_EXTI_Init+0x6a>
 8003772:	2a01      	cmp	r2, #1
 8003774:	d030      	beq.n	80037d8 <LL_EXTI_Init+0x98>
 8003776:	2301      	movs	r3, #1
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
  }
  return status;
}
 8003778:	4618      	mov	r0, r3
 800377a:	bc10      	pop	{r4}
 800377c:	4770      	bx	lr
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800377e:	43dc      	mvns	r4, r3
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8003780:	460b      	mov	r3, r1
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8003782:	4a1d      	ldr	r2, [pc, #116]	; (80037f8 <LL_EXTI_Init+0xb8>)
 8003784:	6810      	ldr	r0, [r2, #0]
 8003786:	4020      	ands	r0, r4
 8003788:	6010      	str	r0, [r2, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800378a:	6851      	ldr	r1, [r2, #4]
 800378c:	4618      	mov	r0, r3
 800378e:	4021      	ands	r1, r4
 8003790:	6051      	str	r1, [r2, #4]
 8003792:	bc10      	pop	{r4}
 8003794:	4770      	bx	lr
 8003796:	4a18      	ldr	r2, [pc, #96]	; (80037f8 <LL_EXTI_Init+0xb8>)
  SET_BIT(EXTI->IMR, ExtiLine);
 8003798:	2100      	movs	r1, #0
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800379a:	6854      	ldr	r4, [r2, #4]
 800379c:	ea24 0403 	bic.w	r4, r4, r3
 80037a0:	6054      	str	r4, [r2, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80037a2:	6814      	ldr	r4, [r2, #0]
 80037a4:	431c      	orrs	r4, r3
 80037a6:	6014      	str	r4, [r2, #0]
 80037a8:	e7dd      	b.n	8003766 <LL_EXTI_Init+0x26>
  SET_BIT(EXTI->RTSR, ExtiLine);
 80037aa:	4a13      	ldr	r2, [pc, #76]	; (80037f8 <LL_EXTI_Init+0xb8>)
 80037ac:	6890      	ldr	r0, [r2, #8]
 80037ae:	4318      	orrs	r0, r3
 80037b0:	6090      	str	r0, [r2, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80037b2:	68d0      	ldr	r0, [r2, #12]
 80037b4:	4303      	orrs	r3, r0
 80037b6:	60d3      	str	r3, [r2, #12]
 80037b8:	460b      	mov	r3, r1
 80037ba:	bc10      	pop	{r4}
 80037bc:	4618      	mov	r0, r3
 80037be:	4770      	bx	lr
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80037c0:	4a0d      	ldr	r2, [pc, #52]	; (80037f8 <LL_EXTI_Init+0xb8>)
  SET_BIT(EXTI->EMR, ExtiLine);
 80037c2:	2100      	movs	r1, #0
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80037c4:	6814      	ldr	r4, [r2, #0]
 80037c6:	ea24 0403 	bic.w	r4, r4, r3
 80037ca:	6014      	str	r4, [r2, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 80037cc:	6854      	ldr	r4, [r2, #4]
 80037ce:	431c      	orrs	r4, r3
 80037d0:	6054      	str	r4, [r2, #4]
 80037d2:	e7c8      	b.n	8003766 <LL_EXTI_Init+0x26>
      switch (EXTI_InitStruct->Mode)
 80037d4:	2101      	movs	r1, #1
 80037d6:	e7c6      	b.n	8003766 <LL_EXTI_Init+0x26>
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80037d8:	4a07      	ldr	r2, [pc, #28]	; (80037f8 <LL_EXTI_Init+0xb8>)
 80037da:	68d0      	ldr	r0, [r2, #12]
 80037dc:	ea20 0003 	bic.w	r0, r0, r3
 80037e0:	60d0      	str	r0, [r2, #12]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80037e2:	6890      	ldr	r0, [r2, #8]
 80037e4:	4303      	orrs	r3, r0
 80037e6:	6093      	str	r3, [r2, #8]
 80037e8:	460b      	mov	r3, r1
 80037ea:	e7c5      	b.n	8003778 <LL_EXTI_Init+0x38>
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80037ec:	4a02      	ldr	r2, [pc, #8]	; (80037f8 <LL_EXTI_Init+0xb8>)
 80037ee:	6890      	ldr	r0, [r2, #8]
 80037f0:	ea20 0003 	bic.w	r0, r0, r3
 80037f4:	e7dc      	b.n	80037b0 <LL_EXTI_Init+0x70>
 80037f6:	bf00      	nop
 80037f8:	40010400 	.word	0x40010400

080037fc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80037fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8003800:	680f      	ldr	r7, [r1, #0]
 8003802:	f3c7 270f 	ubfx	r7, r7, #8, #16
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003806:	fa97 f6a7 	rbit	r6, r7
  pinpos = POSITION_VAL(pinmask);
 800380a:	fab6 f686 	clz	r6, r6

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800380e:	fa37 f306 	lsrs.w	r3, r7, r6
 8003812:	d06e      	beq.n	80038f2 <LL_GPIO_Init+0xf6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8003814:	f04f 0c01 	mov.w	ip, #1
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8003818:	f04f 0e0f 	mov.w	lr, #15
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800381c:	f04f 0803 	mov.w	r8, #3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8003820:	f04f 0a04 	mov.w	sl, #4
 8003824:	e056      	b.n	80038d4 <LL_GPIO_Init+0xd8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
      {
        currentpin = (0x00000101uL << pinpos);
 8003826:	f240 1301 	movw	r3, #257	; 0x101
 800382a:	40b3      	lsls	r3, r6
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800382c:	68c2      	ldr	r2, [r0, #12]
 800382e:	ea4f 2913 	mov.w	r9, r3, lsr #8
 8003832:	fa99 f4a9 	rbit	r4, r9
 8003836:	fab4 f584 	clz	r5, r4
 800383a:	690c      	ldr	r4, [r1, #16]
 800383c:	ea22 0209 	bic.w	r2, r2, r9
 8003840:	40ac      	lsls	r4, r5
 8003842:	4322      	orrs	r2, r4
 8003844:	60c2      	str	r2, [r0, #12]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003846:	0e1c      	lsrs	r4, r3, #24
 8003848:	fa93 f5a3 	rbit	r5, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800384c:	fab5 f585 	clz	r5, r5
 8003850:	fa93 f2a3 	rbit	r2, r3
 8003854:	fab2 f282 	clz	r2, r2
 8003858:	00ad      	lsls	r5, r5, #2
 800385a:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800385e:	5902      	ldr	r2, [r0, r4]
 8003860:	fa0e f505 	lsl.w	r5, lr, r5
 8003864:	ea22 0505 	bic.w	r5, r2, r5
 8003868:	684a      	ldr	r2, [r1, #4]
 800386a:	fa02 f209 	lsl.w	r2, r2, r9
 800386e:	4315      	orrs	r5, r2
 8003870:	5105      	str	r5, [r0, r4]
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003872:	684a      	ldr	r2, [r1, #4]
 8003874:	f022 0208 	bic.w	r2, r2, #8
 8003878:	2a01      	cmp	r2, #1
 800387a:	d127      	bne.n	80038cc <LL_GPIO_Init+0xd0>
 800387c:	fa93 f2a3 	rbit	r2, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8003880:	fab2 f282 	clz	r2, r2
 8003884:	fa93 f9a3 	rbit	r9, r3
 8003888:	fab9 f989 	clz	r9, r9
 800388c:	0092      	lsls	r2, r2, #2
 800388e:	fa08 f202 	lsl.w	r2, r8, r2
 8003892:	ea25 0502 	bic.w	r5, r5, r2
 8003896:	688a      	ldr	r2, [r1, #8]
 8003898:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800389c:	fa02 f209 	lsl.w	r2, r2, r9
 80038a0:	432a      	orrs	r2, r5
 80038a2:	5102      	str	r2, [r0, r4]
 80038a4:	fa93 f9a3 	rbit	r9, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80038a8:	fab9 f989 	clz	r9, r9
 80038ac:	fa93 f3a3 	rbit	r3, r3
 80038b0:	fab3 f383 	clz	r3, r3
 80038b4:	68cd      	ldr	r5, [r1, #12]
 80038b6:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	fa0a f909 	lsl.w	r9, sl, r9
 80038c0:	ea22 0209 	bic.w	r2, r2, r9
 80038c4:	fa05 f303 	lsl.w	r3, r5, r3
 80038c8:	4313      	orrs	r3, r2
 80038ca:	5103      	str	r3, [r0, r4]

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
      }
    }
    pinpos++;
 80038cc:	3601      	adds	r6, #1
  while ((pinmask  >> pinpos) != 0u)
 80038ce:	fa37 f306 	lsrs.w	r3, r7, r6
 80038d2:	d00e      	beq.n	80038f2 <LL_GPIO_Init+0xf6>
    if ((pinmask & (1u << pinpos)) != 0u)
 80038d4:	fa0c f306 	lsl.w	r3, ip, r6
 80038d8:	423b      	tst	r3, r7
 80038da:	d0f7      	beq.n	80038cc <LL_GPIO_Init+0xd0>
      if (pinpos < GPIO_PIN_MASK_POS)
 80038dc:	2e07      	cmp	r6, #7
 80038de:	d9a2      	bls.n	8003826 <LL_GPIO_Init+0x2a>
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80038e0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80038e4:	f1a6 0308 	sub.w	r3, r6, #8
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038f0:	e79c      	b.n	800382c <LL_GPIO_Init+0x30>
  }
  return (SUCCESS);
}
 80038f2:	2000      	movs	r0, #0
 80038f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080038f8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80038f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038fa:	4604      	mov	r4, r0
 80038fc:	460d      	mov	r5, r1
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80038fe:	6803      	ldr	r3, [r0, #0]
 8003900:	b085      	sub	sp, #20
 8003902:	f023 0301 	bic.w	r3, r3, #1

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003906:	4668      	mov	r0, sp
 8003908:	6023      	str	r3, [r4, #0]
 800390a:	f000 f86d 	bl	80039e8 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 800390e:	9802      	ldr	r0, [sp, #8]
{
  uint32_t freqrange = 0x0U;
  uint32_t clockconfig = 0x0U;

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8003910:	4b32      	ldr	r3, [pc, #200]	; (80039dc <LL_I2C_Init+0xe4>)

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8003912:	6861      	ldr	r1, [r4, #4]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8003914:	fba3 2300 	umull	r2, r3, r3, r0
 8003918:	e9d5 7201 	ldrd	r7, r2, [r5, #4]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 800391c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8003920:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8003922:	4319      	orrs	r1, r3
 8003924:	6061      	str	r1, [r4, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8003926:	492e      	ldr	r1, [pc, #184]	; (80039e0 <LL_I2C_Init+0xe8>)
 8003928:	6a26      	ldr	r6, [r4, #32]
 800392a:	428f      	cmp	r7, r1
 800392c:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8003930:	d82e      	bhi.n	8003990 <LL_I2C_Init+0x98>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003932:	007a      	lsls	r2, r7, #1
 8003934:	fbb0 f2f2 	udiv	r2, r0, r2
 8003938:	f3c2 010b 	ubfx	r1, r2, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800393c:	2903      	cmp	r1, #3
 800393e:	bf98      	it	ls
 8003940:	2204      	movls	r2, #4
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8003942:	3301      	adds	r3, #1
 8003944:	4333      	orrs	r3, r6
 8003946:	6223      	str	r3, [r4, #32]
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);

  return SUCCESS;
}
 8003948:	2000      	movs	r0, #0
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 800394a:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 800394c:	68e9      	ldr	r1, [r5, #12]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 800394e:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8003952:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003956:	4313      	orrs	r3, r2
 8003958:	61e3      	str	r3, [r4, #28]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 800395a:	68a2      	ldr	r2, [r4, #8]
 800395c:	696b      	ldr	r3, [r5, #20]
 800395e:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 8003962:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003966:	430b      	orrs	r3, r1
 8003968:	4313      	orrs	r3, r2
 800396a:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 800396c:	6823      	ldr	r3, [r4, #0]
 800396e:	682a      	ldr	r2, [r5, #0]
 8003970:	f023 031a 	bic.w	r3, r3, #26
 8003974:	4313      	orrs	r3, r2
 8003976:	6023      	str	r3, [r4, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003978:	6822      	ldr	r2, [r4, #0]
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 800397a:	6929      	ldr	r1, [r5, #16]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800397c:	f042 0201 	orr.w	r2, r2, #1
 8003980:	6022      	str	r2, [r4, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003988:	430b      	orrs	r3, r1
 800398a:	6023      	str	r3, [r4, #0]
 800398c:	b005      	add	sp, #20
 800398e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8003990:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003994:	fb01 f103 	mul.w	r1, r1, r3
 8003998:	4b12      	ldr	r3, [pc, #72]	; (80039e4 <LL_I2C_Init+0xec>)
 800399a:	fba3 3101 	umull	r3, r1, r3, r1
 800399e:	0989      	lsrs	r1, r1, #6
 80039a0:	3101      	adds	r1, #1
 80039a2:	4331      	orrs	r1, r6
 80039a4:	6221      	str	r1, [r4, #32]
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80039a6:	b94a      	cbnz	r2, 80039bc <LL_I2C_Init+0xc4>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80039a8:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 80039ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80039b0:	f3c3 010b 	ubfx	r1, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80039b4:	b171      	cbz	r1, 80039d4 <LL_I2C_Init+0xdc>
 80039b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ba:	e00d      	b.n	80039d8 <LL_I2C_Init+0xe0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80039bc:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80039c0:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80039c4:	fbb0 f7f7 	udiv	r7, r0, r7
 80039c8:	f3c7 030b 	ubfx	r3, r7, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80039cc:	b113      	cbz	r3, 80039d4 <LL_I2C_Init+0xdc>
 80039ce:	f447 4300 	orr.w	r3, r7, #32768	; 0x8000
 80039d2:	e001      	b.n	80039d8 <LL_I2C_Init+0xe0>
 80039d4:	f248 0301 	movw	r3, #32769	; 0x8001
 80039d8:	431a      	orrs	r2, r3
 80039da:	e7b5      	b.n	8003948 <LL_I2C_Init+0x50>
 80039dc:	431bde83 	.word	0x431bde83
 80039e0:	000186a0 	.word	0x000186a0
 80039e4:	10624dd3 	.word	0x10624dd3

080039e8 <LL_RCC_GetSystemClocksFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80039e8:	4a1a      	ldr	r2, [pc, #104]	; (8003a54 <LL_RCC_GetSystemClocksFreq+0x6c>)
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80039ea:	b410      	push	{r4}
 80039ec:	6853      	ldr	r3, [r2, #4]
 80039ee:	f003 030c 	and.w	r3, r3, #12
uint32_t RCC_GetSystemClockFreq(void)
{
  uint32_t frequency = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d10c      	bne.n	8003a10 <LL_RCC_GetSystemClocksFreq+0x28>
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80039f6:	6853      	ldr	r3, [r2, #4]
 80039f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 80039fc:	bb13      	cbnz	r3, 8003a44 <LL_RCC_GetSystemClocksFreq+0x5c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80039fe:	4b16      	ldr	r3, [pc, #88]	; (8003a58 <LL_RCC_GetSystemClocksFreq+0x70>)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8003a00:	4a14      	ldr	r2, [pc, #80]	; (8003a54 <LL_RCC_GetSystemClocksFreq+0x6c>)
 8003a02:	6852      	ldr	r2, [r2, #4]

    default:
      pllinputfreq = HSI_VALUE / 2U;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8003a04:	f3c2 4283 	ubfx	r2, r2, #18, #4
 8003a08:	3202      	adds	r2, #2
 8003a0a:	fb03 f302 	mul.w	r3, r3, r2
 8003a0e:	e000      	b.n	8003a12 <LL_RCC_GetSystemClocksFreq+0x2a>
      frequency = HSI_VALUE;
 8003a10:	4b12      	ldr	r3, [pc, #72]	; (8003a5c <LL_RCC_GetSystemClocksFreq+0x74>)
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003a12:	4a10      	ldr	r2, [pc, #64]	; (8003a54 <LL_RCC_GetSystemClocksFreq+0x6c>)
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003a14:	6003      	str	r3, [r0, #0]
 8003a16:	6851      	ldr	r1, [r2, #4]
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003a18:	4c11      	ldr	r4, [pc, #68]	; (8003a60 <LL_RCC_GetSystemClocksFreq+0x78>)
 8003a1a:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8003a1e:	5c61      	ldrb	r1, [r4, r1]
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003a20:	4c10      	ldr	r4, [pc, #64]	; (8003a64 <LL_RCC_GetSystemClocksFreq+0x7c>)
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003a22:	40cb      	lsrs	r3, r1
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003a24:	6043      	str	r3, [r0, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003a26:	6851      	ldr	r1, [r2, #4]
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003a28:	f3c1 2102 	ubfx	r1, r1, #8, #3
 8003a2c:	5c61      	ldrb	r1, [r4, r1]
 8003a2e:	fa23 f101 	lsr.w	r1, r3, r1
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003a32:	6081      	str	r1, [r0, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003a34:	6852      	ldr	r2, [r2, #4]
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003a36:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 8003a3a:	5ca2      	ldrb	r2, [r4, r2]
}
 8003a3c:	bc10      	pop	{r4}
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003a3e:	40d3      	lsrs	r3, r2
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003a40:	60c3      	str	r3, [r0, #12]
}
 8003a42:	4770      	bx	lr
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8003a44:	6852      	ldr	r2, [r2, #4]
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8003a46:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <LL_RCC_GetSystemClocksFreq+0x74>)
 8003a48:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8003a4c:	3201      	adds	r2, #1
 8003a4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a52:	e7d5      	b.n	8003a00 <LL_RCC_GetSystemClocksFreq+0x18>
 8003a54:	40021000 	.word	0x40021000
 8003a58:	003d0900 	.word	0x003d0900
 8003a5c:	007a1200 	.word	0x007a1200
 8003a60:	08009d5c 	.word	0x08009d5c
 8003a64:	08009d6c 	.word	0x08009d6c

08003a68 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003a68:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a6a:	4d19      	ldr	r5, [pc, #100]	; (8003ad0 <LL_TIM_Init+0x68>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003a6c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a6e:	42a8      	cmp	r0, r5
 8003a70:	688a      	ldr	r2, [r1, #8]
 8003a72:	880c      	ldrh	r4, [r1, #0]
 8003a74:	d01d      	beq.n	8003ab2 <LL_TIM_Init+0x4a>
 8003a76:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003a7a:	d011      	beq.n	8003aa0 <LL_TIM_Init+0x38>
 8003a7c:	f5a5 3594 	sub.w	r5, r5, #75776	; 0x12800
 8003a80:	42a8      	cmp	r0, r5
 8003a82:	d00d      	beq.n	8003aa0 <LL_TIM_Init+0x38>
 8003a84:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003a88:	42a8      	cmp	r0, r5
 8003a8a:	d009      	beq.n	8003aa0 <LL_TIM_Init+0x38>
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003a8c:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003a8e:	62c2      	str	r2, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8003a90:	6284      	str	r4, [r0, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003a92:	6943      	ldr	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8003a94:	bc30      	pop	{r4, r5}
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	6143      	str	r3, [r0, #20]
 8003a9c:	2000      	movs	r0, #0
 8003a9e:	4770      	bx	lr
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003aa0:	684d      	ldr	r5, [r1, #4]
 8003aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa6:	432b      	orrs	r3, r5
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003aa8:	68c9      	ldr	r1, [r1, #12]
 8003aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aae:	430b      	orrs	r3, r1
 8003ab0:	e7ec      	b.n	8003a8c <LL_TIM_Init+0x24>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003ab2:	684d      	ldr	r5, [r1, #4]
 8003ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab8:	432b      	orrs	r3, r5
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003aba:	68cd      	ldr	r5, [r1, #12]
 8003abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac0:	432b      	orrs	r3, r5
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003ac2:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003ac4:	62c2      	str	r2, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8003ac6:	6284      	str	r4, [r0, #40]	; 0x28
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003ac8:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003aca:	6303      	str	r3, [r0, #48]	; 0x30
 8003acc:	e7e1      	b.n	8003a92 <LL_TIM_Init+0x2a>
 8003ace:	bf00      	nop
 8003ad0:	40012c00 	.word	0x40012c00

08003ad4 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 8003ad4:	2910      	cmp	r1, #16
{
 8003ad6:	b470      	push	{r4, r5, r6}
 8003ad8:	4603      	mov	r3, r0
  switch (Channel)
 8003ada:	d06d      	beq.n	8003bb8 <LL_TIM_OC_Init+0xe4>
 8003adc:	d948      	bls.n	8003b70 <LL_TIM_OC_Init+0x9c>
 8003ade:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003ae2:	d024      	beq.n	8003b2e <LL_TIM_OC_Init+0x5a>
 8003ae4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003ae8:	d163      	bne.n	8003bb2 <LL_TIM_OC_Init+0xde>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003aea:	6a00      	ldr	r0, [r0, #32]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003aec:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003aee:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003af2:	6218      	str	r0, [r3, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003af4:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003af6:	685e      	ldr	r6, [r3, #4]
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003af8:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8003afc:	ea41 3105 	orr.w	r1, r1, r5, lsl #12

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003b00:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003b04:	e9d2 0500 	ldrd	r0, r5, [r2]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003b08:	69dc      	ldr	r4, [r3, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003b0a:	ea41 3105 	orr.w	r1, r1, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b0e:	4d5d      	ldr	r5, [pc, #372]	; (8003c84 <LL_TIM_OC_Init+0x1b0>)
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003b10:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b14:	42ab      	cmp	r3, r5
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003b16:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b1a:	f000 80ac 	beq.w	8003c76 <LL_TIM_OC_Init+0x1a2>

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003b1e:	68d2      	ldr	r2, [r2, #12]
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003b20:	2000      	movs	r0, #0
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003b22:	605e      	str	r6, [r3, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003b24:	61dc      	str	r4, [r3, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003b26:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003b28:	bc70      	pop	{r4, r5, r6}

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003b2a:	6219      	str	r1, [r3, #32]
}
 8003b2c:	4770      	bx	lr
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003b2e:	6a00      	ldr	r0, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003b30:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003b32:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8003b36:	6218      	str	r0, [r3, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003b38:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003b3a:	685e      	ldr	r6, [r3, #4]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003b3c:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8003b40:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003b44:	f421 7180 	bic.w	r1, r1, #256	; 0x100
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003b48:	e9d2 0500 	ldrd	r0, r5, [r2]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003b4c:	69dc      	ldr	r4, [r3, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003b4e:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b52:	4d4c      	ldr	r5, [pc, #304]	; (8003c84 <LL_TIM_OC_Init+0x1b0>)
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003b54:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b58:	42ab      	cmp	r3, r5
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003b5a:	ea44 0400 	orr.w	r4, r4, r0
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b5e:	d075      	beq.n	8003c4c <LL_TIM_OC_Init+0x178>
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003b60:	68d2      	ldr	r2, [r2, #12]
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003b62:	2000      	movs	r0, #0
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003b64:	605e      	str	r6, [r3, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003b66:	61dc      	str	r4, [r3, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003b68:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003b6a:	bc70      	pop	{r4, r5, r6}
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003b6c:	6219      	str	r1, [r3, #32]
}
 8003b6e:	4770      	bx	lr
  switch (Channel)
 8003b70:	2901      	cmp	r1, #1
 8003b72:	d11e      	bne.n	8003bb2 <LL_TIM_OC_Init+0xde>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003b74:	6a00      	ldr	r0, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003b76:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003b78:	f020 0001 	bic.w	r0, r0, #1
 8003b7c:	6218      	str	r0, [r3, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003b7e:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003b80:	685e      	ldr	r6, [r3, #4]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003b82:	f021 0102 	bic.w	r1, r1, #2
 8003b86:	4329      	orrs	r1, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003b88:	f021 0101 	bic.w	r1, r1, #1
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003b8c:	e9d2 0500 	ldrd	r0, r5, [r2]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003b90:	699c      	ldr	r4, [r3, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003b92:	4329      	orrs	r1, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b94:	4d3b      	ldr	r5, [pc, #236]	; (8003c84 <LL_TIM_OC_Init+0x1b0>)
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003b96:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b9a:	42ab      	cmp	r3, r5
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003b9c:	ea44 0400 	orr.w	r4, r4, r0
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba0:	d040      	beq.n	8003c24 <LL_TIM_OC_Init+0x150>
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003ba2:	68d2      	ldr	r2, [r2, #12]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003ba4:	2000      	movs	r0, #0
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003ba6:	605e      	str	r6, [r3, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003ba8:	619c      	str	r4, [r3, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003baa:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003bac:	bc70      	pop	{r4, r5, r6}
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003bae:	6219      	str	r1, [r3, #32]
}
 8003bb0:	4770      	bx	lr
  ErrorStatus result = ERROR;
 8003bb2:	2001      	movs	r0, #1
}
 8003bb4:	bc70      	pop	{r4, r5, r6}
 8003bb6:	4770      	bx	lr
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003bb8:	6a00      	ldr	r0, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003bba:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003bbc:	f020 0010 	bic.w	r0, r0, #16
 8003bc0:	6218      	str	r0, [r3, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003bc2:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003bc4:	685e      	ldr	r6, [r3, #4]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003bc6:	f021 0120 	bic.w	r1, r1, #32
 8003bca:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003bce:	f021 0110 	bic.w	r1, r1, #16
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003bd2:	e9d2 0500 	ldrd	r0, r5, [r2]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003bd6:	699c      	ldr	r4, [r3, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003bd8:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bdc:	4d29      	ldr	r5, [pc, #164]	; (8003c84 <LL_TIM_OC_Init+0x1b0>)
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003bde:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be2:	42ab      	cmp	r3, r5
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003be4:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be8:	d007      	beq.n	8003bfa <LL_TIM_OC_Init+0x126>
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003bea:	68d2      	ldr	r2, [r2, #12]
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003bec:	2000      	movs	r0, #0
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003bee:	605e      	str	r6, [r3, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003bf0:	619c      	str	r4, [r3, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003bf2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003bf4:	bc70      	pop	{r4, r5, r6}
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003bf6:	6219      	str	r1, [r3, #32]
}
 8003bf8:	4770      	bx	lr
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003bfa:	f021 0180 	bic.w	r1, r1, #128	; 0x80
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003bfe:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
 8003c02:	e9d2 5005 	ldrd	r5, r0, [r2, #20]
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003c06:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003c0a:	ea46 0680 	orr.w	r6, r6, r0, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003c0e:	6895      	ldr	r5, [r2, #8]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003c10:	69d0      	ldr	r0, [r2, #28]
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003c12:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003c16:	f426 6600 	bic.w	r6, r6, #2048	; 0x800
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003c1a:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003c1e:	ea46 06c0 	orr.w	r6, r6, r0, lsl #3
 8003c22:	e7e2      	b.n	8003bea <LL_TIM_OC_Init+0x116>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003c24:	f021 0108 	bic.w	r1, r1, #8
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003c28:	f426 7680 	bic.w	r6, r6, #256	; 0x100
 8003c2c:	e9d2 5005 	ldrd	r5, r0, [r2, #20]
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003c30:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003c34:	4306      	orrs	r6, r0
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003c36:	6895      	ldr	r5, [r2, #8]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003c38:	69d0      	ldr	r0, [r2, #28]
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003c3a:	f021 0104 	bic.w	r1, r1, #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003c3e:	f426 7600 	bic.w	r6, r6, #512	; 0x200
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003c42:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003c46:	ea46 0640 	orr.w	r6, r6, r0, lsl #1
 8003c4a:	e7aa      	b.n	8003ba2 <LL_TIM_OC_Init+0xce>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003c4c:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003c50:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
 8003c54:	e9d2 5005 	ldrd	r5, r0, [r2, #20]
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003c58:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003c5c:	ea46 1600 	orr.w	r6, r6, r0, lsl #4
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003c60:	6895      	ldr	r5, [r2, #8]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003c62:	69d0      	ldr	r0, [r2, #28]
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003c64:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003c68:	f426 5600 	bic.w	r6, r6, #8192	; 0x2000
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003c6c:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003c70:	ea46 1640 	orr.w	r6, r6, r0, lsl #5
 8003c74:	e774      	b.n	8003b60 <LL_TIM_OC_Init+0x8c>
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003c76:	6990      	ldr	r0, [r2, #24]
 8003c78:	f426 4680 	bic.w	r6, r6, #16384	; 0x4000
 8003c7c:	ea46 1680 	orr.w	r6, r6, r0, lsl #6
 8003c80:	e74d      	b.n	8003b1e <LL_TIM_OC_Init+0x4a>
 8003c82:	bf00      	nop
 8003c84:	40012c00 	.word	0x40012c00

08003c88 <LL_TIM_BDTR_Init>:
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8003c88:	7b0b      	ldrb	r3, [r1, #12]
{
 8003c8a:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8003c8c:	e9d1 2401 	ldrd	r2, r4, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8003c90:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8003c92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c96:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8003c98:	680a      	ldr	r2, [r1, #0]
 8003c9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c9e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8003ca0:	89ca      	ldrh	r2, [r1, #14]
 8003ca2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ca6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8003ca8:	690a      	ldr	r2, [r1, #16]
 8003caa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cae:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8003cb0:	694a      	ldr	r2, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8003cb2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003cb6:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8003cb8:	6443      	str	r3, [r0, #68]	; 0x44
}
 8003cba:	bc10      	pop	{r4}
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	4770      	bx	lr

08003cc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003cc0:	b084      	sub	sp, #16
 8003cc2:	a801      	add	r0, sp, #4
 8003cc4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8003cc8:	b004      	add	sp, #16
 8003cca:	2000      	movs	r0, #0
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop

08003cd0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003cd0:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003cd2:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 8003cd6:	2000      	movs	r0, #0
 8003cd8:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8003cdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop

08003ce4 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003ce4:	f244 03ff 	movw	r3, #16639	; 0x40ff
{
 8003ce8:	4602      	mov	r2, r0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003cea:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40

  return HAL_OK;
}
 8003cee:	2000      	movs	r0, #0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003cf0:	400b      	ands	r3, r1
 8003cf2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
}
 8003cf6:	4770      	bx	lr

08003cf8 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003cf8:	2000      	movs	r0, #0
 8003cfa:	4770      	bx	lr

08003cfc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003cfc:	b084      	sub	sp, #16
 8003cfe:	b430      	push	{r4, r5}
 8003d00:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003d02:	2001      	movs	r0, #1

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003d04:	2500      	movs	r5, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003d06:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
{
 8003d0a:	a803      	add	r0, sp, #12
  USBx->CNTR = 0U;
 8003d0c:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
{
 8003d10:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003d14:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 8003d18:	4628      	mov	r0, r5
  USBx->BTABLE = BTABLE_ADDRESS;
 8003d1a:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
}
 8003d1e:	bc30      	pop	{r4, r5}
 8003d20:	b004      	add	sp, #16
 8003d22:	4770      	bx	lr

08003d24 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d24:	b470      	push	{r4, r5, r6}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003d26:	780d      	ldrb	r5, [r1, #0]
{
 8003d28:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003d2a:	f830 4025 	ldrh.w	r4, [r0, r5, lsl #2]
 8003d2e:	4aac      	ldr	r2, [pc, #688]	; (8003fe0 <USB_ActivateEndpoint+0x2bc>)

  /* initialize Endpoint */
  switch (ep->type)
 8003d30:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003d32:	4022      	ands	r2, r4
  switch (ep->type)
 8003d34:	2803      	cmp	r0, #3
 8003d36:	f200 8124 	bhi.w	8003f82 <USB_ActivateEndpoint+0x25e>
 8003d3a:	e8df f000 	tbb	[pc, r0]
 8003d3e:	464e      	.short	0x464e
 8003d40:	4a02      	.short	0x4a02
  HAL_StatusTypeDef ret = HAL_OK;
 8003d42:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003d44:	f248 0480 	movw	r4, #32896	; 0x8080
 8003d48:	4322      	orrs	r2, r4
 8003d4a:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003d4e:	780d      	ldrb	r5, [r1, #0]
 8003d50:	4ea4      	ldr	r6, [pc, #656]	; (8003fe4 <USB_ActivateEndpoint+0x2c0>)
 8003d52:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8003d56:	432c      	orrs	r4, r5
 8003d58:	4032      	ands	r2, r6
 8003d5a:	4322      	orrs	r2, r4
 8003d5c:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  if (ep->doublebuffer == 0U)
 8003d60:	7b0a      	ldrb	r2, [r1, #12]
 8003d62:	2a00      	cmp	r2, #0
 8003d64:	d13d      	bne.n	8003de2 <USB_ActivateEndpoint+0xbe>
 8003d66:	88cc      	ldrh	r4, [r1, #6]
 8003d68:	780a      	ldrb	r2, [r1, #0]
  {
    if (ep->is_in != 0U)
 8003d6a:	784d      	ldrb	r5, [r1, #1]
 8003d6c:	0864      	lsrs	r4, r4, #1
 8003d6e:	0064      	lsls	r4, r4, #1
 8003d70:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8003d74:	2d00      	cmp	r5, #0
 8003d76:	f000 80ca 	beq.w	8003f0e <USB_ActivateEndpoint+0x1ea>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003d7a:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8003d7e:	442a      	add	r2, r5
 8003d80:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d84:	780a      	ldrb	r2, [r1, #0]
 8003d86:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
 8003d8a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8003d8e:	066d      	lsls	r5, r5, #25
 8003d90:	d50b      	bpl.n	8003daa <USB_ActivateEndpoint+0x86>
 8003d92:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8003d96:	4026      	ands	r6, r4
 8003d98:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
 8003d9c:	f046 06c0 	orr.w	r6, r6, #192	; 0xc0
 8003da0:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 8003da4:	780c      	ldrb	r4, [r1, #0]
 8003da6:	eb03 0484 	add.w	r4, r3, r4, lsl #2

      if (ep->type != EP_TYPE_ISOC)
 8003daa:	78cb      	ldrb	r3, [r1, #3]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	f000 8100 	beq.w	8003fb2 <USB_ActivateEndpoint+0x28e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003db2:	8822      	ldrh	r2, [r4, #0]
 8003db4:	4b8c      	ldr	r3, [pc, #560]	; (8003fe8 <USB_ActivateEndpoint+0x2c4>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	f083 0320 	eor.w	r3, r3, #32
 8003dbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc4:	8023      	strh	r3, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8003dc6:	bc70      	pop	{r4, r5, r6}
 8003dc8:	4770      	bx	lr
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003dca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8003dce:	2000      	movs	r0, #0
      break;
 8003dd0:	e7b8      	b.n	8003d44 <USB_ActivateEndpoint+0x20>
      wEpRegVal |= USB_EP_INTERRUPT;
 8003dd2:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8003dd6:	2000      	movs	r0, #0
      break;
 8003dd8:	e7b4      	b.n	8003d44 <USB_ActivateEndpoint+0x20>
      wEpRegVal |= USB_EP_CONTROL;
 8003dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8003dde:	2000      	movs	r0, #0
      break;
 8003de0:	e7b0      	b.n	8003d44 <USB_ActivateEndpoint+0x20>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003de2:	780c      	ldrb	r4, [r1, #0]
 8003de4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003de8:	4032      	ands	r2, r6
 8003dea:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8003dee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003df2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003df6:	780a      	ldrb	r2, [r1, #0]
 8003df8:	890c      	ldrh	r4, [r1, #8]
 8003dfa:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8003dfe:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8003e02:	0864      	lsrs	r4, r4, #1
 8003e04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e08:	0064      	lsls	r4, r4, #1
 8003e0a:	b2ad      	uxth	r5, r5
 8003e0c:	5354      	strh	r4, [r2, r5]
 8003e0e:	780a      	ldrb	r2, [r1, #0]
 8003e10:	894c      	ldrh	r4, [r1, #10]
 8003e12:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8003e16:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8003e1a:	0864      	lsrs	r4, r4, #1
 8003e1c:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8003e20:	0064      	lsls	r4, r4, #1
 8003e22:	b2ad      	uxth	r5, r5
 8003e24:	5354      	strh	r4, [r2, r5]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e26:	780c      	ldrb	r4, [r1, #0]
    if (ep->is_in == 0U)
 8003e28:	784a      	ldrb	r2, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e2a:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
    if (ep->is_in == 0U)
 8003e2e:	bb92      	cbnz	r2, 8003e96 <USB_ActivateEndpoint+0x172>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e30:	046d      	lsls	r5, r5, #17
 8003e32:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 8003e36:	d50b      	bpl.n	8003e50 <USB_ActivateEndpoint+0x12c>
 8003e38:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003e3c:	4016      	ands	r6, r2
 8003e3e:	f446 4640 	orr.w	r6, r6, #49152	; 0xc000
 8003e42:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 8003e46:	f823 6024 	strh.w	r6, [r3, r4, lsl #2]
 8003e4a:	780a      	ldrb	r2, [r1, #0]
 8003e4c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e50:	8814      	ldrh	r4, [r2, #0]
 8003e52:	0666      	lsls	r6, r4, #25
 8003e54:	d50c      	bpl.n	8003e70 <USB_ActivateEndpoint+0x14c>
 8003e56:	8814      	ldrh	r4, [r2, #0]
 8003e58:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8003e5c:	0524      	lsls	r4, r4, #20
 8003e5e:	0d24      	lsrs	r4, r4, #20
 8003e60:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8003e64:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8003e68:	8014      	strh	r4, [r2, #0]
 8003e6a:	780a      	ldrb	r2, [r1, #0]
 8003e6c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003e70:	f248 0580 	movw	r5, #32896	; 0x8080
 8003e74:	8816      	ldrh	r6, [r2, #0]
 8003e76:	4c5d      	ldr	r4, [pc, #372]	; (8003fec <USB_ActivateEndpoint+0x2c8>)
 8003e78:	4034      	ands	r4, r6
 8003e7a:	f484 5440 	eor.w	r4, r4, #12288	; 0x3000
 8003e7e:	432c      	orrs	r4, r5
 8003e80:	8014      	strh	r4, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e82:	7809      	ldrb	r1, [r1, #0]
 8003e84:	4a58      	ldr	r2, [pc, #352]	; (8003fe8 <USB_ActivateEndpoint+0x2c4>)
 8003e86:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
 8003e8a:	4022      	ands	r2, r4
 8003e8c:	4315      	orrs	r5, r2
 8003e8e:	f823 5021 	strh.w	r5, [r3, r1, lsl #2]
}
 8003e92:	bc70      	pop	{r4, r5, r6}
 8003e94:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e96:	046d      	lsls	r5, r5, #17
 8003e98:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 8003e9c:	d50b      	bpl.n	8003eb6 <USB_ActivateEndpoint+0x192>
 8003e9e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003ea2:	4016      	ands	r6, r2
 8003ea4:	f446 4640 	orr.w	r6, r6, #49152	; 0xc000
 8003ea8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 8003eac:	f823 6024 	strh.w	r6, [r3, r4, lsl #2]
 8003eb0:	780a      	ldrb	r2, [r1, #0]
 8003eb2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003eb6:	8814      	ldrh	r4, [r2, #0]
 8003eb8:	0664      	lsls	r4, r4, #25
 8003eba:	d50c      	bpl.n	8003ed6 <USB_ActivateEndpoint+0x1b2>
 8003ebc:	8814      	ldrh	r4, [r2, #0]
 8003ebe:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8003ec2:	0524      	lsls	r4, r4, #20
 8003ec4:	0d24      	lsrs	r4, r4, #20
 8003ec6:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8003eca:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8003ece:	8014      	strh	r4, [r2, #0]
 8003ed0:	780a      	ldrb	r2, [r1, #0]
 8003ed2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
      if (ep->type != EP_TYPE_ISOC)
 8003ed6:	78cc      	ldrb	r4, [r1, #3]
 8003ed8:	2c01      	cmp	r4, #1
 8003eda:	d05f      	beq.n	8003f9c <USB_ActivateEndpoint+0x278>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003edc:	8815      	ldrh	r5, [r2, #0]
 8003ede:	4c42      	ldr	r4, [pc, #264]	; (8003fe8 <USB_ActivateEndpoint+0x2c4>)
 8003ee0:	402c      	ands	r4, r5
 8003ee2:	f084 0420 	eor.w	r4, r4, #32
 8003ee6:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8003eea:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003eee:	8014      	strh	r4, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ef0:	7809      	ldrb	r1, [r1, #0]
}
 8003ef2:	bc70      	pop	{r4, r5, r6}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ef4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003ef8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003efc:	0492      	lsls	r2, r2, #18
 8003efe:	0c92      	lsrs	r2, r2, #18
 8003f00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f08:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
}
 8003f0c:	4770      	bx	lr
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f0e:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003f12:	690d      	ldr	r5, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f14:	4432      	add	r2, r6
 8003f16:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003f1a:	780a      	ldrb	r2, [r1, #0]
 8003f1c:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8003f20:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8003f24:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8003f28:	b2a4      	uxth	r4, r4
 8003f2a:	b365      	cbz	r5, 8003f86 <USB_ActivateEndpoint+0x262>
 8003f2c:	2d3e      	cmp	r5, #62	; 0x3e
 8003f2e:	d84b      	bhi.n	8003fc8 <USB_ActivateEndpoint+0x2a4>
 8003f30:	086e      	lsrs	r6, r5, #1
 8003f32:	07ed      	lsls	r5, r5, #31
 8003f34:	bf48      	it	mi
 8003f36:	3601      	addmi	r6, #1
 8003f38:	02b6      	lsls	r6, r6, #10
 8003f3a:	b2b6      	uxth	r6, r6
 8003f3c:	5316      	strh	r6, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f3e:	780c      	ldrb	r4, [r1, #0]
 8003f40:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8003f44:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 8003f48:	046e      	lsls	r6, r5, #17
 8003f4a:	d50e      	bpl.n	8003f6a <USB_ActivateEndpoint+0x246>
 8003f4c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003f50:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003f54:	0512      	lsls	r2, r2, #20
 8003f56:	0d12      	lsrs	r2, r2, #20
 8003f58:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003f5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f60:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8003f64:	780a      	ldrb	r2, [r1, #0]
 8003f66:	eb03 0282 	add.w	r2, r3, r2, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f6a:	8811      	ldrh	r1, [r2, #0]
 8003f6c:	4b1f      	ldr	r3, [pc, #124]	; (8003fec <USB_ActivateEndpoint+0x2c8>)
}
 8003f6e:	bc70      	pop	{r4, r5, r6}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f70:	400b      	ands	r3, r1
 8003f72:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f7e:	8013      	strh	r3, [r2, #0]
}
 8003f80:	4770      	bx	lr
      ret = HAL_ERROR;
 8003f82:	2001      	movs	r0, #1
 8003f84:	e6de      	b.n	8003d44 <USB_ActivateEndpoint+0x20>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003f86:	5b15      	ldrh	r5, [r2, r4]
 8003f88:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8003f8c:	042d      	lsls	r5, r5, #16
 8003f8e:	0c2d      	lsrs	r5, r5, #16
 8003f90:	5315      	strh	r5, [r2, r4]
 8003f92:	5b15      	ldrh	r5, [r2, r4]
 8003f94:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8003f98:	5315      	strh	r5, [r2, r4]
 8003f9a:	e7d0      	b.n	8003f3e <USB_ActivateEndpoint+0x21a>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f9c:	8814      	ldrh	r4, [r2, #0]
 8003f9e:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8003fa2:	0524      	lsls	r4, r4, #20
 8003fa4:	0d24      	lsrs	r4, r4, #20
 8003fa6:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8003faa:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8003fae:	8014      	strh	r4, [r2, #0]
 8003fb0:	e79e      	b.n	8003ef0 <USB_ActivateEndpoint+0x1cc>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fb2:	8823      	ldrh	r3, [r4, #0]
 8003fb4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003fb8:	051b      	lsls	r3, r3, #20
 8003fba:	0d1b      	lsrs	r3, r3, #20
 8003fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fc4:	8023      	strh	r3, [r4, #0]
 8003fc6:	e764      	b.n	8003e92 <USB_ActivateEndpoint+0x16e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003fc8:	096e      	lsrs	r6, r5, #5
 8003fca:	06ed      	lsls	r5, r5, #27
 8003fcc:	4d08      	ldr	r5, [pc, #32]	; (8003ff0 <USB_ActivateEndpoint+0x2cc>)
 8003fce:	bf08      	it	eq
 8003fd0:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8003fd4:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 8003fd8:	b2ad      	uxth	r5, r5
 8003fda:	5315      	strh	r5, [r2, r4]
 8003fdc:	e7af      	b.n	8003f3e <USB_ActivateEndpoint+0x21a>
 8003fde:	bf00      	nop
 8003fe0:	ffff898f 	.word	0xffff898f
 8003fe4:	ffff8f8f 	.word	0xffff8f8f
 8003fe8:	ffff8fbf 	.word	0xffff8fbf
 8003fec:	ffffbf8f 	.word	0xffffbf8f
 8003ff0:	ffff8000 	.word	0xffff8000

08003ff4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ff4:	b430      	push	{r4, r5}
 8003ff6:	780a      	ldrb	r2, [r1, #0]
  if (ep->doublebuffer == 0U)
 8003ff8:	7b0d      	ldrb	r5, [r1, #12]
 8003ffa:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8003ffe:	784c      	ldrb	r4, [r1, #1]
 8004000:	bb15      	cbnz	r5, 8004048 <USB_DeactivateEndpoint+0x54>
  {
    if (ep->is_in != 0U)
 8004002:	2c00      	cmp	r4, #0
 8004004:	f000 8099 	beq.w	800413a <USB_DeactivateEndpoint+0x146>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004008:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 800400c:	0664      	lsls	r4, r4, #25
 800400e:	d50e      	bpl.n	800402e <USB_DeactivateEndpoint+0x3a>
 8004010:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004014:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004018:	051b      	lsls	r3, r3, #20
 800401a:	0d1b      	lsrs	r3, r3, #20
 800401c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004020:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004024:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004028:	780b      	ldrb	r3, [r1, #0]
 800402a:	eb00 0383 	add.w	r3, r0, r3, lsl #2

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800402e:	881a      	ldrh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8004030:	2000      	movs	r0, #0
 8004032:	bc30      	pop	{r4, r5}
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004034:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004038:	0512      	lsls	r2, r2, #20
 800403a:	0d12      	lsrs	r2, r2, #20
 800403c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004040:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004044:	801a      	strh	r2, [r3, #0]
}
 8004046:	4770      	bx	lr
    if (ep->is_in == 0U)
 8004048:	2c00      	cmp	r4, #0
 800404a:	d141      	bne.n	80040d0 <USB_DeactivateEndpoint+0xdc>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800404c:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 8004050:	0464      	lsls	r4, r4, #17
 8004052:	d50e      	bpl.n	8004072 <USB_DeactivateEndpoint+0x7e>
 8004054:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004058:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800405c:	051b      	lsls	r3, r3, #20
 800405e:	0d1b      	lsrs	r3, r3, #20
 8004060:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004068:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800406c:	780b      	ldrb	r3, [r1, #0]
 800406e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004072:	881a      	ldrh	r2, [r3, #0]
 8004074:	0655      	lsls	r5, r2, #25
 8004076:	d50c      	bpl.n	8004092 <USB_DeactivateEndpoint+0x9e>
 8004078:	881a      	ldrh	r2, [r3, #0]
 800407a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800407e:	0512      	lsls	r2, r2, #20
 8004080:	0d12      	lsrs	r2, r2, #20
 8004082:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004086:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800408a:	801a      	strh	r2, [r3, #0]
 800408c:	780b      	ldrb	r3, [r1, #0]
 800408e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004092:	f248 0580 	movw	r5, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8004096:	881a      	ldrh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004098:	4c3f      	ldr	r4, [pc, #252]	; (8004198 <USB_DeactivateEndpoint+0x1a4>)
      PCD_TX_DTOG(USBx, ep->num);
 800409a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800409e:	0512      	lsls	r2, r2, #20
 80040a0:	0d12      	lsrs	r2, r2, #20
 80040a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040a6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80040aa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80040ac:	780a      	ldrb	r2, [r1, #0]
 80040ae:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80040b2:	4023      	ands	r3, r4
 80040b4:	432b      	orrs	r3, r5
 80040b6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040ba:	780a      	ldrb	r2, [r1, #0]
 80040bc:	4b37      	ldr	r3, [pc, #220]	; (800419c <USB_DeactivateEndpoint+0x1a8>)
 80040be:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 80040c2:	400b      	ands	r3, r1
 80040c4:	431d      	orrs	r5, r3
 80040c6:	f820 5022 	strh.w	r5, [r0, r2, lsl #2]
}
 80040ca:	2000      	movs	r0, #0
 80040cc:	bc30      	pop	{r4, r5}
 80040ce:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040d0:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 80040d4:	0464      	lsls	r4, r4, #17
 80040d6:	d50e      	bpl.n	80040f6 <USB_DeactivateEndpoint+0x102>
 80040d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80040dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040e0:	051b      	lsls	r3, r3, #20
 80040e2:	0d1b      	lsrs	r3, r3, #20
 80040e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80040f0:	780b      	ldrb	r3, [r1, #0]
 80040f2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80040f6:	881a      	ldrh	r2, [r3, #0]
 80040f8:	0652      	lsls	r2, r2, #25
 80040fa:	d43e      	bmi.n	800417a <USB_DeactivateEndpoint+0x186>
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040fc:	f248 0580 	movw	r5, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8004100:	881a      	ldrh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004102:	4c26      	ldr	r4, [pc, #152]	; (800419c <USB_DeactivateEndpoint+0x1a8>)
      PCD_RX_DTOG(USBx, ep->num);
 8004104:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004108:	0512      	lsls	r2, r2, #20
 800410a:	0d12      	lsrs	r2, r2, #20
 800410c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004110:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004114:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004116:	780a      	ldrb	r2, [r1, #0]
 8004118:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800411c:	4023      	ands	r3, r4
 800411e:	432b      	orrs	r3, r5
 8004120:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004124:	780a      	ldrb	r2, [r1, #0]
 8004126:	4b1c      	ldr	r3, [pc, #112]	; (8004198 <USB_DeactivateEndpoint+0x1a4>)
 8004128:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 800412c:	400b      	ands	r3, r1
 800412e:	431d      	orrs	r5, r3
 8004130:	f820 5022 	strh.w	r5, [r0, r2, lsl #2]
}
 8004134:	2000      	movs	r0, #0
 8004136:	bc30      	pop	{r4, r5}
 8004138:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800413a:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
 800413e:	0465      	lsls	r5, r4, #17
 8004140:	d50e      	bpl.n	8004160 <USB_DeactivateEndpoint+0x16c>
 8004142:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004146:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800414a:	051b      	lsls	r3, r3, #20
 800414c:	0d1b      	lsrs	r3, r3, #20
 800414e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004156:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800415a:	780b      	ldrb	r3, [r1, #0]
 800415c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004160:	881a      	ldrh	r2, [r3, #0]
}
 8004162:	2000      	movs	r0, #0
 8004164:	bc30      	pop	{r4, r5}
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004166:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800416a:	0492      	lsls	r2, r2, #18
 800416c:	0c92      	lsrs	r2, r2, #18
 800416e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004172:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004176:	801a      	strh	r2, [r3, #0]
}
 8004178:	4770      	bx	lr
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800417a:	881a      	ldrh	r2, [r3, #0]
 800417c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004180:	0512      	lsls	r2, r2, #20
 8004182:	0d12      	lsrs	r2, r2, #20
 8004184:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004188:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800418c:	801a      	strh	r2, [r3, #0]
 800418e:	780b      	ldrb	r3, [r1, #0]
 8004190:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004194:	e7b2      	b.n	80040fc <USB_DeactivateEndpoint+0x108>
 8004196:	bf00      	nop
 8004198:	ffffbf8f 	.word	0xffffbf8f
 800419c:	ffff8fbf 	.word	0xffff8fbf

080041a0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80041a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80041a2:	784b      	ldrb	r3, [r1, #1]
 80041a4:	7b0a      	ldrb	r2, [r1, #12]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d033      	beq.n	8004212 <USB_EPStartXfer+0x72>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80041aa:	b142      	cbz	r2, 80041be <USB_EPStartXfer+0x1e>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80041ac:	78ca      	ldrb	r2, [r1, #3]
 80041ae:	2a02      	cmp	r2, #2
 80041b0:	f000 80db 	beq.w	800436a <USB_EPStartXfer+0x1ca>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80041b4:	2a01      	cmp	r2, #1
 80041b6:	f000 80a6 	beq.w	8004306 <USB_EPStartXfer+0x166>
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
      }
      else
      {
        return HAL_ERROR;
 80041ba:	2001      	movs	r0, #1

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
  }

  return HAL_OK;
}
 80041bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (ep->xfer_len > ep->maxpacket)
 80041be:	698b      	ldr	r3, [r1, #24]
 80041c0:	690c      	ldr	r4, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80041c2:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
      if (ep->xfer_len > ep->maxpacket)
 80041c6:	42a3      	cmp	r3, r4
        ep->xfer_len -= len;
 80041c8:	bf84      	itt	hi
 80041ca:	1b1a      	subhi	r2, r3, r4
 80041cc:	4623      	movhi	r3, r4
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80041ce:	780c      	ldrb	r4, [r1, #0]
 80041d0:	618a      	str	r2, [r1, #24]
 80041d2:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 80041d6:	442a      	add	r2, r5
 80041d8:	0124      	lsls	r4, r4, #4
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 8085 	beq.w	80042ea <USB_EPStartXfer+0x14a>
 80041e0:	2b3e      	cmp	r3, #62	; 0x3e
 80041e2:	f200 8103 	bhi.w	80043ec <USB_EPStartXfer+0x24c>
 80041e6:	085d      	lsrs	r5, r3, #1
 80041e8:	07db      	lsls	r3, r3, #31
 80041ea:	bf48      	it	mi
 80041ec:	3501      	addmi	r5, #1
 80041ee:	02ad      	lsls	r5, r5, #10
 80041f0:	b2ad      	uxth	r5, r5
 80041f2:	52a5      	strh	r5, [r4, r2]
 80041f4:	780a      	ldrb	r2, [r1, #0]
 80041f6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80041fa:	8811      	ldrh	r1, [r2, #0]
 80041fc:	4bc1      	ldr	r3, [pc, #772]	; (8004504 <USB_EPStartXfer+0x364>)
  return HAL_OK;
 80041fe:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004200:	400b      	ands	r3, r1
 8004202:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800420a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800420e:	8013      	strh	r3, [r2, #0]
}
 8004210:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 8004212:	690f      	ldr	r7, [r1, #16]
 8004214:	e9d1 3405 	ldrd	r3, r4, [r1, #20]
 8004218:	42bc      	cmp	r4, r7
 800421a:	bf28      	it	cs
 800421c:	463c      	movcs	r4, r7
    if (ep->doublebuffer == 0U)
 800421e:	2a00      	cmp	r2, #0
 8004220:	d03a      	beq.n	8004298 <USB_EPStartXfer+0xf8>
      if (ep->type == EP_TYPE_BULK)
 8004222:	78cd      	ldrb	r5, [r1, #3]
 8004224:	780a      	ldrb	r2, [r1, #0]
 8004226:	2d02      	cmp	r5, #2
 8004228:	f000 80ee 	beq.w	8004408 <USB_EPStartXfer+0x268>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800422c:	f830 5022 	ldrh.w	r5, [r0, r2, lsl #2]
 8004230:	b2a6      	uxth	r6, r4
 8004232:	066d      	lsls	r5, r5, #25
 8004234:	ea4f 1202 	mov.w	r2, r2, lsl #4
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004238:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800423c:	f140 8168 	bpl.w	8004510 <USB_EPStartXfer+0x370>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004240:	f200 450c 	addw	r5, r0, #1036	; 0x40c
 8004244:	443d      	add	r5, r7
 8004246:	52ae      	strh	r6, [r5, r2]
          pmabuffer = ep->pmaaddr1;
 8004248:	894d      	ldrh	r5, [r1, #10]
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800424a:	b2a2      	uxth	r2, r4
 800424c:	3201      	adds	r2, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800424e:	f500 6480 	add.w	r4, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8004252:	0852      	lsrs	r2, r2, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004254:	eb04 0445 	add.w	r4, r4, r5, lsl #1
  for (i = n; i != 0U; i--)
 8004258:	d007      	beq.n	800426a <USB_EPStartXfer+0xca>
 800425a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800425e:	f833 5b02 	ldrh.w	r5, [r3], #2
  {
    temp1 = *pBuf;
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
    *pdwVal = (uint16_t)temp2;
 8004262:	f824 5b04 	strh.w	r5, [r4], #4
  for (i = n; i != 0U; i--)
 8004266:	42a2      	cmp	r2, r4
 8004268:	d1f9      	bne.n	800425e <USB_EPStartXfer+0xbe>
 800426a:	780c      	ldrb	r4, [r1, #0]
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800426c:	784b      	ldrb	r3, [r1, #1]
 800426e:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	f040 8136 	bne.w	80044e4 <USB_EPStartXfer+0x344>
 8004278:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800427c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004280:	051b      	lsls	r3, r3, #20
 8004282:	0d1b      	lsrs	r3, r3, #20
 8004284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004288:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800428c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8004290:	780a      	ldrb	r2, [r1, #0]
 8004292:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004296:	e01c      	b.n	80042d2 <USB_EPStartXfer+0x132>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004298:	b2a5      	uxth	r5, r4
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800429a:	88ce      	ldrh	r6, [r1, #6]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800429c:	3501      	adds	r5, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800429e:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  for (i = n; i != 0U; i--)
 80042a2:	086d      	lsrs	r5, r5, #1
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80042a4:	b2a4      	uxth	r4, r4
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80042a6:	eb02 0246 	add.w	r2, r2, r6, lsl #1
  for (i = n; i != 0U; i--)
 80042aa:	d007      	beq.n	80042bc <USB_EPStartXfer+0x11c>
 80042ac:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80042b0:	f833 6b02 	ldrh.w	r6, [r3], #2
    *pdwVal = (uint16_t)temp2;
 80042b4:	f822 6b04 	strh.w	r6, [r2], #4
  for (i = n; i != 0U; i--)
 80042b8:	42aa      	cmp	r2, r5
 80042ba:	d1f9      	bne.n	80042b0 <USB_EPStartXfer+0x110>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80042bc:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 80042c0:	780a      	ldrb	r2, [r1, #0]
 80042c2:	f200 4304 	addw	r3, r0, #1028	; 0x404
 80042c6:	0112      	lsls	r2, r2, #4
 80042c8:	442b      	add	r3, r5
 80042ca:	52d4      	strh	r4, [r2, r3]
 80042cc:	780a      	ldrb	r2, [r1, #0]
 80042ce:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80042d2:	8811      	ldrh	r1, [r2, #0]
 80042d4:	4b8c      	ldr	r3, [pc, #560]	; (8004508 <USB_EPStartXfer+0x368>)
  return HAL_OK;
 80042d6:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80042d8:	400b      	ands	r3, r1
 80042da:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80042de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e6:	8013      	strh	r3, [r2, #0]
}
 80042e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80042ea:	5aa3      	ldrh	r3, [r4, r2]
 80042ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042f0:	041b      	lsls	r3, r3, #16
 80042f2:	0c1b      	lsrs	r3, r3, #16
 80042f4:	52a3      	strh	r3, [r4, r2]
 80042f6:	5aa3      	ldrh	r3, [r4, r2]
 80042f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042fc:	52a3      	strh	r3, [r4, r2]
 80042fe:	780a      	ldrb	r2, [r1, #0]
 8004300:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004304:	e779      	b.n	80041fa <USB_EPStartXfer+0x5a>
        if (ep->xfer_len > ep->maxpacket)
 8004306:	698d      	ldr	r5, [r1, #24]
 8004308:	690a      	ldr	r2, [r1, #16]
 800430a:	4295      	cmp	r5, r2
          ep->xfer_len = 0U;
 800430c:	bf94      	ite	ls
 800430e:	2400      	movls	r4, #0
          ep->xfer_len -= len;
 8004310:	1aac      	subhi	r4, r5, r2
 8004312:	618c      	str	r4, [r1, #24]
 8004314:	bf88      	it	hi
 8004316:	4615      	movhi	r5, r2
 8004318:	780a      	ldrb	r2, [r1, #0]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800431a:	bb1b      	cbnz	r3, 8004364 <USB_EPStartXfer+0x1c4>
 800431c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004320:	f200 4404 	addw	r4, r0, #1028	; 0x404
 8004324:	0112      	lsls	r2, r2, #4
 8004326:	441c      	add	r4, r3
 8004328:	2d00      	cmp	r5, #0
 800432a:	f040 8156 	bne.w	80045da <USB_EPStartXfer+0x43a>
 800432e:	5aa3      	ldrh	r3, [r4, r2]
 8004330:	4e76      	ldr	r6, [pc, #472]	; (800450c <USB_EPStartXfer+0x36c>)
 8004332:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004336:	041b      	lsls	r3, r3, #16
 8004338:	0c1b      	lsrs	r3, r3, #16
 800433a:	52a3      	strh	r3, [r4, r2]
 800433c:	5aa3      	ldrh	r3, [r4, r2]
 800433e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004342:	52a3      	strh	r3, [r4, r2]
 8004344:	784b      	ldrb	r3, [r1, #1]
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 8132 	beq.w	80045b0 <USB_EPStartXfer+0x410>
 800434c:	2b01      	cmp	r3, #1
 800434e:	780a      	ldrb	r2, [r1, #0]
 8004350:	d108      	bne.n	8004364 <USB_EPStartXfer+0x1c4>
 8004352:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8004356:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 800435a:	0112      	lsls	r2, r2, #4
 800435c:	b2ab      	uxth	r3, r5
 800435e:	4434      	add	r4, r6
 8004360:	52a3      	strh	r3, [r4, r2]
 8004362:	780a      	ldrb	r2, [r1, #0]
 8004364:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004368:	e747      	b.n	80041fa <USB_EPStartXfer+0x5a>
 800436a:	780c      	ldrb	r4, [r1, #0]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800436c:	bb03      	cbnz	r3, 80043b0 <USB_EPStartXfer+0x210>
 800436e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004372:	690d      	ldr	r5, [r1, #16]
 8004374:	f200 4304 	addw	r3, r0, #1028	; 0x404
 8004378:	0124      	lsls	r4, r4, #4
 800437a:	4413      	add	r3, r2
 800437c:	2d00      	cmp	r5, #0
 800437e:	f000 80f5 	beq.w	800456c <USB_EPStartXfer+0x3cc>
 8004382:	2d3e      	cmp	r5, #62	; 0x3e
 8004384:	f200 8194 	bhi.w	80046b0 <USB_EPStartXfer+0x510>
 8004388:	086a      	lsrs	r2, r5, #1
 800438a:	07ee      	lsls	r6, r5, #31
 800438c:	bf48      	it	mi
 800438e:	3201      	addmi	r2, #1
 8004390:	0292      	lsls	r2, r2, #10
 8004392:	b292      	uxth	r2, r2
 8004394:	531a      	strh	r2, [r3, r4]
 8004396:	784b      	ldrb	r3, [r1, #1]
 8004398:	2b00      	cmp	r3, #0
 800439a:	f040 8197 	bne.w	80046cc <USB_EPStartXfer+0x52c>
 800439e:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 80043a2:	780b      	ldrb	r3, [r1, #0]
 80043a4:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 80043a8:	442c      	add	r4, r5
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	52e2      	strh	r2, [r4, r3]
 80043ae:	780c      	ldrb	r4, [r1, #0]
        if (ep->xfer_count != 0U)
 80043b0:	69cb      	ldr	r3, [r1, #28]
 80043b2:	00a5      	lsls	r5, r4, #2
 80043b4:	1942      	adds	r2, r0, r5
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f43f af1f 	beq.w	80041fa <USB_EPStartXfer+0x5a>
 80043bc:	f244 0640 	movw	r6, #16448	; 0x4040
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80043c0:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80043c4:	4033      	ands	r3, r6
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80043c6:	42b3      	cmp	r3, r6
 80043c8:	d002      	beq.n	80043d0 <USB_EPStartXfer+0x230>
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f47f af15 	bne.w	80041fa <USB_EPStartXfer+0x5a>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80043d0:	5b43      	ldrh	r3, [r0, r5]
 80043d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043d6:	051b      	lsls	r3, r3, #20
 80043d8:	0d1b      	lsrs	r3, r3, #20
 80043da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043e2:	5343      	strh	r3, [r0, r5]
 80043e4:	780a      	ldrb	r2, [r1, #0]
 80043e6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80043ea:	e706      	b.n	80041fa <USB_EPStartXfer+0x5a>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80043ec:	095d      	lsrs	r5, r3, #5
 80043ee:	06df      	lsls	r7, r3, #27
 80043f0:	4b46      	ldr	r3, [pc, #280]	; (800450c <USB_EPStartXfer+0x36c>)
 80043f2:	bf08      	it	eq
 80043f4:	f105 35ff 	addeq.w	r5, r5, #4294967295
 80043f8:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	52a3      	strh	r3, [r4, r2]
 8004400:	780a      	ldrb	r2, [r1, #0]
 8004402:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004406:	e6f8      	b.n	80041fa <USB_EPStartXfer+0x5a>
        if (ep->xfer_len_db > ep->maxpacket)
 8004408:	6a0d      	ldr	r5, [r1, #32]
 800440a:	42af      	cmp	r7, r5
 800440c:	f080 8086 	bcs.w	800451c <USB_EPStartXfer+0x37c>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004410:	f830 6022 	ldrh.w	r6, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 8004414:	1b2d      	subs	r5, r5, r4
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004416:	f426 76f8 	bic.w	r6, r6, #496	; 0x1f0
 800441a:	0536      	lsls	r6, r6, #20
 800441c:	0d36      	lsrs	r6, r6, #20
 800441e:	f446 4601 	orr.w	r6, r6, #33024	; 0x8100
 8004422:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 8004426:	f820 6022 	strh.w	r6, [r0, r2, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800442a:	780a      	ldrb	r2, [r1, #0]
          ep->xfer_len_db -= len;
 800442c:	620d      	str	r5, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800442e:	f830 6022 	ldrh.w	r6, [r0, r2, lsl #2]
 8004432:	f016 0f40 	tst.w	r6, #64	; 0x40
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004436:	784e      	ldrb	r6, [r1, #1]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004438:	f000 80e9 	beq.w	800460e <USB_EPStartXfer+0x46e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800443c:	2e00      	cmp	r6, #0
 800443e:	f040 816d 	bne.w	800471c <USB_EPStartXfer+0x57c>
 8004442:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8004446:	f200 460c 	addw	r6, r0, #1036	; 0x40c
 800444a:	0112      	lsls	r2, r2, #4
 800444c:	4466      	add	r6, ip
 800444e:	2c00      	cmp	r4, #0
 8004450:	f040 81e0 	bne.w	8004814 <USB_EPStartXfer+0x674>
 8004454:	f836 c002 	ldrh.w	ip, [r6, r2]
 8004458:	f42c 4cf8 	bic.w	ip, ip, #31744	; 0x7c00
 800445c:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8004460:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004464:	f826 c002 	strh.w	ip, [r6, r2]
 8004468:	f836 c002 	ldrh.w	ip, [r6, r2]
 800446c:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
 8004470:	f826 c002 	strh.w	ip, [r6, r2]
            if (ep->xfer_len_db > ep->maxpacket)
 8004474:	42af      	cmp	r7, r5
              ep->xfer_len_db = 0U;
 8004476:	bf28      	it	cs
 8004478:	2600      	movcs	r6, #0
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800447a:	784a      	ldrb	r2, [r1, #1]
              ep->xfer_len_db -= len;
 800447c:	bf38      	it	cc
 800447e:	1b2e      	subcc	r6, r5, r4
            ep->xfer_buff += len;
 8004480:	4423      	add	r3, r4
 8004482:	614b      	str	r3, [r1, #20]
 8004484:	bf38      	it	cc
 8004486:	4625      	movcc	r5, r4
 8004488:	620e      	str	r6, [r1, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800448a:	2a00      	cmp	r2, #0
 800448c:	f040 8176 	bne.w	800477c <USB_EPStartXfer+0x5dc>
 8004490:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004494:	780c      	ldrb	r4, [r1, #0]
 8004496:	f200 4604 	addw	r6, r0, #1028	; 0x404
 800449a:	4432      	add	r2, r6
 800449c:	0124      	lsls	r4, r4, #4
 800449e:	2d00      	cmp	r5, #0
 80044a0:	f000 815e 	beq.w	8004760 <USB_EPStartXfer+0x5c0>
 80044a4:	2d3e      	cmp	r5, #62	; 0x3e
 80044a6:	f200 81e0 	bhi.w	800486a <USB_EPStartXfer+0x6ca>
 80044aa:	086e      	lsrs	r6, r5, #1
 80044ac:	07ef      	lsls	r7, r5, #31
 80044ae:	bf48      	it	mi
 80044b0:	3601      	addmi	r6, #1
 80044b2:	02b6      	lsls	r6, r6, #10
 80044b4:	b2b6      	uxth	r6, r6
 80044b6:	52a6      	strh	r6, [r4, r2]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80044b8:	b2ad      	uxth	r5, r5
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80044ba:	890e      	ldrh	r6, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80044bc:	1c6c      	adds	r4, r5, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80044be:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  for (i = n; i != 0U; i--)
 80044c2:	0864      	lsrs	r4, r4, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80044c4:	eb02 0246 	add.w	r2, r2, r6, lsl #1
 80044c8:	bf18      	it	ne
 80044ca:	eb03 0444 	addne.w	r4, r3, r4, lsl #1
  for (i = n; i != 0U; i--)
 80044ce:	d005      	beq.n	80044dc <USB_EPStartXfer+0x33c>
 80044d0:	f833 5b02 	ldrh.w	r5, [r3], #2
 80044d4:	429c      	cmp	r4, r3
    *pdwVal = (uint16_t)temp2;
 80044d6:	f822 5b04 	strh.w	r5, [r2], #4
  for (i = n; i != 0U; i--)
 80044da:	d1f9      	bne.n	80044d0 <USB_EPStartXfer+0x330>
 80044dc:	780a      	ldrb	r2, [r1, #0]
 80044de:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80044e2:	e6f6      	b.n	80042d2 <USB_EPStartXfer+0x132>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	f47f aef4 	bne.w	80042d2 <USB_EPStartXfer+0x132>
 80044ea:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80044ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044f2:	051b      	lsls	r3, r3, #20
 80044f4:	0d1b      	lsrs	r3, r3, #20
 80044f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044fe:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8004502:	e7eb      	b.n	80044dc <USB_EPStartXfer+0x33c>
 8004504:	ffffbf8f 	.word	0xffffbf8f
 8004508:	ffff8fbf 	.word	0xffff8fbf
 800450c:	ffff8000 	.word	0xffff8000
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004510:	f200 4504 	addw	r5, r0, #1028	; 0x404
 8004514:	443d      	add	r5, r7
 8004516:	52ae      	strh	r6, [r5, r2]
          pmabuffer = ep->pmaaddr0;
 8004518:	890d      	ldrh	r5, [r1, #8]
 800451a:	e696      	b.n	800424a <USB_EPStartXfer+0xaa>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800451c:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004520:	f200 4604 	addw	r6, r0, #1028	; 0x404
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004524:	f424 74f8 	bic.w	r4, r4, #496	; 0x1f0
 8004528:	0524      	lsls	r4, r4, #20
 800452a:	0d24      	lsrs	r4, r4, #20
 800452c:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8004530:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8004534:	f820 4022 	strh.w	r4, [r0, r2, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004538:	4632      	mov	r2, r6
 800453a:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 800453e:	780c      	ldrb	r4, [r1, #0]
 8004540:	b2ae      	uxth	r6, r5
 8004542:	443a      	add	r2, r7
 8004544:	0124      	lsls	r4, r4, #4
 8004546:	52a6      	strh	r6, [r4, r2]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004548:	4632      	mov	r2, r6
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800454a:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800454c:	3201      	adds	r2, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800454e:	f500 6480 	add.w	r4, r0, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8004552:	0852      	lsrs	r2, r2, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004554:	eb04 0445 	add.w	r4, r4, r5, lsl #1
  for (i = n; i != 0U; i--)
 8004558:	d0c0      	beq.n	80044dc <USB_EPStartXfer+0x33c>
 800455a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800455e:	f833 5b02 	ldrh.w	r5, [r3], #2
 8004562:	4293      	cmp	r3, r2
    *pdwVal = (uint16_t)temp2;
 8004564:	f824 5b04 	strh.w	r5, [r4], #4
  for (i = n; i != 0U; i--)
 8004568:	d1f9      	bne.n	800455e <USB_EPStartXfer+0x3be>
 800456a:	e7b7      	b.n	80044dc <USB_EPStartXfer+0x33c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800456c:	5b1a      	ldrh	r2, [r3, r4]
 800456e:	4ec4      	ldr	r6, [pc, #784]	; (8004880 <USB_EPStartXfer+0x6e0>)
 8004570:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8004574:	0412      	lsls	r2, r2, #16
 8004576:	0c12      	lsrs	r2, r2, #16
 8004578:	531a      	strh	r2, [r3, r4]
 800457a:	5b1a      	ldrh	r2, [r3, r4]
 800457c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004580:	531a      	strh	r2, [r3, r4]
 8004582:	784b      	ldrb	r3, [r1, #1]
 8004584:	2b00      	cmp	r3, #0
 8004586:	f040 80a1 	bne.w	80046cc <USB_EPStartXfer+0x52c>
 800458a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800458e:	780a      	ldrb	r2, [r1, #0]
 8004590:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 8004594:	441c      	add	r4, r3
 8004596:	0112      	lsls	r2, r2, #4
 8004598:	5aa3      	ldrh	r3, [r4, r2]
 800459a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800459e:	041b      	lsls	r3, r3, #16
 80045a0:	0c1b      	lsrs	r3, r3, #16
 80045a2:	52a3      	strh	r3, [r4, r2]
 80045a4:	5aa3      	ldrh	r3, [r4, r2]
 80045a6:	4333      	orrs	r3, r6
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	52a3      	strh	r3, [r4, r2]
 80045ac:	780c      	ldrb	r4, [r1, #0]
 80045ae:	e6ff      	b.n	80043b0 <USB_EPStartXfer+0x210>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80045b0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80045b4:	780a      	ldrb	r2, [r1, #0]
 80045b6:	f200 440c 	addw	r4, r0, #1036	; 0x40c
 80045ba:	0112      	lsls	r2, r2, #4
 80045bc:	441c      	add	r4, r3
 80045be:	5aa3      	ldrh	r3, [r4, r2]
 80045c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045c4:	041b      	lsls	r3, r3, #16
 80045c6:	0c1b      	lsrs	r3, r3, #16
 80045c8:	52a3      	strh	r3, [r4, r2]
 80045ca:	5aa3      	ldrh	r3, [r4, r2]
 80045cc:	4333      	orrs	r3, r6
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	52a3      	strh	r3, [r4, r2]
 80045d2:	780a      	ldrb	r2, [r1, #0]
 80045d4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80045d8:	e60f      	b.n	80041fa <USB_EPStartXfer+0x5a>
 80045da:	2d3e      	cmp	r5, #62	; 0x3e
 80045dc:	f200 8084 	bhi.w	80046e8 <USB_EPStartXfer+0x548>
 80045e0:	086b      	lsrs	r3, r5, #1
 80045e2:	07ef      	lsls	r7, r5, #31
 80045e4:	bf48      	it	mi
 80045e6:	3301      	addmi	r3, #1
 80045e8:	029b      	lsls	r3, r3, #10
 80045ea:	b29e      	uxth	r6, r3
 80045ec:	52a6      	strh	r6, [r4, r2]
 80045ee:	784b      	ldrb	r3, [r1, #1]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f47f aeab 	bne.w	800434c <USB_EPStartXfer+0x1ac>
 80045f6:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 80045fa:	780a      	ldrb	r2, [r1, #0]
 80045fc:	f200 430c 	addw	r3, r0, #1036	; 0x40c
 8004600:	0112      	lsls	r2, r2, #4
 8004602:	4423      	add	r3, r4
 8004604:	52d6      	strh	r6, [r2, r3]
 8004606:	780a      	ldrb	r2, [r1, #0]
 8004608:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800460c:	e5f5      	b.n	80041fa <USB_EPStartXfer+0x5a>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800460e:	2e00      	cmp	r6, #0
 8004610:	f040 80ce 	bne.w	80047b0 <USB_EPStartXfer+0x610>
 8004614:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8004618:	f200 4604 	addw	r6, r0, #1028	; 0x404
 800461c:	0112      	lsls	r2, r2, #4
 800461e:	4466      	add	r6, ip
 8004620:	2c00      	cmp	r4, #0
 8004622:	f040 80e7 	bne.w	80047f4 <USB_EPStartXfer+0x654>
 8004626:	f836 c002 	ldrh.w	ip, [r6, r2]
 800462a:	f42c 4cf8 	bic.w	ip, ip, #31744	; 0x7c00
 800462e:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8004632:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004636:	f826 c002 	strh.w	ip, [r6, r2]
 800463a:	f836 c002 	ldrh.w	ip, [r6, r2]
 800463e:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
 8004642:	f826 c002 	strh.w	ip, [r6, r2]
            if (ep->xfer_len_db > ep->maxpacket)
 8004646:	42af      	cmp	r7, r5
              ep->xfer_len_db = 0U;
 8004648:	bf28      	it	cs
 800464a:	2600      	movcs	r6, #0
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800464c:	784a      	ldrb	r2, [r1, #1]
              ep->xfer_len_db -= len;
 800464e:	bf38      	it	cc
 8004650:	1b2e      	subcc	r6, r5, r4
            ep->xfer_buff += len;
 8004652:	4423      	add	r3, r4
 8004654:	614b      	str	r3, [r1, #20]
 8004656:	bf38      	it	cc
 8004658:	4625      	movcc	r5, r4
 800465a:	620e      	str	r6, [r1, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800465c:	2a00      	cmp	r2, #0
 800465e:	f040 809a 	bne.w	8004796 <USB_EPStartXfer+0x5f6>
 8004662:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004666:	780c      	ldrb	r4, [r1, #0]
 8004668:	f200 460c 	addw	r6, r0, #1036	; 0x40c
 800466c:	4432      	add	r2, r6
 800466e:	0124      	lsls	r4, r4, #4
 8004670:	2d00      	cmp	r5, #0
 8004672:	d075      	beq.n	8004760 <USB_EPStartXfer+0x5c0>
 8004674:	2d3e      	cmp	r5, #62	; 0x3e
 8004676:	f200 80dd 	bhi.w	8004834 <USB_EPStartXfer+0x694>
 800467a:	086e      	lsrs	r6, r5, #1
 800467c:	07ef      	lsls	r7, r5, #31
 800467e:	bf48      	it	mi
 8004680:	3601      	addmi	r6, #1
 8004682:	02b6      	lsls	r6, r6, #10
 8004684:	b2b6      	uxth	r6, r6
 8004686:	52a6      	strh	r6, [r4, r2]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004688:	b2ad      	uxth	r5, r5
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800468a:	894e      	ldrh	r6, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800468c:	1c6a      	adds	r2, r5, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800468e:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 8004692:	eb04 0446 	add.w	r4, r4, r6, lsl #1
  for (i = n; i != 0U; i--)
 8004696:	0852      	lsrs	r2, r2, #1
 8004698:	bf18      	it	ne
 800469a:	eb04 0282 	addne.w	r2, r4, r2, lsl #2
 800469e:	f43f af1d 	beq.w	80044dc <USB_EPStartXfer+0x33c>
 80046a2:	f833 5b02 	ldrh.w	r5, [r3], #2
    *pdwVal = (uint16_t)temp2;
 80046a6:	f824 5b04 	strh.w	r5, [r4], #4
  for (i = n; i != 0U; i--)
 80046aa:	4294      	cmp	r4, r2
 80046ac:	d1f9      	bne.n	80046a2 <USB_EPStartXfer+0x502>
 80046ae:	e715      	b.n	80044dc <USB_EPStartXfer+0x33c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80046b0:	096e      	lsrs	r6, r5, #5
 80046b2:	06ea      	lsls	r2, r5, #27
 80046b4:	4a72      	ldr	r2, [pc, #456]	; (8004880 <USB_EPStartXfer+0x6e0>)
 80046b6:	bf08      	it	eq
 80046b8:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80046bc:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 80046c0:	b292      	uxth	r2, r2
 80046c2:	531a      	strh	r2, [r3, r4]
 80046c4:	784b      	ldrb	r3, [r1, #1]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f43f ae69 	beq.w	800439e <USB_EPStartXfer+0x1fe>
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	780c      	ldrb	r4, [r1, #0]
 80046d0:	f47f ae6e 	bne.w	80043b0 <USB_EPStartXfer+0x210>
 80046d4:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 80046d8:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 80046dc:	0124      	lsls	r4, r4, #4
 80046de:	b2ab      	uxth	r3, r5
 80046e0:	4432      	add	r2, r6
 80046e2:	5313      	strh	r3, [r2, r4]
 80046e4:	780c      	ldrb	r4, [r1, #0]
 80046e6:	e663      	b.n	80043b0 <USB_EPStartXfer+0x210>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80046e8:	096b      	lsrs	r3, r5, #5
 80046ea:	06ee      	lsls	r6, r5, #27
 80046ec:	4e64      	ldr	r6, [pc, #400]	; (8004880 <USB_EPStartXfer+0x6e0>)
 80046ee:	bf08      	it	eq
 80046f0:	f103 33ff 	addeq.w	r3, r3, #4294967295
 80046f4:	ea46 2683 	orr.w	r6, r6, r3, lsl #10
 80046f8:	b2b6      	uxth	r6, r6
 80046fa:	52a6      	strh	r6, [r4, r2]
 80046fc:	784b      	ldrb	r3, [r1, #1]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f47f ae24 	bne.w	800434c <USB_EPStartXfer+0x1ac>
 8004704:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8004708:	780b      	ldrb	r3, [r1, #0]
 800470a:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 800470e:	4422      	add	r2, r4
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	52d6      	strh	r6, [r2, r3]
 8004714:	780a      	ldrb	r2, [r1, #0]
 8004716:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800471a:	e56e      	b.n	80041fa <USB_EPStartXfer+0x5a>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800471c:	2e01      	cmp	r6, #1
 800471e:	d109      	bne.n	8004734 <USB_EPStartXfer+0x594>
 8004720:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8004724:	f200 460c 	addw	r6, r0, #1036	; 0x40c
 8004728:	4466      	add	r6, ip
 800472a:	0112      	lsls	r2, r2, #4
 800472c:	fa1f fc84 	uxth.w	ip, r4
 8004730:	f826 c002 	strh.w	ip, [r6, r2]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004734:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004738:	b2a2      	uxth	r2, r4
 800473a:	3201      	adds	r2, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800473c:	f500 6680 	add.w	r6, r0, #1024	; 0x400
 8004740:	eb06 064c 	add.w	r6, r6, ip, lsl #1
  for (i = n; i != 0U; i--)
 8004744:	ea5f 0c52 	movs.w	ip, r2, lsr #1
 8004748:	f43f ae94 	beq.w	8004474 <USB_EPStartXfer+0x2d4>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800474c:	461a      	mov	r2, r3
 800474e:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8004752:	f832 eb02 	ldrh.w	lr, [r2], #2
  for (i = n; i != 0U; i--)
 8004756:	4594      	cmp	ip, r2
    *pdwVal = (uint16_t)temp2;
 8004758:	f826 eb04 	strh.w	lr, [r6], #4
  for (i = n; i != 0U; i--)
 800475c:	d1f9      	bne.n	8004752 <USB_EPStartXfer+0x5b2>
 800475e:	e689      	b.n	8004474 <USB_EPStartXfer+0x2d4>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004760:	5aa3      	ldrh	r3, [r4, r2]
 8004762:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004766:	041b      	lsls	r3, r3, #16
 8004768:	0c1b      	lsrs	r3, r3, #16
 800476a:	52a3      	strh	r3, [r4, r2]
 800476c:	5aa3      	ldrh	r3, [r4, r2]
 800476e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004772:	52a3      	strh	r3, [r4, r2]
 8004774:	780a      	ldrb	r2, [r1, #0]
 8004776:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800477a:	e5aa      	b.n	80042d2 <USB_EPStartXfer+0x132>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800477c:	2a01      	cmp	r2, #1
 800477e:	f47f ae9b 	bne.w	80044b8 <USB_EPStartXfer+0x318>
 8004782:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8004786:	780c      	ldrb	r4, [r1, #0]
 8004788:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800478c:	4432      	add	r2, r6
 800478e:	0124      	lsls	r4, r4, #4
 8004790:	b2ae      	uxth	r6, r5
 8004792:	52a6      	strh	r6, [r4, r2]
 8004794:	e690      	b.n	80044b8 <USB_EPStartXfer+0x318>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004796:	2a01      	cmp	r2, #1
 8004798:	f47f af76 	bne.w	8004688 <USB_EPStartXfer+0x4e8>
 800479c:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 80047a0:	780c      	ldrb	r4, [r1, #0]
 80047a2:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 80047a6:	4432      	add	r2, r6
 80047a8:	0124      	lsls	r4, r4, #4
 80047aa:	b2ae      	uxth	r6, r5
 80047ac:	52a6      	strh	r6, [r4, r2]
 80047ae:	e76b      	b.n	8004688 <USB_EPStartXfer+0x4e8>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80047b0:	2e01      	cmp	r6, #1
 80047b2:	d109      	bne.n	80047c8 <USB_EPStartXfer+0x628>
 80047b4:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 80047b8:	f200 4604 	addw	r6, r0, #1028	; 0x404
 80047bc:	4466      	add	r6, ip
 80047be:	0112      	lsls	r2, r2, #4
 80047c0:	fa1f fc84 	uxth.w	ip, r4
 80047c4:	f826 c002 	strh.w	ip, [r6, r2]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80047c8:	f8b1 c008 	ldrh.w	ip, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80047cc:	b2a2      	uxth	r2, r4
 80047ce:	3201      	adds	r2, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80047d0:	f500 6680 	add.w	r6, r0, #1024	; 0x400
 80047d4:	eb06 064c 	add.w	r6, r6, ip, lsl #1
  for (i = n; i != 0U; i--)
 80047d8:	ea5f 0c52 	movs.w	ip, r2, lsr #1
 80047dc:	f43f af33 	beq.w	8004646 <USB_EPStartXfer+0x4a6>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047e0:	461a      	mov	r2, r3
 80047e2:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80047e6:	f832 eb02 	ldrh.w	lr, [r2], #2
  for (i = n; i != 0U; i--)
 80047ea:	4562      	cmp	r2, ip
    *pdwVal = (uint16_t)temp2;
 80047ec:	f826 eb04 	strh.w	lr, [r6], #4
  for (i = n; i != 0U; i--)
 80047f0:	d1f9      	bne.n	80047e6 <USB_EPStartXfer+0x646>
 80047f2:	e728      	b.n	8004646 <USB_EPStartXfer+0x4a6>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80047f4:	2c3e      	cmp	r4, #62	; 0x3e
 80047f6:	d845      	bhi.n	8004884 <USB_EPStartXfer+0x6e4>
 80047f8:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 80047fc:	f014 0f01 	tst.w	r4, #1
 8004800:	bf18      	it	ne
 8004802:	f10c 0c01 	addne.w	ip, ip, #1
 8004806:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 800480a:	fa1f fc8c 	uxth.w	ip, ip
 800480e:	f826 c002 	strh.w	ip, [r6, r2]
 8004812:	e7d9      	b.n	80047c8 <USB_EPStartXfer+0x628>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004814:	2c3e      	cmp	r4, #62	; 0x3e
 8004816:	d818      	bhi.n	800484a <USB_EPStartXfer+0x6aa>
 8004818:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 800481c:	f014 0f01 	tst.w	r4, #1
 8004820:	bf18      	it	ne
 8004822:	f10c 0c01 	addne.w	ip, ip, #1
 8004826:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 800482a:	fa1f fc8c 	uxth.w	ip, ip
 800482e:	f826 c002 	strh.w	ip, [r6, r2]
 8004832:	e77f      	b.n	8004734 <USB_EPStartXfer+0x594>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004834:	096f      	lsrs	r7, r5, #5
 8004836:	06ee      	lsls	r6, r5, #27
 8004838:	4e11      	ldr	r6, [pc, #68]	; (8004880 <USB_EPStartXfer+0x6e0>)
 800483a:	bf08      	it	eq
 800483c:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8004840:	ea46 2687 	orr.w	r6, r6, r7, lsl #10
 8004844:	b2b6      	uxth	r6, r6
 8004846:	52a6      	strh	r6, [r4, r2]
 8004848:	e71e      	b.n	8004688 <USB_EPStartXfer+0x4e8>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800484a:	ea4f 1e54 	mov.w	lr, r4, lsr #5
 800484e:	f014 0f1f 	tst.w	r4, #31
 8004852:	f8df c02c 	ldr.w	ip, [pc, #44]	; 8004880 <USB_EPStartXfer+0x6e0>
 8004856:	bf08      	it	eq
 8004858:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 800485c:	ea4c 2c8e 	orr.w	ip, ip, lr, lsl #10
 8004860:	fa1f fc8c 	uxth.w	ip, ip
 8004864:	f826 c002 	strh.w	ip, [r6, r2]
 8004868:	e764      	b.n	8004734 <USB_EPStartXfer+0x594>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800486a:	096f      	lsrs	r7, r5, #5
 800486c:	06ee      	lsls	r6, r5, #27
 800486e:	4e04      	ldr	r6, [pc, #16]	; (8004880 <USB_EPStartXfer+0x6e0>)
 8004870:	bf08      	it	eq
 8004872:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8004876:	ea46 2687 	orr.w	r6, r6, r7, lsl #10
 800487a:	b2b6      	uxth	r6, r6
 800487c:	52a6      	strh	r6, [r4, r2]
 800487e:	e61b      	b.n	80044b8 <USB_EPStartXfer+0x318>
 8004880:	ffff8000 	.word	0xffff8000
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004884:	ea4f 1e54 	mov.w	lr, r4, lsr #5
 8004888:	f014 0f1f 	tst.w	r4, #31
 800488c:	f8df c014 	ldr.w	ip, [pc, #20]	; 80048a4 <USB_EPStartXfer+0x704>
 8004890:	bf08      	it	eq
 8004892:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 8004896:	ea4c 2c8e 	orr.w	ip, ip, lr, lsl #10
 800489a:	fa1f fc8c 	uxth.w	ip, ip
 800489e:	f826 c002 	strh.w	ip, [r6, r2]
 80048a2:	e791      	b.n	80047c8 <USB_EPStartXfer+0x628>
 80048a4:	ffff8000 	.word	0xffff8000

080048a8 <USB_EPSetStall>:
  if (ep->is_in != 0U)
 80048a8:	784b      	ldrb	r3, [r1, #1]
 80048aa:	780a      	ldrb	r2, [r1, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80048ac:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
  if (ep->is_in != 0U)
 80048b0:	b95b      	cbnz	r3, 80048ca <USB_EPSetStall+0x22>
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80048b2:	4b0c      	ldr	r3, [pc, #48]	; (80048e4 <USB_EPSetStall+0x3c>)
 80048b4:	400b      	ands	r3, r1
 80048b6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80048ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048c2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80048c6:	2000      	movs	r0, #0
 80048c8:	4770      	bx	lr
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80048ca:	4b07      	ldr	r3, [pc, #28]	; (80048e8 <USB_EPSetStall+0x40>)
 80048cc:	400b      	ands	r3, r1
 80048ce:	f083 0310 	eor.w	r3, r3, #16
 80048d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048da:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80048de:	2000      	movs	r0, #0
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	ffffbf8f 	.word	0xffffbf8f
 80048e8:	ffff8fbf 	.word	0xffff8fbf

080048ec <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 80048ec:	7b0b      	ldrb	r3, [r1, #12]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d139      	bne.n	8004966 <USB_EPClearStall+0x7a>
{
 80048f2:	b410      	push	{r4}
 80048f4:	780b      	ldrb	r3, [r1, #0]
    if (ep->is_in != 0U)
 80048f6:	784c      	ldrb	r4, [r1, #1]
 80048f8:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 80048fc:	b314      	cbz	r4, 8004944 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048fe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004902:	0652      	lsls	r2, r2, #25
 8004904:	d50b      	bpl.n	800491e <USB_EPClearStall+0x32>
 8004906:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800490a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800490e:	0512      	lsls	r2, r2, #20
 8004910:	0d12      	lsrs	r2, r2, #20
 8004912:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004916:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800491a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800491e:	78cb      	ldrb	r3, [r1, #3]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d01d      	beq.n	8004960 <USB_EPClearStall+0x74>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004924:	780a      	ldrb	r2, [r1, #0]
 8004926:	4b19      	ldr	r3, [pc, #100]	; (800498c <USB_EPClearStall+0xa0>)
 8004928:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
}
 800492c:	bc10      	pop	{r4}
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800492e:	400b      	ands	r3, r1
 8004930:	f083 0320 	eor.w	r3, r3, #32
 8004934:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800493c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8004940:	2000      	movs	r0, #0
 8004942:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004944:	f830 4023 	ldrh.w	r4, [r0, r3, lsl #2]
 8004948:	0464      	lsls	r4, r4, #17
 800494a:	d40e      	bmi.n	800496a <USB_EPClearStall+0x7e>
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800494c:	8811      	ldrh	r1, [r2, #0]
 800494e:	4b10      	ldr	r3, [pc, #64]	; (8004990 <USB_EPClearStall+0xa4>)
 8004950:	400b      	ands	r3, r1
 8004952:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800495a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800495e:	8013      	strh	r3, [r2, #0]
}
 8004960:	2000      	movs	r0, #0
 8004962:	bc10      	pop	{r4}
 8004964:	4770      	bx	lr
 8004966:	2000      	movs	r0, #0
 8004968:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800496a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800496e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004972:	0512      	lsls	r2, r2, #20
 8004974:	0d12      	lsrs	r2, r2, #20
 8004976:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800497a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800497e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8004982:	780a      	ldrb	r2, [r1, #0]
 8004984:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004988:	e7e0      	b.n	800494c <USB_EPClearStall+0x60>
 800498a:	bf00      	nop
 800498c:	ffff8fbf 	.word	0xffff8fbf
 8004990:	ffffbf8f 	.word	0xffffbf8f

08004994 <USB_SetDevAddress>:
  if (address == 0U)
 8004994:	b911      	cbnz	r1, 800499c <USB_SetDevAddress+0x8>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004996:	2380      	movs	r3, #128	; 0x80
 8004998:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 800499c:	2000      	movs	r0, #0
 800499e:	4770      	bx	lr

080049a0 <USB_DevConnect>:
 80049a0:	2000      	movs	r0, #0
 80049a2:	4770      	bx	lr

080049a4 <USB_DevDisconnect>:
 80049a4:	2000      	movs	r0, #0
 80049a6:	4770      	bx	lr

080049a8 <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 80049a8:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop

080049b0 <USB_EP0_OutStart>:
}
 80049b0:	2000      	movs	r0, #0
 80049b2:	4770      	bx	lr

080049b4 <USB_WritePMA>:
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80049b4:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80049b6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0U; i--)
 80049ba:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80049bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 80049c0:	d007      	beq.n	80049d2 <USB_WritePMA+0x1e>
 80049c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80049c6:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 80049ca:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0U; i--)
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d1f9      	bne.n	80049c6 <USB_WritePMA+0x12>
    pdwVal++;
#endif

    pBuf++;
  }
}
 80049d2:	4770      	bx	lr

080049d4 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80049d4:	eb00 0242 	add.w	r2, r0, r2, lsl #1

  for (i = n; i != 0U; i--)
 80049d8:	0858      	lsrs	r0, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80049da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 80049de:	d01a      	beq.n	8004a16 <USB_ReadPMA+0x42>
{
 80049e0:	b4f0      	push	{r4, r5, r6, r7}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80049e2:	4617      	mov	r7, r2
  for (i = n; i != 0U; i--)
 80049e4:	4606      	mov	r6, r0
 80049e6:	1c8d      	adds	r5, r1, #2
  {
    temp = *(__IO uint16_t *)pdwVal;
 80049e8:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 80049ec:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 80049ee:	b2a4      	uxth	r4, r4
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80049f0:	ea4f 2c14 	mov.w	ip, r4, lsr #8
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80049f4:	f805 4c02 	strb.w	r4, [r5, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80049f8:	f805 cc01 	strb.w	ip, [r5, #-1]
 80049fc:	f105 0502 	add.w	r5, r5, #2
  for (i = n; i != 0U; i--)
 8004a00:	d1f2      	bne.n	80049e8 <USB_ReadPMA+0x14>
  if ((wNBytes % 2U) != 0U)
  {
    temp = *pdwVal;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
  }
}
 8004a02:	bcf0      	pop	{r4, r5, r6, r7}
 8004a04:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8004a08:	eb02 0280 	add.w	r2, r2, r0, lsl #2
  if ((wNBytes % 2U) != 0U)
 8004a0c:	07d8      	lsls	r0, r3, #31
    temp = *pdwVal;
 8004a0e:	bf44      	itt	mi
 8004a10:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004a12:	700b      	strbmi	r3, [r1, #0]
}
 8004a14:	4770      	bx	lr
  if ((wNBytes % 2U) != 0U)
 8004a16:	07db      	lsls	r3, r3, #31
    temp = *pdwVal;
 8004a18:	bf44      	itt	mi
 8004a1a:	8813      	ldrhmi	r3, [r2, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004a1c:	700b      	strbmi	r3, [r1, #0]
 8004a1e:	4770      	bx	lr

08004a20 <LL_mDelay>:
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004a20:	4b07      	ldr	r3, [pc, #28]	; (8004a40 <LL_mDelay+0x20>)
{
 8004a22:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004a24:	681b      	ldr	r3, [r3, #0]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8004a26:	1c42      	adds	r2, r0, #1
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004a28:	9301      	str	r3, [sp, #4]
  ((void)tmp);
 8004a2a:	9b01      	ldr	r3, [sp, #4]
    Delay++;
  }

  while (Delay)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004a2c:	4a04      	ldr	r2, [pc, #16]	; (8004a40 <LL_mDelay+0x20>)
    Delay++;
 8004a2e:	bf18      	it	ne
 8004a30:	3001      	addne	r0, #1
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004a32:	6813      	ldr	r3, [r2, #0]
 8004a34:	03db      	lsls	r3, r3, #15
 8004a36:	d5fc      	bpl.n	8004a32 <LL_mDelay+0x12>
  while (Delay)
 8004a38:	3801      	subs	r0, #1
 8004a3a:	d1fa      	bne.n	8004a32 <LL_mDelay+0x12>
    {
      Delay--;
    }
  }
}
 8004a3c:	b002      	add	sp, #8
 8004a3e:	4770      	bx	lr
 8004a40:	e000e010 	.word	0xe000e010

08004a44 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004a44:	4b01      	ldr	r3, [pc, #4]	; (8004a4c <LL_SetSystemCoreClock+0x8>)
 8004a46:	6018      	str	r0, [r3, #0]
}
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	20000008 	.word	0x20000008

08004a50 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004a50:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8004a54:	b183      	cbz	r3, 8004a78 <USBD_CDC_EP0_RxReady+0x28>
{
 8004a56:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004a58:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004a5c:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8004a60:	28ff      	cmp	r0, #255	; 0xff
 8004a62:	d007      	beq.n	8004a74 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8004a6a:	4621      	mov	r1, r4
 8004a6c:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8004a6e:	23ff      	movs	r3, #255	; 0xff
 8004a70:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8004a74:	2000      	movs	r0, #0
 8004a76:	bd10      	pop	{r4, pc}
 8004a78:	2000      	movs	r0, #0
 8004a7a:	4770      	bx	lr

08004a7c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004a7c:	2343      	movs	r3, #67	; 0x43
 8004a7e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8004a80:	4800      	ldr	r0, [pc, #0]	; (8004a84 <USBD_CDC_GetFSCfgDesc+0x8>)
 8004a82:	4770      	bx	lr
 8004a84:	2000004c 	.word	0x2000004c

08004a88 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004a88:	2343      	movs	r3, #67	; 0x43
 8004a8a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8004a8c:	4800      	ldr	r0, [pc, #0]	; (8004a90 <USBD_CDC_GetHSCfgDesc+0x8>)
 8004a8e:	4770      	bx	lr
 8004a90:	20000090 	.word	0x20000090

08004a94 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004a94:	2343      	movs	r3, #67	; 0x43
 8004a96:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8004a98:	4800      	ldr	r0, [pc, #0]	; (8004a9c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8004a9a:	4770      	bx	lr
 8004a9c:	200000e0 	.word	0x200000e0

08004aa0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004aa0:	230a      	movs	r3, #10
 8004aa2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8004aa4:	4800      	ldr	r0, [pc, #0]	; (8004aa8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8004aa6:	4770      	bx	lr
 8004aa8:	200000d4 	.word	0x200000d4

08004aac <USBD_CDC_DataOut>:
{
 8004aac:	b538      	push	{r3, r4, r5, lr}
 8004aae:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004ab0:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004ab4:	f000 ffe2 	bl	8005a7c <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8004ab8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004abc:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8004ac0:	b14b      	cbz	r3, 8004ad6 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004ac2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8004ac6:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8004ad0:	4798      	blx	r3
    return USBD_OK;
 8004ad2:	2000      	movs	r0, #0
}
 8004ad4:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8004ad6:	2002      	movs	r0, #2
}
 8004ad8:	bd38      	pop	{r3, r4, r5, pc}
 8004ada:	bf00      	nop

08004adc <USBD_CDC_DataIn>:
{
 8004adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004ade:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8004ae2:	b1d5      	cbz	r5, 8004b1a <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004ae4:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8004ae8:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 8004aec:	69fe      	ldr	r6, [r7, #28]
 8004aee:	b14e      	cbz	r6, 8004b04 <USBD_CDC_DataIn+0x28>
 8004af0:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 8004af4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afa:	fbb6 f4f3 	udiv	r4, r6, r3
 8004afe:	fb03 6414 	mls	r4, r3, r4, r6
 8004b02:	b11c      	cbz	r4, 8004b0c <USBD_CDC_DataIn+0x30>
      hcdc->TxState = 0U;
 8004b04:	2000      	movs	r0, #0
 8004b06:	f8c5 0214 	str.w	r0, [r5, #532]	; 0x214
}
 8004b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pdev->ep_in[epnum].total_length = 0U;
 8004b0c:	61fc      	str	r4, [r7, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004b0e:	4623      	mov	r3, r4
 8004b10:	4622      	mov	r2, r4
 8004b12:	f000 ff97 	bl	8005a44 <USBD_LL_Transmit>
    return USBD_OK;
 8004b16:	4620      	mov	r0, r4
}
 8004b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 8004b1a:	2002      	movs	r0, #2
}
 8004b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b1e:	bf00      	nop

08004b20 <USBD_CDC_Setup>:
{
 8004b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t ifalt = 0U;
 8004b24:	2700      	movs	r7, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b26:	780b      	ldrb	r3, [r1, #0]
{
 8004b28:	b082      	sub	sp, #8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b2a:	f013 0460 	ands.w	r4, r3, #96	; 0x60
{
 8004b2e:	460d      	mov	r5, r1
 8004b30:	4606      	mov	r6, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004b32:	f8d0 82b8 	ldr.w	r8, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8004b36:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 8004b3a:	f8ad 7006 	strh.w	r7, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b3e:	d00f      	beq.n	8004b60 <USBD_CDC_Setup+0x40>
 8004b40:	2c20      	cmp	r4, #32
 8004b42:	d117      	bne.n	8004b74 <USBD_CDC_Setup+0x54>
      if (req->wLength)
 8004b44:	88cc      	ldrh	r4, [r1, #6]
 8004b46:	f891 c001 	ldrb.w	ip, [r1, #1]
 8004b4a:	bb64      	cbnz	r4, 8004ba6 <USBD_CDC_Setup+0x86>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004b4c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8004b50:	4622      	mov	r2, r4
 8004b52:	4660      	mov	r0, ip
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 8004b58:	4620      	mov	r0, r4
}
 8004b5a:	b002      	add	sp, #8
 8004b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      switch (req->bRequest)
 8004b60:	784f      	ldrb	r7, [r1, #1]
 8004b62:	2f0a      	cmp	r7, #10
 8004b64:	d014      	beq.n	8004b90 <USBD_CDC_Setup+0x70>
 8004b66:	2f0b      	cmp	r7, #11
 8004b68:	d00c      	beq.n	8004b84 <USBD_CDC_Setup+0x64>
 8004b6a:	b91f      	cbnz	r7, 8004b74 <USBD_CDC_Setup+0x54>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b6c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004b70:	2b03      	cmp	r3, #3
 8004b72:	d028      	beq.n	8004bc6 <USBD_CDC_Setup+0xa6>
          USBD_CtlError(pdev, req);
 8004b74:	4630      	mov	r0, r6
 8004b76:	4629      	mov	r1, r5
 8004b78:	f000 fc9e 	bl	80054b8 <USBD_CtlError>
          ret = USBD_FAIL;
 8004b7c:	2002      	movs	r0, #2
}
 8004b7e:	b002      	add	sp, #8
 8004b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004b84:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004b88:	2b03      	cmp	r3, #3
 8004b8a:	d1f3      	bne.n	8004b74 <USBD_CDC_Setup+0x54>
  uint8_t ret = USBD_OK;
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	e7f6      	b.n	8004b7e <USBD_CDC_Setup+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b90:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004b94:	2b03      	cmp	r3, #3
 8004b96:	d1ed      	bne.n	8004b74 <USBD_CDC_Setup+0x54>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f10d 0105 	add.w	r1, sp, #5
 8004b9e:	f000 fcbd 	bl	800551c <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	e7eb      	b.n	8004b7e <USBD_CDC_Setup+0x5e>
        if (req->bmRequest & 0x80U)
 8004ba6:	061b      	lsls	r3, r3, #24
 8004ba8:	d514      	bpl.n	8004bd4 <USBD_CDC_Setup+0xb4>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004baa:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8004bae:	4622      	mov	r2, r4
 8004bb0:	4660      	mov	r0, ip
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	4641      	mov	r1, r8
 8004bb6:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004bb8:	88ea      	ldrh	r2, [r5, #6]
 8004bba:	4641      	mov	r1, r8
 8004bbc:	4630      	mov	r0, r6
 8004bbe:	f000 fcad 	bl	800551c <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8004bc2:	4638      	mov	r0, r7
 8004bc4:	e7db      	b.n	8004b7e <USBD_CDC_Setup+0x5e>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	f10d 0106 	add.w	r1, sp, #6
 8004bcc:	f000 fca6 	bl	800551c <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8004bd0:	4638      	mov	r0, r7
 8004bd2:	e7d4      	b.n	8004b7e <USBD_CDC_Setup+0x5e>
          hcdc->CmdOpCode = req->bRequest;
 8004bd4:	f888 c200 	strb.w	ip, [r8, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004bd8:	f888 4201 	strb.w	r4, [r8, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004bdc:	4622      	mov	r2, r4
 8004bde:	4641      	mov	r1, r8
 8004be0:	f000 fcb2 	bl	8005548 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8004be4:	4638      	mov	r0, r7
 8004be6:	e7ca      	b.n	8004b7e <USBD_CDC_Setup+0x5e>

08004be8 <USBD_CDC_DeInit>:
{
 8004be8:	b538      	push	{r3, r4, r5, lr}
 8004bea:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004bec:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004bee:	2181      	movs	r1, #129	; 0x81
 8004bf0:	f000 fedc 	bl	80059ac <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004bf4:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004bf6:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f000 fed7 	bl	80059ac <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004bfe:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004c02:	4620      	mov	r0, r4
 8004c04:	2182      	movs	r1, #130	; 0x82
 8004c06:	f000 fed1 	bl	80059ac <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8004c0a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004c0e:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8004c10:	b14b      	cbz	r3, 8004c26 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004c12:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004c1a:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8004c1e:	f000 ff35 	bl	8005a8c <USBD_static_free>
    pdev->pClassData = NULL;
 8004c22:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8004c26:	2000      	movs	r0, #0
 8004c28:	bd38      	pop	{r3, r4, r5, pc}
 8004c2a:	bf00      	nop

08004c2c <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c2c:	7c03      	ldrb	r3, [r0, #16]
{
 8004c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c32:	4604      	mov	r4, r0
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004c34:	2501      	movs	r5, #1
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c36:	bbbb      	cbnz	r3, 8004ca8 <USBD_CDC_Init+0x7c>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004c38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	2181      	movs	r1, #129	; 0x81
 8004c40:	f000 fea4 	bl	800598c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004c44:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004c46:	4629      	mov	r1, r5
 8004c48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	4620      	mov	r0, r4
 8004c50:	f000 fe9c 	bl	800598c <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004c54:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004c58:	2701      	movs	r7, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004c5a:	2308      	movs	r3, #8
 8004c5c:	2203      	movs	r2, #3
 8004c5e:	2182      	movs	r1, #130	; 0x82
 8004c60:	4620      	mov	r0, r4
 8004c62:	f000 fe93 	bl	800598c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004c66:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004c68:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004c6c:	f000 ff0a 	bl	8005a84 <USBD_static_malloc>
 8004c70:	4605      	mov	r5, r0
 8004c72:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8004c76:	b368      	cbz	r0, 8004cd4 <USBD_CDC_Init+0xa8>
    hcdc->TxState = 0U;
 8004c78:	2600      	movs	r6, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004c7a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c82:	f894 8010 	ldrb.w	r8, [r4, #16]
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004c86:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
    hcdc->TxState = 0U;
 8004c8a:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004c8e:	4639      	mov	r1, r7
    hcdc->RxState = 0U;
 8004c90:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004c94:	4620      	mov	r0, r4
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c96:	f1b8 0f00 	cmp.w	r8, #0
 8004c9a:	d014      	beq.n	8004cc6 <USBD_CDC_Init+0x9a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004c9c:	2340      	movs	r3, #64	; 0x40
 8004c9e:	f000 fedf 	bl	8005a60 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8004ca2:	4630      	mov	r0, r6
}
 8004ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004ca8:	2340      	movs	r3, #64	; 0x40
 8004caa:	2202      	movs	r2, #2
 8004cac:	2181      	movs	r1, #129	; 0x81
 8004cae:	f000 fe6d 	bl	800598c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004cb2:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004cb4:	4629      	mov	r1, r5
 8004cb6:	2340      	movs	r3, #64	; 0x40
 8004cb8:	2202      	movs	r2, #2
 8004cba:	4620      	mov	r0, r4
 8004cbc:	f000 fe66 	bl	800598c <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004cc0:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
 8004cc4:	e7c8      	b.n	8004c58 <USBD_CDC_Init+0x2c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004cc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cca:	f000 fec9 	bl	8005a60 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8004cce:	4640      	mov	r0, r8
}
 8004cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 8004cd4:	4638      	mov	r0, r7
 8004cd6:	e7e5      	b.n	8004ca4 <USBD_CDC_Init+0x78>

08004cd8 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8004cd8:	b119      	cbz	r1, 8004ce2 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8004cda:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8004cde:	2000      	movs	r0, #0
 8004ce0:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8004ce2:	2002      	movs	r0, #2
  }

  return ret;
}
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop

08004ce8 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004ce8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8004cec:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8004cee:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004cf2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8004cf6:	4770      	bx	lr

08004cf8 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8004cf8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8004cfc:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8004cfe:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8004d02:	4770      	bx	lr

08004d04 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004d04:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  if (pdev->pClassData != NULL)
 8004d08:	b19a      	cbz	r2, 8004d32 <USBD_CDC_TransmitPacket+0x2e>
{
 8004d0a:	b538      	push	{r3, r4, r5, lr}
  {
    if (hcdc->TxState == 0U)
 8004d0c:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8004d10:	b10c      	cbz	r4, 8004d16 <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8004d12:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8004d14:	bd38      	pop	{r3, r4, r5, pc}
      hcdc->TxState = 1U;
 8004d16:	2501      	movs	r5, #1
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004d18:	f8d2 1210 	ldr.w	r1, [r2, #528]	; 0x210
      hcdc->TxState = 1U;
 8004d1c:	f8c2 5214 	str.w	r5, [r2, #532]	; 0x214
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004d20:	b28b      	uxth	r3, r1
 8004d22:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004d26:	6301      	str	r1, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004d28:	2181      	movs	r1, #129	; 0x81
 8004d2a:	f000 fe8b 	bl	8005a44 <USBD_LL_Transmit>
      return USBD_OK;
 8004d2e:	4620      	mov	r0, r4
}
 8004d30:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8004d32:	2002      	movs	r0, #2
}
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop

08004d38 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004d38:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004d3c:	b18a      	cbz	r2, 8004d62 <USBD_CDC_ReceivePacket+0x2a>
{
 8004d3e:	b510      	push	{r4, lr}
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d40:	7c04      	ldrb	r4, [r0, #16]
 8004d42:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8004d46:	b12c      	cbz	r4, 8004d54 <USBD_CDC_ReceivePacket+0x1c>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004d48:	2340      	movs	r3, #64	; 0x40
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	f000 fe88 	bl	8005a60 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004d50:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8004d52:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8004d54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d58:	2101      	movs	r1, #1
 8004d5a:	f000 fe81 	bl	8005a60 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8004d5e:	4620      	mov	r0, r4
}
 8004d60:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8004d62:	2002      	movs	r0, #2
}
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop

08004d68 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004d68:	b188      	cbz	r0, 8004d8e <USBD_Init+0x26>
{
 8004d6a:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004d6c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004d70:	b113      	cbz	r3, 8004d78 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8004d72:	2300      	movs	r3, #0
 8004d74:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004d78:	b109      	cbz	r1, 8004d7e <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8004d7a:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d7e:	2301      	movs	r3, #1
  pdev->id = id;
 8004d80:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d82:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004d86:	f000 fdb1 	bl	80058ec <USBD_LL_Init>

  return USBD_OK;
 8004d8a:	2000      	movs	r0, #0
}
 8004d8c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8004d8e:	2002      	movs	r0, #2
}
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop

08004d94 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8004d94:	b119      	cbz	r1, 8004d9e <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004d96:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004d9e:	2002      	movs	r0, #2
  }

  return status;
}
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop

08004da4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004da4:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004da6:	f000 fde3 	bl	8005970 <USBD_LL_Start>

  return USBD_OK;
}
 8004daa:	2000      	movs	r0, #0
 8004dac:	bd08      	pop	{r3, pc}
 8004dae:	bf00      	nop

08004db0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004db0:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8004db2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004db6:	b11b      	cbz	r3, 8004dc0 <USBD_SetClassConfig+0x10>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4798      	blx	r3
 8004dbc:	b900      	cbnz	r0, 8004dc0 <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8004dbe:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004dc0:	2002      	movs	r0, #2
}
 8004dc2:	bd08      	pop	{r3, pc}

08004dc4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004dc4:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004dc6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	4798      	blx	r3

  return USBD_OK;
}
 8004dce:	2000      	movs	r0, #0
 8004dd0:	bd08      	pop	{r3, pc}
 8004dd2:	bf00      	nop

08004dd4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004dd4:	b538      	push	{r3, r4, r5, lr}
 8004dd6:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004dd8:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 8004ddc:	4628      	mov	r0, r5
 8004dde:	f000 fb57 	bl	8005490 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004de2:	2001      	movs	r0, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8004de4:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_data_len = pdev->request.wLength;
 8004de8:	f8b4 22ae 	ldrh.w	r2, [r4, #686]	; 0x2ae
  switch (pdev->request.bmRequest & 0x1FU)
 8004dec:	f001 031f 	and.w	r3, r1, #31
 8004df0:	4283      	cmp	r3, r0
  pdev->ep0_state = USBD_EP0_SETUP;
 8004df2:	f8c4 0294 	str.w	r0, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8004df6:	f8c4 2298 	str.w	r2, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8004dfa:	d015      	beq.n	8004e28 <USBD_LL_SetupStage+0x54>
 8004dfc:	d30e      	bcc.n	8004e1c <USBD_LL_SetupStage+0x48>
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d006      	beq.n	8004e10 <USBD_LL_SetupStage+0x3c>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004e02:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004e06:	4620      	mov	r0, r4
 8004e08:	f000 fdde 	bl	80059c8 <USBD_LL_StallEP>
      break;
  }

  return USBD_OK;
}
 8004e0c:	2000      	movs	r0, #0
 8004e0e:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdEPReq(pdev, &pdev->request);
 8004e10:	4629      	mov	r1, r5
 8004e12:	4620      	mov	r0, r4
 8004e14:	f000 faa6 	bl	8005364 <USBD_StdEPReq>
}
 8004e18:	2000      	movs	r0, #0
 8004e1a:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdDevReq(pdev, &pdev->request);
 8004e1c:	4629      	mov	r1, r5
 8004e1e:	4620      	mov	r0, r4
 8004e20:	f000 f8f6 	bl	8005010 <USBD_StdDevReq>
}
 8004e24:	2000      	movs	r0, #0
 8004e26:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8004e28:	4629      	mov	r1, r5
 8004e2a:	4620      	mov	r0, r4
 8004e2c:	f000 fa6e 	bl	800530c <USBD_StdItfReq>
}
 8004e30:	2000      	movs	r0, #0
 8004e32:	bd38      	pop	{r3, r4, r5, pc}

08004e34 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004e34:	b570      	push	{r4, r5, r6, lr}
 8004e36:	4605      	mov	r5, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004e38:	b941      	cbnz	r1, 8004e4c <USBD_LL_DataOutStage+0x18>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004e3a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d00f      	beq.n	8004e62 <USBD_LL_DataOutStage+0x2e>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004e42:	2b05      	cmp	r3, #5
 8004e44:	460c      	mov	r4, r1
 8004e46:	d02e      	beq.n	8004ea6 <USBD_LL_DataOutStage+0x72>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004e48:	2000      	movs	r0, #0
}
 8004e4a:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 8004e4c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	b1c3      	cbz	r3, 8004e86 <USBD_LL_DataOutStage+0x52>
 8004e54:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004e58:	2a03      	cmp	r2, #3
 8004e5a:	d114      	bne.n	8004e86 <USBD_LL_DataOutStage+0x52>
    pdev->pClass->DataOut(pdev, epnum);
 8004e5c:	4798      	blx	r3
  return USBD_OK;
 8004e5e:	2000      	movs	r0, #0
}
 8004e60:	bd70      	pop	{r4, r5, r6, pc}
 8004e62:	4616      	mov	r6, r2
      if (pep->rem_length > pep->maxpacket)
 8004e64:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 8004e68:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d90c      	bls.n	8004e8a <USBD_LL_DataOutStage+0x56>
        pep->rem_length -= pep->maxpacket;
 8004e70:	1a9b      	subs	r3, r3, r2
        USBD_CtlContinueRx(pdev, pdata,
 8004e72:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8004e74:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8004e78:	bf8c      	ite	hi
 8004e7a:	b29a      	uxthhi	r2, r3
 8004e7c:	b292      	uxthls	r2, r2
 8004e7e:	4631      	mov	r1, r6
 8004e80:	f000 fb72 	bl	8005568 <USBD_CtlContinueRx>
 8004e84:	e7e0      	b.n	8004e48 <USBD_LL_DataOutStage+0x14>
    return USBD_FAIL;
 8004e86:	2002      	movs	r0, #2
}
 8004e88:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004e8a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	b123      	cbz	r3, 8004e9c <USBD_LL_DataOutStage+0x68>
 8004e92:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004e96:	2a03      	cmp	r2, #3
 8004e98:	d100      	bne.n	8004e9c <USBD_LL_DataOutStage+0x68>
          pdev->pClass->EP0_RxReady(pdev);
 8004e9a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	f000 fb6b 	bl	8005578 <USBD_CtlSendStatus>
  return USBD_OK;
 8004ea2:	2000      	movs	r0, #0
}
 8004ea4:	bd70      	pop	{r4, r5, r6, pc}
        pdev->ep0_state = USBD_EP0_IDLE;
 8004ea6:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004eaa:	f000 fd8d 	bl	80059c8 <USBD_LL_StallEP>
  return USBD_OK;
 8004eae:	4620      	mov	r0, r4
}
 8004eb0:	bd70      	pop	{r4, r5, r6, pc}
 8004eb2:	bf00      	nop

08004eb4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004eb4:	b570      	push	{r4, r5, r6, lr}
 8004eb6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004eb8:	b981      	cbnz	r1, 8004edc <USBD_LL_DataInStage+0x28>
 8004eba:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004ebc:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8004ec0:	2a02      	cmp	r2, #2
 8004ec2:	d019      	beq.n	8004ef8 <USBD_LL_DataInStage+0x44>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004ec4:	f032 0304 	bics.w	r3, r2, #4
 8004ec8:	d102      	bne.n	8004ed0 <USBD_LL_DataInStage+0x1c>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004eca:	2180      	movs	r1, #128	; 0x80
 8004ecc:	f000 fd7c 	bl	80059c8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004ed0:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8004ed4:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d00b      	beq.n	8004ef2 <USBD_LL_DataInStage+0x3e>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8004eda:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 8004edc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	b363      	cbz	r3, 8004f3e <USBD_LL_DataInStage+0x8a>
 8004ee4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004ee8:	2a03      	cmp	r2, #3
 8004eea:	d128      	bne.n	8004f3e <USBD_LL_DataInStage+0x8a>
    pdev->pClass->DataIn(pdev, epnum);
 8004eec:	4798      	blx	r3
  return USBD_OK;
 8004eee:	2000      	movs	r0, #0
}
 8004ef0:	bd70      	pop	{r4, r5, r6, pc}
      pdev->dev_test_mode = 0U;
 8004ef2:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
}
 8004ef6:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8004ef8:	e9d0 6208 	ldrd	r6, r2, [r0, #32]
 8004efc:	4296      	cmp	r6, r2
 8004efe:	d820      	bhi.n	8004f42 <USBD_LL_DataInStage+0x8e>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004f00:	69c3      	ldr	r3, [r0, #28]
 8004f02:	fbb3 f5f2 	udiv	r5, r3, r2
 8004f06:	fb02 3515 	mls	r5, r2, r5, r3
 8004f0a:	b90d      	cbnz	r5, 8004f10 <USBD_LL_DataInStage+0x5c>
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d926      	bls.n	8004f5e <USBD_LL_DataInStage+0xaa>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004f10:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	b12b      	cbz	r3, 8004f24 <USBD_LL_DataInStage+0x70>
 8004f18:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8004f1c:	2a03      	cmp	r2, #3
 8004f1e:	d101      	bne.n	8004f24 <USBD_LL_DataInStage+0x70>
            pdev->pClass->EP0_TxSent(pdev);
 8004f20:	4620      	mov	r0, r4
 8004f22:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8004f24:	2180      	movs	r1, #128	; 0x80
 8004f26:	4620      	mov	r0, r4
 8004f28:	f000 fd4e 	bl	80059c8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	f000 fb2f 	bl	8005590 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 8004f32:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
      pdev->dev_test_mode = 0U;
 8004f36:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d1ce      	bne.n	8004eda <USBD_LL_DataInStage+0x26>
 8004f3c:	e7d9      	b.n	8004ef2 <USBD_LL_DataInStage+0x3e>
    return USBD_FAIL;
 8004f3e:	2002      	movs	r0, #2
}
 8004f40:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 8004f42:	1ab2      	subs	r2, r6, r2
 8004f44:	460d      	mov	r5, r1
 8004f46:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004f48:	4619      	mov	r1, r3
 8004f4a:	b292      	uxth	r2, r2
 8004f4c:	f000 faf4 	bl	8005538 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004f50:	462b      	mov	r3, r5
 8004f52:	462a      	mov	r2, r5
 8004f54:	4629      	mov	r1, r5
 8004f56:	4620      	mov	r0, r4
 8004f58:	f000 fd82 	bl	8005a60 <USBD_LL_PrepareReceive>
 8004f5c:	e7b8      	b.n	8004ed0 <USBD_LL_DataInStage+0x1c>
            (pep->total_length >= pep->maxpacket) &&
 8004f5e:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d2d4      	bcs.n	8004f10 <USBD_LL_DataInStage+0x5c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004f66:	462a      	mov	r2, r5
 8004f68:	f000 fae6 	bl	8005538 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004f6c:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8004f70:	e7ee      	b.n	8004f50 <USBD_LL_DataInStage+0x9c>
 8004f72:	bf00      	nop

08004f74 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004f74:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004f76:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004f78:	2640      	movs	r6, #64	; 0x40
{
 8004f7a:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004f7c:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004f7e:	4611      	mov	r1, r2
 8004f80:	4633      	mov	r3, r6
 8004f82:	f000 fd03 	bl	800598c <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004f86:	4633      	mov	r3, r6
 8004f88:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004f8a:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004f8e:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004f92:	4620      	mov	r0, r4
 8004f94:	2200      	movs	r2, #0
 8004f96:	f000 fcf9 	bl	800598c <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8004f9a:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8004f9c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004fa0:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004fa2:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004fa4:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004fa8:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8004fac:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8004fae:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8004fb2:	b123      	cbz	r3, 8004fbe <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004fb4:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004fb8:	4620      	mov	r0, r4
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004fbe:	2000      	movs	r0, #0
 8004fc0:	bd70      	pop	{r4, r5, r6, pc}
 8004fc2:	bf00      	nop

08004fc4 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004fc4:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop

08004fcc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004fcc:	4603      	mov	r3, r0
  pdev->dev_old_state =  pdev->dev_state;
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004fce:	2204      	movs	r2, #4
  pdev->dev_old_state =  pdev->dev_state;
 8004fd0:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8004fd4:	2000      	movs	r0, #0
  pdev->dev_old_state =  pdev->dev_state;
 8004fd6:	f883 129d 	strb.w	r1, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004fda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
}
 8004fde:	4770      	bx	lr

08004fe0 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004fe0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004fe4:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8004fe6:	bf04      	itt	eq
 8004fe8:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8004fec:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	4770      	bx	lr

08004ff4 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ff4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004ff8:	2a03      	cmp	r2, #3
 8004ffa:	d001      	beq.n	8005000 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	4770      	bx	lr
{
 8005000:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 8005002:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005006:	69db      	ldr	r3, [r3, #28]
 8005008:	b103      	cbz	r3, 800500c <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 800500a:	4798      	blx	r3
}
 800500c:	2000      	movs	r0, #0
 800500e:	bd08      	pop	{r3, pc}

08005010 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005010:	b530      	push	{r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005012:	780b      	ldrb	r3, [r1, #0]
{
 8005014:	b083      	sub	sp, #12
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005016:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800501a:	2b20      	cmp	r3, #32
{
 800501c:	460d      	mov	r5, r1
 800501e:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005020:	d028      	beq.n	8005074 <USBD_StdDevReq+0x64>
 8005022:	2b40      	cmp	r3, #64	; 0x40
 8005024:	d026      	beq.n	8005074 <USBD_StdDevReq+0x64>
 8005026:	b153      	cbz	r3, 800503e <USBD_StdDevReq+0x2e>
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8005028:	2180      	movs	r1, #128	; 0x80
 800502a:	4620      	mov	r0, r4
 800502c:	f000 fccc 	bl	80059c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005030:	4620      	mov	r0, r4
 8005032:	2100      	movs	r1, #0
 8005034:	f000 fcc8 	bl	80059c8 <USBD_LL_StallEP>
}
 8005038:	2000      	movs	r0, #0
 800503a:	b003      	add	sp, #12
 800503c:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 800503e:	784b      	ldrb	r3, [r1, #1]
 8005040:	2b09      	cmp	r3, #9
 8005042:	d8f1      	bhi.n	8005028 <USBD_StdDevReq+0x18>
 8005044:	a201      	add	r2, pc, #4	; (adr r2, 800504c <USBD_StdDevReq+0x3c>)
 8005046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504a:	bf00      	nop
 800504c:	080050c9 	.word	0x080050c9
 8005050:	080050f5 	.word	0x080050f5
 8005054:	08005029 	.word	0x08005029
 8005058:	08005111 	.word	0x08005111
 800505c:	08005029 	.word	0x08005029
 8005060:	0800511d 	.word	0x0800511d
 8005064:	0800515b 	.word	0x0800515b
 8005068:	08005029 	.word	0x08005029
 800506c:	08005191 	.word	0x08005191
 8005070:	08005087 	.word	0x08005087
      pdev->pClass->Setup(pdev, req);
 8005074:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8005078:	4629      	mov	r1, r5
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	4620      	mov	r0, r4
 800507e:	4798      	blx	r3
}
 8005080:	2000      	movs	r0, #0
 8005082:	b003      	add	sp, #12
 8005084:	bd30      	pop	{r4, r5, pc}
  cfgidx = (uint8_t)(req->wValue);
 8005086:	7889      	ldrb	r1, [r1, #2]
 8005088:	4d9f      	ldr	r5, [pc, #636]	; (8005308 <USBD_StdDevReq+0x2f8>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800508a:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800508c:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800508e:	d8cb      	bhi.n	8005028 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8005090:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005094:	2b02      	cmp	r3, #2
 8005096:	f000 810d 	beq.w	80052b4 <USBD_StdDevReq+0x2a4>
 800509a:	2b03      	cmp	r3, #3
 800509c:	f040 80fe 	bne.w	800529c <USBD_StdDevReq+0x28c>
        if (cfgidx == 0U)
 80050a0:	2900      	cmp	r1, #0
 80050a2:	f000 8127 	beq.w	80052f4 <USBD_StdDevReq+0x2e4>
        else if (cfgidx != pdev->dev_config)
 80050a6:	6841      	ldr	r1, [r0, #4]
 80050a8:	2901      	cmp	r1, #1
 80050aa:	d009      	beq.n	80050c0 <USBD_StdDevReq+0xb0>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80050ac:	b2c9      	uxtb	r1, r1
 80050ae:	f7ff fe89 	bl	8004dc4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80050b2:	7829      	ldrb	r1, [r5, #0]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80050b4:	4620      	mov	r0, r4
          pdev->dev_config = cfgidx;
 80050b6:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80050b8:	f7ff fe7a 	bl	8004db0 <USBD_SetClassConfig>
 80050bc:	2802      	cmp	r0, #2
 80050be:	d0b3      	beq.n	8005028 <USBD_StdDevReq+0x18>
    USBD_CtlSendStatus(pdev);
 80050c0:	4620      	mov	r0, r4
 80050c2:	f000 fa59 	bl	8005578 <USBD_CtlSendStatus>
 80050c6:	e7b7      	b.n	8005038 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 80050c8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80050cc:	2203      	movs	r2, #3
 80050ce:	3b01      	subs	r3, #1
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d8a9      	bhi.n	8005028 <USBD_StdDevReq+0x18>
      if (req->wLength != 0x2U)
 80050d4:	88cb      	ldrh	r3, [r1, #6]
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d1a6      	bne.n	8005028 <USBD_StdDevReq+0x18>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80050da:	2101      	movs	r1, #1
      if (pdev->dev_remote_wakeup)
 80050dc:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80050e0:	60c1      	str	r1, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80050e2:	b103      	cbz	r3, 80050e6 <USBD_StdDevReq+0xd6>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80050e4:	60c2      	str	r2, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80050e6:	2202      	movs	r2, #2
 80050e8:	f104 010c 	add.w	r1, r4, #12
 80050ec:	4620      	mov	r0, r4
 80050ee:	f000 fa15 	bl	800551c <USBD_CtlSendData>
 80050f2:	e7a1      	b.n	8005038 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 80050f4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80050f8:	3b01      	subs	r3, #1
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d894      	bhi.n	8005028 <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80050fe:	884b      	ldrh	r3, [r1, #2]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d199      	bne.n	8005038 <USBD_StdDevReq+0x28>
        pdev->dev_remote_wakeup = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800510a:	f000 fa35 	bl	8005578 <USBD_CtlSendStatus>
 800510e:	e793      	b.n	8005038 <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005110:	884b      	ldrh	r3, [r1, #2]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d190      	bne.n	8005038 <USBD_StdDevReq+0x28>
    pdev->dev_remote_wakeup = 1U;
 8005116:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
 800511a:	e7d1      	b.n	80050c0 <USBD_StdDevReq+0xb0>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800511c:	888b      	ldrh	r3, [r1, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d182      	bne.n	8005028 <USBD_StdDevReq+0x18>
 8005122:	88cb      	ldrh	r3, [r1, #6]
 8005124:	2b00      	cmp	r3, #0
 8005126:	f47f af7f 	bne.w	8005028 <USBD_StdDevReq+0x18>
 800512a:	884d      	ldrh	r5, [r1, #2]
 800512c:	2d7f      	cmp	r5, #127	; 0x7f
 800512e:	f63f af7b 	bhi.w	8005028 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005132:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005136:	2b03      	cmp	r3, #3
 8005138:	f43f af76 	beq.w	8005028 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800513c:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800513e:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005142:	f000 fc71 	bl	8005a28 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005146:	4620      	mov	r0, r4
 8005148:	f000 fa16 	bl	8005578 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800514c:	2d00      	cmp	r5, #0
 800514e:	f000 80cd 	beq.w	80052ec <USBD_StdDevReq+0x2dc>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005152:	2302      	movs	r3, #2
 8005154:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8005158:	e76e      	b.n	8005038 <USBD_StdDevReq+0x28>
  uint16_t len = 0U;
 800515a:	2300      	movs	r3, #0
          USBD_GetDescriptor(pdev, req);
 800515c:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 800515e:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8005162:	0a13      	lsrs	r3, r2, #8
 8005164:	3b01      	subs	r3, #1
 8005166:	2b06      	cmp	r3, #6
 8005168:	f63f af5e 	bhi.w	8005028 <USBD_StdDevReq+0x18>
 800516c:	a101      	add	r1, pc, #4	; (adr r1, 8005174 <USBD_StdDevReq+0x164>)
 800516e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005172:	bf00      	nop
 8005174:	08005229 	.word	0x08005229
 8005178:	08005211 	.word	0x08005211
 800517c:	08005239 	.word	0x08005239
 8005180:	08005029 	.word	0x08005029
 8005184:	08005029 	.word	0x08005029
 8005188:	080051fb 	.word	0x080051fb
 800518c:	080051b7 	.word	0x080051b7
  if (req->wLength != 1U)
 8005190:	88ca      	ldrh	r2, [r1, #6]
 8005192:	2a01      	cmp	r2, #1
 8005194:	f47f af48 	bne.w	8005028 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8005198:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800519c:	2b00      	cmp	r3, #0
 800519e:	f43f af43 	beq.w	8005028 <USBD_StdDevReq+0x18>
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	f240 8094 	bls.w	80052d0 <USBD_StdDevReq+0x2c0>
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	f47f af3d 	bne.w	8005028 <USBD_StdDevReq+0x18>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80051ae:	1d01      	adds	r1, r0, #4
 80051b0:	f000 f9b4 	bl	800551c <USBD_CtlSendData>
 80051b4:	e740      	b.n	8005038 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051b6:	7c03      	ldrb	r3, [r0, #16]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f47f af35 	bne.w	8005028 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80051be:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80051c2:	f10d 0006 	add.w	r0, sp, #6
 80051c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80051ca:	2307      	movs	r3, #7
 80051cc:	7043      	strb	r3, [r0, #1]
    if ((len != 0U) && (req->wLength != 0U))
 80051ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80051d2:	88ea      	ldrh	r2, [r5, #6]
 80051d4:	b16b      	cbz	r3, 80051f2 <USBD_StdDevReq+0x1e2>
 80051d6:	2a00      	cmp	r2, #0
 80051d8:	f43f af72 	beq.w	80050c0 <USBD_StdDevReq+0xb0>
      len = MIN(len, req->wLength);
 80051dc:	4293      	cmp	r3, r2
 80051de:	bf28      	it	cs
 80051e0:	4613      	movcs	r3, r2
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80051e2:	4601      	mov	r1, r0
 80051e4:	461a      	mov	r2, r3
 80051e6:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 80051e8:	f8ad 3006 	strh.w	r3, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80051ec:	f000 f996 	bl	800551c <USBD_CtlSendData>
 80051f0:	88ea      	ldrh	r2, [r5, #6]
    if (req->wLength == 0U)
 80051f2:	2a00      	cmp	r2, #0
 80051f4:	f47f af20 	bne.w	8005038 <USBD_StdDevReq+0x28>
 80051f8:	e762      	b.n	80050c0 <USBD_StdDevReq+0xb0>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051fa:	7c03      	ldrb	r3, [r0, #16]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f47f af13 	bne.w	8005028 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005202:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005206:	f10d 0006 	add.w	r0, sp, #6
 800520a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520c:	4798      	blx	r3
 800520e:	e7de      	b.n	80051ce <USBD_StdDevReq+0x1be>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005210:	7c02      	ldrb	r2, [r0, #16]
 8005212:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005216:	2a00      	cmp	r2, #0
 8005218:	d161      	bne.n	80052de <USBD_StdDevReq+0x2ce>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800521a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521c:	f10d 0006 	add.w	r0, sp, #6
 8005220:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005222:	2302      	movs	r3, #2
 8005224:	7043      	strb	r3, [r0, #1]
 8005226:	e7d2      	b.n	80051ce <USBD_StdDevReq+0x1be>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005228:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800522c:	f10d 0106 	add.w	r1, sp, #6
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	7c00      	ldrb	r0, [r0, #16]
 8005234:	4798      	blx	r3
 8005236:	e7ca      	b.n	80051ce <USBD_StdDevReq+0x1be>
      switch ((uint8_t)(req->wValue))
 8005238:	b2d2      	uxtb	r2, r2
 800523a:	2a05      	cmp	r2, #5
 800523c:	f63f aef4 	bhi.w	8005028 <USBD_StdDevReq+0x18>
 8005240:	e8df f002 	tbb	[pc, r2]
 8005244:	141a2026 	.word	0x141a2026
 8005248:	030e      	.short	0x030e
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800524a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	2b00      	cmp	r3, #0
 8005252:	f43f aee9 	beq.w	8005028 <USBD_StdDevReq+0x18>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005256:	f10d 0106 	add.w	r1, sp, #6
 800525a:	7c20      	ldrb	r0, [r4, #16]
 800525c:	4798      	blx	r3
 800525e:	e7b6      	b.n	80051ce <USBD_StdDevReq+0x1be>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005260:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1f5      	bne.n	8005256 <USBD_StdDevReq+0x246>
 800526a:	e6dd      	b.n	8005028 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800526c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1ef      	bne.n	8005256 <USBD_StdDevReq+0x246>
 8005276:	e6d7      	b.n	8005028 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005278:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1e9      	bne.n	8005256 <USBD_StdDevReq+0x246>
 8005282:	e6d1      	b.n	8005028 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005284:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1e3      	bne.n	8005256 <USBD_StdDevReq+0x246>
 800528e:	e6cb      	b.n	8005028 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005290:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1dd      	bne.n	8005256 <USBD_StdDevReq+0x246>
 800529a:	e6c5      	b.n	8005028 <USBD_StdDevReq+0x18>
  USBD_LL_StallEP(pdev, 0x80U);
 800529c:	2180      	movs	r1, #128	; 0x80
 800529e:	f000 fb93 	bl	80059c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80052a2:	2100      	movs	r1, #0
 80052a4:	4620      	mov	r0, r4
 80052a6:	f000 fb8f 	bl	80059c8 <USBD_LL_StallEP>
        USBD_ClrClassConfig(pdev, cfgidx);
 80052aa:	7829      	ldrb	r1, [r5, #0]
 80052ac:	4620      	mov	r0, r4
 80052ae:	f7ff fd89 	bl	8004dc4 <USBD_ClrClassConfig>
 80052b2:	e6c1      	b.n	8005038 <USBD_StdDevReq+0x28>
        if (cfgidx)
 80052b4:	2900      	cmp	r1, #0
 80052b6:	f43f af03 	beq.w	80050c0 <USBD_StdDevReq+0xb0>
          pdev->dev_config = cfgidx;
 80052ba:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80052bc:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 80052be:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80052c0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80052c4:	f7ff fd74 	bl	8004db0 <USBD_SetClassConfig>
 80052c8:	2802      	cmp	r0, #2
 80052ca:	f47f aef9 	bne.w	80050c0 <USBD_StdDevReq+0xb0>
 80052ce:	e6ab      	b.n	8005028 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	4601      	mov	r1, r0
 80052d4:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80052d8:	f000 f920 	bl	800551c <USBD_CtlSendData>
 80052dc:	e6ac      	b.n	8005038 <USBD_StdDevReq+0x28>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80052de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e0:	f10d 0006 	add.w	r0, sp, #6
 80052e4:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80052e6:	2302      	movs	r3, #2
 80052e8:	7043      	strb	r3, [r0, #1]
 80052ea:	e770      	b.n	80051ce <USBD_StdDevReq+0x1be>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80052ec:	2301      	movs	r3, #1
 80052ee:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80052f2:	e6a1      	b.n	8005038 <USBD_StdDevReq+0x28>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80052f4:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 80052f6:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80052f8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 80052fc:	f7ff fd62 	bl	8004dc4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005300:	4620      	mov	r0, r4
 8005302:	f000 f939 	bl	8005578 <USBD_CtlSendStatus>
 8005306:	e697      	b.n	8005038 <USBD_StdDevReq+0x28>
 8005308:	200026e0 	.word	0x200026e0

0800530c <USBD_StdItfReq>:
{
 800530c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800530e:	780b      	ldrb	r3, [r1, #0]
{
 8005310:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005312:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005316:	2b20      	cmp	r3, #32
{
 8005318:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800531a:	d00c      	beq.n	8005336 <USBD_StdItfReq+0x2a>
 800531c:	2b40      	cmp	r3, #64	; 0x40
 800531e:	d00a      	beq.n	8005336 <USBD_StdItfReq+0x2a>
 8005320:	b14b      	cbz	r3, 8005336 <USBD_StdItfReq+0x2a>
  USBD_LL_StallEP(pdev, 0x80U);
 8005322:	2180      	movs	r1, #128	; 0x80
 8005324:	4620      	mov	r0, r4
 8005326:	f000 fb4f 	bl	80059c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800532a:	4620      	mov	r0, r4
 800532c:	2100      	movs	r1, #0
 800532e:	f000 fb4b 	bl	80059c8 <USBD_LL_StallEP>
}
 8005332:	2000      	movs	r0, #0
 8005334:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8005336:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800533a:	3b01      	subs	r3, #1
 800533c:	2b02      	cmp	r3, #2
 800533e:	d8f0      	bhi.n	8005322 <USBD_StdItfReq+0x16>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005340:	792b      	ldrb	r3, [r5, #4]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d8ed      	bhi.n	8005322 <USBD_StdItfReq+0x16>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005346:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800534a:	4629      	mov	r1, r5
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	4620      	mov	r0, r4
 8005350:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005352:	88eb      	ldrh	r3, [r5, #6]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1ec      	bne.n	8005332 <USBD_StdItfReq+0x26>
 8005358:	2800      	cmp	r0, #0
 800535a:	d1ea      	bne.n	8005332 <USBD_StdItfReq+0x26>
              USBD_CtlSendStatus(pdev);
 800535c:	4620      	mov	r0, r4
 800535e:	f000 f90b 	bl	8005578 <USBD_CtlSendStatus>
 8005362:	e7e6      	b.n	8005332 <USBD_StdItfReq+0x26>

08005364 <USBD_StdEPReq>:
{
 8005364:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005366:	780b      	ldrb	r3, [r1, #0]
{
 8005368:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800536a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800536e:	2b20      	cmp	r3, #32
 8005370:	d00c      	beq.n	800538c <USBD_StdEPReq+0x28>
 8005372:	2b40      	cmp	r3, #64	; 0x40
 8005374:	d00a      	beq.n	800538c <USBD_StdEPReq+0x28>
 8005376:	b183      	cbz	r3, 800539a <USBD_StdEPReq+0x36>
  USBD_LL_StallEP(pdev, 0x80U);
 8005378:	2180      	movs	r1, #128	; 0x80
 800537a:	4620      	mov	r0, r4
 800537c:	f000 fb24 	bl	80059c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005380:	4620      	mov	r0, r4
 8005382:	2100      	movs	r1, #0
 8005384:	f000 fb20 	bl	80059c8 <USBD_LL_StallEP>
}
 8005388:	2000      	movs	r0, #0
 800538a:	bd70      	pop	{r4, r5, r6, pc}
      pdev->pClass->Setup(pdev, req);
 800538c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8005390:	4620      	mov	r0, r4
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	4798      	blx	r3
}
 8005396:	2000      	movs	r0, #0
 8005398:	bd70      	pop	{r4, r5, r6, pc}
      switch (req->bRequest)
 800539a:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800539c:	888a      	ldrh	r2, [r1, #4]
      switch (req->bRequest)
 800539e:	2b01      	cmp	r3, #1
  ep_addr  = LOBYTE(req->wIndex);
 80053a0:	b2d5      	uxtb	r5, r2
      switch (req->bRequest)
 80053a2:	d03e      	beq.n	8005422 <USBD_StdEPReq+0xbe>
 80053a4:	d314      	bcc.n	80053d0 <USBD_StdEPReq+0x6c>
 80053a6:	2b03      	cmp	r3, #3
 80053a8:	d1e6      	bne.n	8005378 <USBD_StdEPReq+0x14>
          switch (pdev->dev_state)
 80053aa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d046      	beq.n	8005440 <USBD_StdEPReq+0xdc>
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	d1e0      	bne.n	8005378 <USBD_StdEPReq+0x14>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80053b6:	884b      	ldrh	r3, [r1, #2]
 80053b8:	b933      	cbnz	r3, 80053c8 <USBD_StdEPReq+0x64>
                if ((ep_addr != 0x00U) &&
 80053ba:	066a      	lsls	r2, r5, #25
 80053bc:	d004      	beq.n	80053c8 <USBD_StdEPReq+0x64>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80053be:	88cb      	ldrh	r3, [r1, #6]
 80053c0:	b913      	cbnz	r3, 80053c8 <USBD_StdEPReq+0x64>
                  USBD_LL_StallEP(pdev, ep_addr);
 80053c2:	4629      	mov	r1, r5
 80053c4:	f000 fb00 	bl	80059c8 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 80053c8:	4620      	mov	r0, r4
 80053ca:	f000 f8d5 	bl	8005578 <USBD_CtlSendStatus>
              break;
 80053ce:	e7db      	b.n	8005388 <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 80053d0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d03d      	beq.n	8005454 <USBD_StdEPReq+0xf0>
 80053d8:	2b03      	cmp	r3, #3
 80053da:	d1cd      	bne.n	8005378 <USBD_StdEPReq+0x14>
 80053dc:	f005 030f 	and.w	r3, r5, #15
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80053e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 80053e4:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80053e6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 80053ea:	d442      	bmi.n	8005472 <USBD_StdEPReq+0x10e>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80053ec:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0c1      	beq.n	8005378 <USBD_StdEPReq+0x14>
 80053f4:	f005 037f 	and.w	r3, r5, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80053f8:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 80053fc:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8005400:	f506 76aa 	add.w	r6, r6, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005404:	b133      	cbz	r3, 8005414 <USBD_StdEPReq+0xb0>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005406:	4629      	mov	r1, r5
 8005408:	4620      	mov	r0, r4
 800540a:	f000 faf9 	bl	8005a00 <USBD_LL_IsStallEP>
 800540e:	2800      	cmp	r0, #0
 8005410:	d03b      	beq.n	800548a <USBD_StdEPReq+0x126>
                pep->status = 0x0001U;
 8005412:	2301      	movs	r3, #1
 8005414:	6033      	str	r3, [r6, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005416:	4631      	mov	r1, r6
 8005418:	4620      	mov	r0, r4
 800541a:	2202      	movs	r2, #2
 800541c:	f000 f87e 	bl	800551c <USBD_CtlSendData>
              break;
 8005420:	e7b2      	b.n	8005388 <USBD_StdEPReq+0x24>
          switch (pdev->dev_state)
 8005422:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005426:	2b02      	cmp	r3, #2
 8005428:	d00a      	beq.n	8005440 <USBD_StdEPReq+0xdc>
 800542a:	2b03      	cmp	r3, #3
 800542c:	d1a4      	bne.n	8005378 <USBD_StdEPReq+0x14>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800542e:	884b      	ldrh	r3, [r1, #2]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1a9      	bne.n	8005388 <USBD_StdEPReq+0x24>
                if ((ep_addr & 0x7FU) != 0x00U)
 8005434:	066e      	lsls	r6, r5, #25
 8005436:	d0c7      	beq.n	80053c8 <USBD_StdEPReq+0x64>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005438:	4629      	mov	r1, r5
 800543a:	f000 fad3 	bl	80059e4 <USBD_LL_ClearStallEP>
 800543e:	e7c3      	b.n	80053c8 <USBD_StdEPReq+0x64>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005440:	066b      	lsls	r3, r5, #25
 8005442:	d099      	beq.n	8005378 <USBD_StdEPReq+0x14>
                USBD_LL_StallEP(pdev, ep_addr);
 8005444:	4629      	mov	r1, r5
 8005446:	f000 fabf 	bl	80059c8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800544a:	4620      	mov	r0, r4
 800544c:	2180      	movs	r1, #128	; 0x80
 800544e:	f000 fabb 	bl	80059c8 <USBD_LL_StallEP>
 8005452:	e799      	b.n	8005388 <USBD_StdEPReq+0x24>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005454:	0668      	lsls	r0, r5, #25
 8005456:	d18f      	bne.n	8005378 <USBD_StdEPReq+0x14>
              pep->status = 0x0000U;
 8005458:	2300      	movs	r3, #0
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800545a:	0611      	lsls	r1, r2, #24
 800545c:	bf4c      	ite	mi
 800545e:	f104 0114 	addmi.w	r1, r4, #20
 8005462:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005466:	4620      	mov	r0, r4
              pep->status = 0x0000U;
 8005468:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800546a:	2202      	movs	r2, #2
 800546c:	f000 f856 	bl	800551c <USBD_CtlSendData>
              break;
 8005470:	e78a      	b.n	8005388 <USBD_StdEPReq+0x24>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	2b00      	cmp	r3, #0
 8005476:	f43f af7f 	beq.w	8005378 <USBD_StdEPReq+0x14>
 800547a:	f005 037f 	and.w	r3, r5, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800547e:	1c5e      	adds	r6, r3, #1
 8005480:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8005484:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8005488:	e7bc      	b.n	8005404 <USBD_StdEPReq+0xa0>
                pep->status = 0x0000U;
 800548a:	6030      	str	r0, [r6, #0]
 800548c:	e7c3      	b.n	8005416 <USBD_StdEPReq+0xb2>
 800548e:	bf00      	nop

08005490 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8005490:	780b      	ldrb	r3, [r1, #0]
 8005492:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005494:	784b      	ldrb	r3, [r1, #1]
 8005496:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005498:	78ca      	ldrb	r2, [r1, #3]
 800549a:	788b      	ldrb	r3, [r1, #2]
 800549c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80054a0:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80054a2:	794a      	ldrb	r2, [r1, #5]
 80054a4:	790b      	ldrb	r3, [r1, #4]
 80054a6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80054aa:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80054ac:	79ca      	ldrb	r2, [r1, #7]
 80054ae:	798b      	ldrb	r3, [r1, #6]
 80054b0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80054b4:	80c3      	strh	r3, [r0, #6]
}
 80054b6:	4770      	bx	lr

080054b8 <USBD_CtlError>:
{
 80054b8:	b510      	push	{r4, lr}
 80054ba:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80054bc:	2180      	movs	r1, #128	; 0x80
 80054be:	f000 fa83 	bl	80059c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80054c2:	4620      	mov	r0, r4
}
 80054c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80054c8:	2100      	movs	r1, #0
 80054ca:	f000 ba7d 	b.w	80059c8 <USBD_LL_StallEP>
 80054ce:	bf00      	nop

080054d0 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 80054d0:	b300      	cbz	r0, 8005514 <USBD_GetString+0x44>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80054d2:	7803      	ldrb	r3, [r0, #0]
{
 80054d4:	b430      	push	{r4, r5}
  while (*buf != '\0')
 80054d6:	b1f3      	cbz	r3, 8005516 <USBD_GetString+0x46>
 80054d8:	4604      	mov	r4, r0
  uint8_t  len = 0U;
 80054da:	2300      	movs	r3, #0
  while (*buf != '\0')
 80054dc:	f814 5f01 	ldrb.w	r5, [r4, #1]!
  {
    len++;
 80054e0:	3301      	adds	r3, #1
 80054e2:	b2db      	uxtb	r3, r3
  while (*buf != '\0')
 80054e4:	2d00      	cmp	r5, #0
 80054e6:	d1f9      	bne.n	80054dc <USBD_GetString+0xc>
 80054e8:	005b      	lsls	r3, r3, #1
 80054ea:	3302      	adds	r3, #2
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80054ec:	2403      	movs	r4, #3
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80054ee:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80054f0:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80054f2:	704c      	strb	r4, [r1, #1]
    while (*desc != '\0')
 80054f4:	7804      	ldrb	r4, [r0, #0]
 80054f6:	b15c      	cbz	r4, 8005510 <USBD_GetString+0x40>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80054f8:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 80054fa:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	b2d2      	uxtb	r2, r2
 8005500:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 8005502:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 8005504:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 8005508:	3302      	adds	r3, #2
 800550a:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 800550c:	2c00      	cmp	r4, #0
 800550e:	d1f5      	bne.n	80054fc <USBD_GetString+0x2c>
}
 8005510:	bc30      	pop	{r4, r5}
 8005512:	4770      	bx	lr
 8005514:	4770      	bx	lr
  while (*buf != '\0')
 8005516:	2302      	movs	r3, #2
 8005518:	e7e8      	b.n	80054ec <USBD_GetString+0x1c>
 800551a:	bf00      	nop

0800551c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800551c:	b538      	push	{r3, r4, r5, lr}
 800551e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005520:	2502      	movs	r5, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005522:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8005524:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005528:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800552c:	2100      	movs	r1, #0
 800552e:	f000 fa89 	bl	8005a44 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005532:	2000      	movs	r0, #0
 8005534:	bd38      	pop	{r3, r4, r5, pc}
 8005536:	bf00      	nop

08005538 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005538:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800553a:	4613      	mov	r3, r2
 800553c:	460a      	mov	r2, r1
 800553e:	2100      	movs	r1, #0
 8005540:	f000 fa80 	bl	8005a44 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005544:	2000      	movs	r0, #0
 8005546:	bd08      	pop	{r3, pc}

08005548 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005548:	b538      	push	{r3, r4, r5, lr}
 800554a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800554c:	2503      	movs	r5, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800554e:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
 8005550:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8005554:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005558:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800555c:	2100      	movs	r1, #0
 800555e:	f000 fa7f 	bl	8005a60 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005562:	2000      	movs	r0, #0
 8005564:	bd38      	pop	{r3, r4, r5, pc}
 8005566:	bf00      	nop

08005568 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005568:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800556a:	4613      	mov	r3, r2
 800556c:	460a      	mov	r2, r1
 800556e:	2100      	movs	r1, #0
 8005570:	f000 fa76 	bl	8005a60 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005574:	2000      	movs	r0, #0
 8005576:	bd08      	pop	{r3, pc}

08005578 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005578:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800557a:	2204      	movs	r2, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800557c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800557e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005582:	4619      	mov	r1, r3
 8005584:	461a      	mov	r2, r3
 8005586:	f000 fa5d 	bl	8005a44 <USBD_LL_Transmit>

  return USBD_OK;
}
 800558a:	2000      	movs	r0, #0
 800558c:	bd08      	pop	{r3, pc}
 800558e:	bf00      	nop

08005590 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005590:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005592:	2205      	movs	r2, #5

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005594:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005596:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800559a:	4619      	mov	r1, r3
 800559c:	461a      	mov	r2, r3
 800559e:	f000 fa5f 	bl	8005a60 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80055a2:	2000      	movs	r0, #0
 80055a4:	bd08      	pop	{r3, pc}
 80055a6:	bf00      	nop

080055a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80055a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80055aa:	2200      	movs	r2, #0
 80055ac:	4910      	ldr	r1, [pc, #64]	; (80055f0 <MX_USB_DEVICE_Init+0x48>)
 80055ae:	4811      	ldr	r0, [pc, #68]	; (80055f4 <MX_USB_DEVICE_Init+0x4c>)
 80055b0:	f7ff fbda 	bl	8004d68 <USBD_Init>
 80055b4:	b9c0      	cbnz	r0, 80055e8 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80055b6:	4910      	ldr	r1, [pc, #64]	; (80055f8 <MX_USB_DEVICE_Init+0x50>)
 80055b8:	480e      	ldr	r0, [pc, #56]	; (80055f4 <MX_USB_DEVICE_Init+0x4c>)
 80055ba:	f7ff fbeb 	bl	8004d94 <USBD_RegisterClass>
 80055be:	b980      	cbnz	r0, 80055e2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80055c0:	490e      	ldr	r1, [pc, #56]	; (80055fc <MX_USB_DEVICE_Init+0x54>)
 80055c2:	480c      	ldr	r0, [pc, #48]	; (80055f4 <MX_USB_DEVICE_Init+0x4c>)
 80055c4:	f7ff fb88 	bl	8004cd8 <USBD_CDC_RegisterInterface>
 80055c8:	b940      	cbnz	r0, 80055dc <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80055ca:	480a      	ldr	r0, [pc, #40]	; (80055f4 <MX_USB_DEVICE_Init+0x4c>)
 80055cc:	f7ff fbea 	bl	8004da4 <USBD_Start>
 80055d0:	b900      	cbnz	r0, 80055d4 <MX_USB_DEVICE_Init+0x2c>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80055d2:	bd08      	pop	{r3, pc}
 80055d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80055d8:	f7fc bbc8 	b.w	8001d6c <Error_Handler>
    Error_Handler();
 80055dc:	f7fc fbc6 	bl	8001d6c <Error_Handler>
 80055e0:	e7f3      	b.n	80055ca <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 80055e2:	f7fc fbc3 	bl	8001d6c <Error_Handler>
 80055e6:	e7eb      	b.n	80055c0 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 80055e8:	f7fc fbc0 	bl	8001d6c <Error_Handler>
 80055ec:	e7e3      	b.n	80055b6 <MX_USB_DEVICE_Init+0xe>
 80055ee:	bf00      	nop
 80055f0:	20000134 	.word	0x20000134
 80055f4:	20002970 	.word	0x20002970
 80055f8:	20000014 	.word	0x20000014
 80055fc:	20000124 	.word	0x20000124

08005600 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8005600:	2000      	movs	r0, #0
 8005602:	4770      	bx	lr

08005604 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005604:	2000      	movs	r0, #0
 8005606:	4770      	bx	lr

08005608 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005608:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800560a:	4c05      	ldr	r4, [pc, #20]	; (8005620 <CDC_Receive_FS+0x18>)
 800560c:	4601      	mov	r1, r0
 800560e:	4620      	mov	r0, r4
 8005610:	f7ff fb72 	bl	8004cf8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005614:	4620      	mov	r0, r4
 8005616:	f7ff fb8f 	bl	8004d38 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 800561a:	2000      	movs	r0, #0
 800561c:	bd10      	pop	{r4, pc}
 800561e:	bf00      	nop
 8005620:	20002970 	.word	0x20002970

08005624 <CDC_Init_FS>:
{
 8005624:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005626:	4c06      	ldr	r4, [pc, #24]	; (8005640 <CDC_Init_FS+0x1c>)
 8005628:	2200      	movs	r2, #0
 800562a:	4620      	mov	r0, r4
 800562c:	4905      	ldr	r1, [pc, #20]	; (8005644 <CDC_Init_FS+0x20>)
 800562e:	f7ff fb5b 	bl	8004ce8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005632:	4620      	mov	r0, r4
 8005634:	4904      	ldr	r1, [pc, #16]	; (8005648 <CDC_Init_FS+0x24>)
 8005636:	f7ff fb5f 	bl	8004cf8 <USBD_CDC_SetRxBuffer>
}
 800563a:	2000      	movs	r0, #0
 800563c:	bd10      	pop	{r4, pc}
 800563e:	bf00      	nop
 8005640:	20002970 	.word	0x20002970
 8005644:	2000301c 	.word	0x2000301c
 8005648:	20002c34 	.word	0x20002c34

0800564c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800564c:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800564e:	4c09      	ldr	r4, [pc, #36]	; (8005674 <CDC_Transmit_FS+0x28>)
 8005650:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 8005654:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005658:	b10b      	cbz	r3, 800565e <CDC_Transmit_FS+0x12>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 800565a:	2001      	movs	r0, #1
 800565c:	bd10      	pop	{r4, pc}
 800565e:	460a      	mov	r2, r1
 8005660:	4601      	mov	r1, r0
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005662:	4620      	mov	r0, r4
 8005664:	f7ff fb40 	bl	8004ce8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005668:	4620      	mov	r0, r4
}
 800566a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800566e:	f7ff bb49 	b.w	8004d04 <USBD_CDC_TransmitPacket>
 8005672:	bf00      	nop
 8005674:	20002970 	.word	0x20002970

08005678 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005678:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800567a:	4801      	ldr	r0, [pc, #4]	; (8005680 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800567c:	800b      	strh	r3, [r1, #0]
}
 800567e:	4770      	bx	lr
 8005680:	20000150 	.word	0x20000150

08005684 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005684:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8005686:	4801      	ldr	r0, [pc, #4]	; (800568c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8005688:	800b      	strh	r3, [r1, #0]
}
 800568a:	4770      	bx	lr
 800568c:	20000164 	.word	0x20000164

08005690 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005690:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005692:	4c04      	ldr	r4, [pc, #16]	; (80056a4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8005694:	460a      	mov	r2, r1
 8005696:	4804      	ldr	r0, [pc, #16]	; (80056a8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8005698:	4621      	mov	r1, r4
 800569a:	f7ff ff19 	bl	80054d0 <USBD_GetString>
  return USBD_StrDesc;
}
 800569e:	4620      	mov	r0, r4
 80056a0:	bd10      	pop	{r4, pc}
 80056a2:	bf00      	nop
 80056a4:	20003404 	.word	0x20003404
 80056a8:	08009d90 	.word	0x08009d90

080056ac <USBD_FS_ProductStrDescriptor>:
{
 80056ac:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80056ae:	4c04      	ldr	r4, [pc, #16]	; (80056c0 <USBD_FS_ProductStrDescriptor+0x14>)
 80056b0:	460a      	mov	r2, r1
 80056b2:	4804      	ldr	r0, [pc, #16]	; (80056c4 <USBD_FS_ProductStrDescriptor+0x18>)
 80056b4:	4621      	mov	r1, r4
 80056b6:	f7ff ff0b 	bl	80054d0 <USBD_GetString>
}
 80056ba:	4620      	mov	r0, r4
 80056bc:	bd10      	pop	{r4, pc}
 80056be:	bf00      	nop
 80056c0:	20003404 	.word	0x20003404
 80056c4:	08009da4 	.word	0x08009da4

080056c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80056c8:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80056ca:	4c04      	ldr	r4, [pc, #16]	; (80056dc <USBD_FS_ConfigStrDescriptor+0x14>)
 80056cc:	460a      	mov	r2, r1
 80056ce:	4804      	ldr	r0, [pc, #16]	; (80056e0 <USBD_FS_ConfigStrDescriptor+0x18>)
 80056d0:	4621      	mov	r1, r4
 80056d2:	f7ff fefd 	bl	80054d0 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80056d6:	4620      	mov	r0, r4
 80056d8:	bd10      	pop	{r4, pc}
 80056da:	bf00      	nop
 80056dc:	20003404 	.word	0x20003404
 80056e0:	08009d74 	.word	0x08009d74

080056e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80056e4:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80056e6:	4c04      	ldr	r4, [pc, #16]	; (80056f8 <USBD_FS_InterfaceStrDescriptor+0x14>)
 80056e8:	460a      	mov	r2, r1
 80056ea:	4804      	ldr	r0, [pc, #16]	; (80056fc <USBD_FS_InterfaceStrDescriptor+0x18>)
 80056ec:	4621      	mov	r1, r4
 80056ee:	f7ff feef 	bl	80054d0 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80056f2:	4620      	mov	r0, r4
 80056f4:	bd10      	pop	{r4, pc}
 80056f6:	bf00      	nop
 80056f8:	20003404 	.word	0x20003404
 80056fc:	08009d80 	.word	0x08009d80

08005700 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8005700:	201a      	movs	r0, #26
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005702:	4a44      	ldr	r2, [pc, #272]	; (8005814 <USBD_FS_SerialStrDescriptor+0x114>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005704:	4b44      	ldr	r3, [pc, #272]	; (8005818 <USBD_FS_SerialStrDescriptor+0x118>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005706:	6812      	ldr	r2, [r2, #0]

  deviceserial0 += deviceserial2;
 8005708:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 800570a:	8008      	strh	r0, [r1, #0]

  if (deviceserial0 != 0)
 800570c:	18d2      	adds	r2, r2, r3
 800570e:	d101      	bne.n	8005714 <USBD_FS_SerialStrDescriptor+0x14>
}
 8005710:	4842      	ldr	r0, [pc, #264]	; (800581c <USBD_FS_SerialStrDescriptor+0x11c>)
 8005712:	4770      	bx	lr
{
 8005714:	b410      	push	{r4}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8005716:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8005718:	0f13      	lsrs	r3, r2, #28
 800571a:	b2d8      	uxtb	r0, r3
 800571c:	2b09      	cmp	r3, #9
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800571e:	4940      	ldr	r1, [pc, #256]	; (8005820 <USBD_FS_SerialStrDescriptor+0x120>)
      pbuf[2 * idx] = (value >> 28) + '0';
 8005720:	4b3e      	ldr	r3, [pc, #248]	; (800581c <USBD_FS_SerialStrDescriptor+0x11c>)
 8005722:	bf94      	ite	ls
 8005724:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005726:	3037      	addhi	r0, #55	; 0x37
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005728:	6809      	ldr	r1, [r1, #0]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800572a:	7098      	strb	r0, [r3, #2]
    if (((value >> 28)) < 0xA)
 800572c:	f3c2 6003 	ubfx	r0, r2, #24, #4
 8005730:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8005732:	70dc      	strb	r4, [r3, #3]
 8005734:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8005736:	bf94      	ite	ls
 8005738:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800573a:	3437      	addhi	r4, #55	; 0x37
 800573c:	711c      	strb	r4, [r3, #4]
    pbuf[2 * idx + 1] = 0;
 800573e:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8005740:	f3c2 5003 	ubfx	r0, r2, #20, #4
 8005744:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8005746:	715c      	strb	r4, [r3, #5]
 8005748:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 800574a:	bf94      	ite	ls
 800574c:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800574e:	3437      	addhi	r4, #55	; 0x37
 8005750:	719c      	strb	r4, [r3, #6]
    pbuf[2 * idx + 1] = 0;
 8005752:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8005754:	f3c2 4003 	ubfx	r0, r2, #16, #4
 8005758:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800575a:	71dc      	strb	r4, [r3, #7]
 800575c:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 800575e:	bf94      	ite	ls
 8005760:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005762:	3437      	addhi	r4, #55	; 0x37
 8005764:	721c      	strb	r4, [r3, #8]
    pbuf[2 * idx + 1] = 0;
 8005766:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8005768:	f3c2 3003 	ubfx	r0, r2, #12, #4
 800576c:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 800576e:	725c      	strb	r4, [r3, #9]
 8005770:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8005772:	bf94      	ite	ls
 8005774:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005776:	3437      	addhi	r4, #55	; 0x37
 8005778:	729c      	strb	r4, [r3, #10]
    pbuf[2 * idx + 1] = 0;
 800577a:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 800577c:	f3c2 2003 	ubfx	r0, r2, #8, #4
 8005780:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8005782:	72dc      	strb	r4, [r3, #11]
 8005784:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 8005786:	bf94      	ite	ls
 8005788:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800578a:	3437      	addhi	r4, #55	; 0x37
 800578c:	731c      	strb	r4, [r3, #12]
    pbuf[2 * idx + 1] = 0;
 800578e:	2400      	movs	r4, #0
    if (((value >> 28)) < 0xA)
 8005790:	f3c2 1003 	ubfx	r0, r2, #4, #4
 8005794:	2809      	cmp	r0, #9
 8005796:	f002 020f 	and.w	r2, r2, #15
    pbuf[2 * idx + 1] = 0;
 800579a:	735c      	strb	r4, [r3, #13]
 800579c:	b2c4      	uxtb	r4, r0
      pbuf[2 * idx] = (value >> 28) + '0';
 800579e:	bf98      	it	ls
 80057a0:	3430      	addls	r4, #48	; 0x30
 80057a2:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80057a4:	bf88      	it	hi
 80057a6:	3437      	addhi	r4, #55	; 0x37
    if (((value >> 28)) < 0xA)
 80057a8:	2a09      	cmp	r2, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 80057aa:	bf94      	ite	ls
 80057ac:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80057ae:	3037      	addhi	r0, #55	; 0x37
 80057b0:	7418      	strb	r0, [r3, #16]
    pbuf[2 * idx + 1] = 0;
 80057b2:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 80057b4:	0f0a      	lsrs	r2, r1, #28
 80057b6:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 80057b8:	7458      	strb	r0, [r3, #17]
 80057ba:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 80057bc:	bf94      	ite	ls
 80057be:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80057c0:	3037      	addhi	r0, #55	; 0x37
 80057c2:	7498      	strb	r0, [r3, #18]
    pbuf[2 * idx + 1] = 0;
 80057c4:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 80057c6:	f3c1 6203 	ubfx	r2, r1, #24, #4
 80057ca:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 80057cc:	74d8      	strb	r0, [r3, #19]
 80057ce:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 80057d0:	bf94      	ite	ls
 80057d2:	3030      	addls	r0, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80057d4:	3037      	addhi	r0, #55	; 0x37
 80057d6:	7518      	strb	r0, [r3, #20]
    pbuf[2 * idx + 1] = 0;
 80057d8:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 80057da:	f3c1 5203 	ubfx	r2, r1, #20, #4
 80057de:	2a09      	cmp	r2, #9
    pbuf[2 * idx + 1] = 0;
 80057e0:	7558      	strb	r0, [r3, #21]
    if (((value >> 28)) < 0xA)
 80057e2:	f3c1 4103 	ubfx	r1, r1, #16, #4
 80057e6:	b2d0      	uxtb	r0, r2
      pbuf[2 * idx] = (value >> 28) + '0';
 80057e8:	bf98      	it	ls
 80057ea:	3030      	addls	r0, #48	; 0x30
 80057ec:	b2ca      	uxtb	r2, r1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80057ee:	bf88      	it	hi
 80057f0:	3037      	addhi	r0, #55	; 0x37
    if (((value >> 28)) < 0xA)
 80057f2:	2909      	cmp	r1, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 80057f4:	bf94      	ite	ls
 80057f6:	3230      	addls	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80057f8:	3237      	addhi	r2, #55	; 0x37
 80057fa:	739c      	strb	r4, [r3, #14]
 80057fc:	7598      	strb	r0, [r3, #22]
    pbuf[2 * idx + 1] = 0;
 80057fe:	2400      	movs	r4, #0
 8005800:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005802:	761a      	strb	r2, [r3, #24]
    pbuf[2 * idx + 1] = 0;
 8005804:	2200      	movs	r2, #0
 8005806:	75d8      	strb	r0, [r3, #23]
 8005808:	73dc      	strb	r4, [r3, #15]
 800580a:	765a      	strb	r2, [r3, #25]
}
 800580c:	4803      	ldr	r0, [pc, #12]	; (800581c <USBD_FS_SerialStrDescriptor+0x11c>)
 800580e:	bc10      	pop	{r4}
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	1ffff7e8 	.word	0x1ffff7e8
 8005818:	1ffff7f0 	.word	0x1ffff7f0
 800581c:	20000168 	.word	0x20000168
 8005820:	1ffff7ec 	.word	0x1ffff7ec

08005824 <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 8005824:	6802      	ldr	r2, [r0, #0]
 8005826:	4b0e      	ldr	r3, [pc, #56]	; (8005860 <HAL_PCD_MspInit+0x3c>)
 8005828:	429a      	cmp	r2, r3
 800582a:	d000      	beq.n	800582e <HAL_PCD_MspInit+0xa>
 800582c:	4770      	bx	lr
  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800582e:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8005830:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
{
 8005834:	b510      	push	{r4, lr}
    __HAL_RCC_USB_CLK_ENABLE();
 8005836:	69dc      	ldr	r4, [r3, #28]
{
 8005838:	b082      	sub	sp, #8
    __HAL_RCC_USB_CLK_ENABLE();
 800583a:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 800583e:	61dc      	str	r4, [r3, #28]
 8005840:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005842:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8005844:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005848:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800584a:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 800584c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800584e:	f7fc ff1d 	bl	800268c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005852:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8005854:	b002      	add	sp, #8
 8005856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800585a:	f7fc bf4d 	b.w	80026f8 <HAL_NVIC_EnableIRQ>
 800585e:	bf00      	nop
 8005860:	40005c00 	.word	0x40005c00

08005864 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005864:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8005868:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800586c:	f7ff bab2 	b.w	8004dd4 <USBD_LL_SetupStage>

08005870 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005870:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8005874:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8005878:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800587c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8005880:	f7ff bad8 	b.w	8004e34 <USBD_LL_DataOutStage>

08005884 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005884:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8005888:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800588c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800588e:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8005892:	f7ff bb0f 	b.w	8004eb4 <USBD_LL_DataInStage>
 8005896:	bf00      	nop

08005898 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005898:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800589c:	f7ff bbaa 	b.w	8004ff4 <USBD_LL_SOF>

080058a0 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80058a0:	6883      	ldr	r3, [r0, #8]
{
 80058a2:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80058a4:	2b02      	cmp	r3, #2
{
 80058a6:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80058a8:	d001      	beq.n	80058ae <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 80058aa:	f7fc fa5f 	bl	8001d6c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80058ae:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 80058b2:	2101      	movs	r1, #1
 80058b4:	f7ff fb86 	bl	8004fc4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80058b8:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 80058bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80058c0:	f7ff bb58 	b.w	8004f74 <USBD_LL_Reset>

080058c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80058c4:	b510      	push	{r4, lr}
 80058c6:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80058c8:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80058cc:	f7ff fb7e 	bl	8004fcc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80058d0:	69a3      	ldr	r3, [r4, #24]
 80058d2:	b123      	cbz	r3, 80058de <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80058d4:	4a02      	ldr	r2, [pc, #8]	; (80058e0 <HAL_PCD_SuspendCallback+0x1c>)
 80058d6:	6913      	ldr	r3, [r2, #16]
 80058d8:	f043 0306 	orr.w	r3, r3, #6
 80058dc:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80058de:	bd10      	pop	{r4, pc}
 80058e0:	e000ed00 	.word	0xe000ed00

080058e4 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80058e4:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80058e8:	f7ff bb7a 	b.w	8004fe0 <USBD_LL_Resume>

080058ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80058ec:	b538      	push	{r3, r4, r5, lr}
 80058ee:	4604      	mov	r4, r0
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80058f0:	2200      	movs	r2, #0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80058f2:	2508      	movs	r5, #8
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80058f4:	2102      	movs	r1, #2
  hpcd_USB_FS.pData = pdev;
 80058f6:	4b1c      	ldr	r3, [pc, #112]	; (8005968 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Instance = USB;
 80058f8:	481c      	ldr	r0, [pc, #112]	; (800596c <USBD_LL_Init+0x80>)
  hpcd_USB_FS.pData = pdev;
 80058fa:	f8c3 42e8 	str.w	r4, [r3, #744]	; 0x2e8
  hpcd_USB_FS.Instance = USB;
 80058fe:	6018      	str	r0, [r3, #0]
  pdev->pData = &hpcd_USB_FS;
 8005900:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005904:	4618      	mov	r0, r3
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005906:	e9c3 5101 	strd	r5, r1, [r3, #4]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800590a:	e9c3 2206 	strd	r2, r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800590e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005910:	f7fd f812 	bl	8002938 <HAL_PCD_Init>
 8005914:	b108      	cbz	r0, 800591a <USBD_LL_Init+0x2e>
  {
    Error_Handler( );
 8005916:	f7fc fa29 	bl	8001d6c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800591a:	2200      	movs	r2, #0
 800591c:	2318      	movs	r3, #24
 800591e:	4611      	mov	r1, r2
 8005920:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8005924:	f7fd fe8c 	bl	8003640 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005928:	2358      	movs	r3, #88	; 0x58
 800592a:	2200      	movs	r2, #0
 800592c:	2180      	movs	r1, #128	; 0x80
 800592e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8005932:	f7fd fe85 	bl	8003640 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8005936:	23c0      	movs	r3, #192	; 0xc0
 8005938:	2200      	movs	r2, #0
 800593a:	2181      	movs	r1, #129	; 0x81
 800593c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8005940:	f7fd fe7e 	bl	8003640 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8005944:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005948:	2200      	movs	r2, #0
 800594a:	2101      	movs	r1, #1
 800594c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8005950:	f7fd fe76 	bl	8003640 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8005954:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8005958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800595c:	2200      	movs	r2, #0
 800595e:	2182      	movs	r1, #130	; 0x82
 8005960:	f7fd fe6e 	bl	8003640 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 8005964:	2000      	movs	r0, #0
 8005966:	bd38      	pop	{r3, r4, r5, pc}
 8005968:	20003604 	.word	0x20003604
 800596c:	40005c00 	.word	0x40005c00

08005970 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005970:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8005972:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005976:	f7fd f85b 	bl	8002a30 <HAL_PCD_Start>
 800597a:	2803      	cmp	r0, #3
 800597c:	bf96      	itet	ls
 800597e:	4b02      	ldrls	r3, [pc, #8]	; (8005988 <USBD_LL_Start+0x18>)
 8005980:	2002      	movhi	r0, #2
 8005982:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8005984:	bd08      	pop	{r3, pc}
 8005986:	bf00      	nop
 8005988:	08009db8 	.word	0x08009db8

0800598c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800598c:	b510      	push	{r4, lr}
 800598e:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005990:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005994:	4613      	mov	r3, r2
 8005996:	4622      	mov	r2, r4
 8005998:	f7fd fd3c 	bl	8003414 <HAL_PCD_EP_Open>
 800599c:	2803      	cmp	r0, #3
 800599e:	bf96      	itet	ls
 80059a0:	4b01      	ldrls	r3, [pc, #4]	; (80059a8 <USBD_LL_OpenEP+0x1c>)
 80059a2:	2002      	movhi	r0, #2
 80059a4:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80059a6:	bd10      	pop	{r4, pc}
 80059a8:	08009db8 	.word	0x08009db8

080059ac <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80059ac:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80059ae:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80059b2:	f7fd fd61 	bl	8003478 <HAL_PCD_EP_Close>
 80059b6:	2803      	cmp	r0, #3
 80059b8:	bf96      	itet	ls
 80059ba:	4b02      	ldrls	r3, [pc, #8]	; (80059c4 <USBD_LL_CloseEP+0x18>)
 80059bc:	2002      	movhi	r0, #2
 80059be:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80059c0:	bd08      	pop	{r3, pc}
 80059c2:	bf00      	nop
 80059c4:	08009db8 	.word	0x08009db8

080059c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80059c8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80059ca:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80059ce:	f7fd fdc3 	bl	8003558 <HAL_PCD_EP_SetStall>
 80059d2:	2803      	cmp	r0, #3
 80059d4:	bf96      	itet	ls
 80059d6:	4b02      	ldrls	r3, [pc, #8]	; (80059e0 <USBD_LL_StallEP+0x18>)
 80059d8:	2002      	movhi	r0, #2
 80059da:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80059dc:	bd08      	pop	{r3, pc}
 80059de:	bf00      	nop
 80059e0:	08009db8 	.word	0x08009db8

080059e4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80059e4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80059e6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80059ea:	f7fd fdf1 	bl	80035d0 <HAL_PCD_EP_ClrStall>
 80059ee:	2803      	cmp	r0, #3
 80059f0:	bf96      	itet	ls
 80059f2:	4b02      	ldrls	r3, [pc, #8]	; (80059fc <USBD_LL_ClearStallEP+0x18>)
 80059f4:	2002      	movhi	r0, #2
 80059f6:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 80059f8:	bd08      	pop	{r3, pc}
 80059fa:	bf00      	nop
 80059fc:	08009db8 	.word	0x08009db8

08005a00 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;

  if((ep_addr & 0x80) == 0x80)
 8005a00:	060b      	lsls	r3, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005a02:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 8005a06:	d406      	bmi.n	8005a16 <USBD_LL_IsStallEP+0x16>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005a08:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005a0c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8005a10:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
  }
}
 8005a14:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005a16:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005a20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005a24:	7898      	ldrb	r0, [r3, #2]
 8005a26:	4770      	bx	lr

08005a28 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005a28:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005a2a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005a2e:	f7fd fcdd 	bl	80033ec <HAL_PCD_SetAddress>
 8005a32:	2803      	cmp	r0, #3
 8005a34:	bf96      	itet	ls
 8005a36:	4b02      	ldrls	r3, [pc, #8]	; (8005a40 <USBD_LL_SetUSBAddress+0x18>)
 8005a38:	2002      	movhi	r0, #2
 8005a3a:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8005a3c:	bd08      	pop	{r3, pc}
 8005a3e:	bf00      	nop
 8005a40:	08009db8 	.word	0x08009db8

08005a44 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005a44:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005a46:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005a4a:	f7fd fd67 	bl	800351c <HAL_PCD_EP_Transmit>
 8005a4e:	2803      	cmp	r0, #3
 8005a50:	bf96      	itet	ls
 8005a52:	4b02      	ldrls	r3, [pc, #8]	; (8005a5c <USBD_LL_Transmit+0x18>)
 8005a54:	2002      	movhi	r0, #2
 8005a56:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8005a58:	bd08      	pop	{r3, pc}
 8005a5a:	bf00      	nop
 8005a5c:	08009db8 	.word	0x08009db8

08005a60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005a60:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005a62:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005a66:	f7fd fd35 	bl	80034d4 <HAL_PCD_EP_Receive>
 8005a6a:	2803      	cmp	r0, #3
 8005a6c:	bf96      	itet	ls
 8005a6e:	4b02      	ldrls	r3, [pc, #8]	; (8005a78 <USBD_LL_PrepareReceive+0x18>)
 8005a70:	2002      	movhi	r0, #2
 8005a72:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;
}
 8005a74:	bd08      	pop	{r3, pc}
 8005a76:	bf00      	nop
 8005a78:	08009db8 	.word	0x08009db8

08005a7c <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005a7c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005a80:	f7fd bd42 	b.w	8003508 <HAL_PCD_EP_GetRxCount>

08005a84 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8005a84:	4800      	ldr	r0, [pc, #0]	; (8005a88 <USBD_static_malloc+0x4>)
 8005a86:	4770      	bx	lr
 8005a88:	200026e4 	.word	0x200026e4

08005a8c <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop

08005a90 <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop

08005a94 <__errno>:
 8005a94:	4b01      	ldr	r3, [pc, #4]	; (8005a9c <__errno+0x8>)
 8005a96:	6818      	ldr	r0, [r3, #0]
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	20000184 	.word	0x20000184

08005aa0 <__libc_init_array>:
 8005aa0:	b570      	push	{r4, r5, r6, lr}
 8005aa2:	2500      	movs	r5, #0
 8005aa4:	4e0c      	ldr	r6, [pc, #48]	; (8005ad8 <__libc_init_array+0x38>)
 8005aa6:	4c0d      	ldr	r4, [pc, #52]	; (8005adc <__libc_init_array+0x3c>)
 8005aa8:	1ba4      	subs	r4, r4, r6
 8005aaa:	10a4      	asrs	r4, r4, #2
 8005aac:	42a5      	cmp	r5, r4
 8005aae:	d109      	bne.n	8005ac4 <__libc_init_array+0x24>
 8005ab0:	f003 fd60 	bl	8009574 <_init>
 8005ab4:	2500      	movs	r5, #0
 8005ab6:	4e0a      	ldr	r6, [pc, #40]	; (8005ae0 <__libc_init_array+0x40>)
 8005ab8:	4c0a      	ldr	r4, [pc, #40]	; (8005ae4 <__libc_init_array+0x44>)
 8005aba:	1ba4      	subs	r4, r4, r6
 8005abc:	10a4      	asrs	r4, r4, #2
 8005abe:	42a5      	cmp	r5, r4
 8005ac0:	d105      	bne.n	8005ace <__libc_init_array+0x2e>
 8005ac2:	bd70      	pop	{r4, r5, r6, pc}
 8005ac4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ac8:	4798      	blx	r3
 8005aca:	3501      	adds	r5, #1
 8005acc:	e7ee      	b.n	8005aac <__libc_init_array+0xc>
 8005ace:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ad2:	4798      	blx	r3
 8005ad4:	3501      	adds	r5, #1
 8005ad6:	e7f2      	b.n	8005abe <__libc_init_array+0x1e>
 8005ad8:	0800a070 	.word	0x0800a070
 8005adc:	0800a070 	.word	0x0800a070
 8005ae0:	0800a070 	.word	0x0800a070
 8005ae4:	0800a074 	.word	0x0800a074

08005ae8 <memset>:
 8005ae8:	4603      	mov	r3, r0
 8005aea:	4402      	add	r2, r0
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d100      	bne.n	8005af2 <memset+0xa>
 8005af0:	4770      	bx	lr
 8005af2:	f803 1b01 	strb.w	r1, [r3], #1
 8005af6:	e7f9      	b.n	8005aec <memset+0x4>

08005af8 <__cvt>:
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005afe:	461e      	mov	r6, r3
 8005b00:	bfbb      	ittet	lt
 8005b02:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005b06:	461e      	movlt	r6, r3
 8005b08:	2300      	movge	r3, #0
 8005b0a:	232d      	movlt	r3, #45	; 0x2d
 8005b0c:	b088      	sub	sp, #32
 8005b0e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005b10:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8005b14:	f027 0720 	bic.w	r7, r7, #32
 8005b18:	2f46      	cmp	r7, #70	; 0x46
 8005b1a:	4614      	mov	r4, r2
 8005b1c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005b1e:	700b      	strb	r3, [r1, #0]
 8005b20:	d004      	beq.n	8005b2c <__cvt+0x34>
 8005b22:	2f45      	cmp	r7, #69	; 0x45
 8005b24:	d100      	bne.n	8005b28 <__cvt+0x30>
 8005b26:	3501      	adds	r5, #1
 8005b28:	2302      	movs	r3, #2
 8005b2a:	e000      	b.n	8005b2e <__cvt+0x36>
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	aa07      	add	r2, sp, #28
 8005b30:	9204      	str	r2, [sp, #16]
 8005b32:	aa06      	add	r2, sp, #24
 8005b34:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005b38:	e9cd 3500 	strd	r3, r5, [sp]
 8005b3c:	4622      	mov	r2, r4
 8005b3e:	4633      	mov	r3, r6
 8005b40:	f001 fd7e 	bl	8007640 <_dtoa_r>
 8005b44:	2f47      	cmp	r7, #71	; 0x47
 8005b46:	4680      	mov	r8, r0
 8005b48:	d102      	bne.n	8005b50 <__cvt+0x58>
 8005b4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b4c:	07db      	lsls	r3, r3, #31
 8005b4e:	d526      	bpl.n	8005b9e <__cvt+0xa6>
 8005b50:	2f46      	cmp	r7, #70	; 0x46
 8005b52:	eb08 0905 	add.w	r9, r8, r5
 8005b56:	d111      	bne.n	8005b7c <__cvt+0x84>
 8005b58:	f898 3000 	ldrb.w	r3, [r8]
 8005b5c:	2b30      	cmp	r3, #48	; 0x30
 8005b5e:	d10a      	bne.n	8005b76 <__cvt+0x7e>
 8005b60:	2200      	movs	r2, #0
 8005b62:	2300      	movs	r3, #0
 8005b64:	4620      	mov	r0, r4
 8005b66:	4631      	mov	r1, r6
 8005b68:	f7fa ff1e 	bl	80009a8 <__aeabi_dcmpeq>
 8005b6c:	b918      	cbnz	r0, 8005b76 <__cvt+0x7e>
 8005b6e:	f1c5 0501 	rsb	r5, r5, #1
 8005b72:	f8ca 5000 	str.w	r5, [sl]
 8005b76:	f8da 3000 	ldr.w	r3, [sl]
 8005b7a:	4499      	add	r9, r3
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	2300      	movs	r3, #0
 8005b80:	4620      	mov	r0, r4
 8005b82:	4631      	mov	r1, r6
 8005b84:	f7fa ff10 	bl	80009a8 <__aeabi_dcmpeq>
 8005b88:	b938      	cbnz	r0, 8005b9a <__cvt+0xa2>
 8005b8a:	2230      	movs	r2, #48	; 0x30
 8005b8c:	9b07      	ldr	r3, [sp, #28]
 8005b8e:	454b      	cmp	r3, r9
 8005b90:	d205      	bcs.n	8005b9e <__cvt+0xa6>
 8005b92:	1c59      	adds	r1, r3, #1
 8005b94:	9107      	str	r1, [sp, #28]
 8005b96:	701a      	strb	r2, [r3, #0]
 8005b98:	e7f8      	b.n	8005b8c <__cvt+0x94>
 8005b9a:	f8cd 901c 	str.w	r9, [sp, #28]
 8005b9e:	4640      	mov	r0, r8
 8005ba0:	9b07      	ldr	r3, [sp, #28]
 8005ba2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005ba4:	eba3 0308 	sub.w	r3, r3, r8
 8005ba8:	6013      	str	r3, [r2, #0]
 8005baa:	b008      	add	sp, #32
 8005bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005bb0 <__exponent>:
 8005bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bb2:	2900      	cmp	r1, #0
 8005bb4:	bfb4      	ite	lt
 8005bb6:	232d      	movlt	r3, #45	; 0x2d
 8005bb8:	232b      	movge	r3, #43	; 0x2b
 8005bba:	4604      	mov	r4, r0
 8005bbc:	bfb8      	it	lt
 8005bbe:	4249      	neglt	r1, r1
 8005bc0:	2909      	cmp	r1, #9
 8005bc2:	f804 2b02 	strb.w	r2, [r4], #2
 8005bc6:	7043      	strb	r3, [r0, #1]
 8005bc8:	dd21      	ble.n	8005c0e <__exponent+0x5e>
 8005bca:	f10d 0307 	add.w	r3, sp, #7
 8005bce:	461f      	mov	r7, r3
 8005bd0:	260a      	movs	r6, #10
 8005bd2:	fb91 f5f6 	sdiv	r5, r1, r6
 8005bd6:	fb06 1115 	mls	r1, r6, r5, r1
 8005bda:	2d09      	cmp	r5, #9
 8005bdc:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005be0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005be4:	f103 32ff 	add.w	r2, r3, #4294967295
 8005be8:	4629      	mov	r1, r5
 8005bea:	dc09      	bgt.n	8005c00 <__exponent+0x50>
 8005bec:	3130      	adds	r1, #48	; 0x30
 8005bee:	3b02      	subs	r3, #2
 8005bf0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005bf4:	42bb      	cmp	r3, r7
 8005bf6:	4622      	mov	r2, r4
 8005bf8:	d304      	bcc.n	8005c04 <__exponent+0x54>
 8005bfa:	1a10      	subs	r0, r2, r0
 8005bfc:	b003      	add	sp, #12
 8005bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c00:	4613      	mov	r3, r2
 8005c02:	e7e6      	b.n	8005bd2 <__exponent+0x22>
 8005c04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c08:	f804 2b01 	strb.w	r2, [r4], #1
 8005c0c:	e7f2      	b.n	8005bf4 <__exponent+0x44>
 8005c0e:	2330      	movs	r3, #48	; 0x30
 8005c10:	4419      	add	r1, r3
 8005c12:	7083      	strb	r3, [r0, #2]
 8005c14:	1d02      	adds	r2, r0, #4
 8005c16:	70c1      	strb	r1, [r0, #3]
 8005c18:	e7ef      	b.n	8005bfa <__exponent+0x4a>
	...

08005c1c <_printf_float>:
 8005c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c20:	b091      	sub	sp, #68	; 0x44
 8005c22:	460c      	mov	r4, r1
 8005c24:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8005c26:	4693      	mov	fp, r2
 8005c28:	461e      	mov	r6, r3
 8005c2a:	4605      	mov	r5, r0
 8005c2c:	f002 fdea 	bl	8008804 <_localeconv_r>
 8005c30:	6803      	ldr	r3, [r0, #0]
 8005c32:	4618      	mov	r0, r3
 8005c34:	9309      	str	r3, [sp, #36]	; 0x24
 8005c36:	f7fa fa8b 	bl	8000150 <strlen>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	930e      	str	r3, [sp, #56]	; 0x38
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	900a      	str	r0, [sp, #40]	; 0x28
 8005c42:	3307      	adds	r3, #7
 8005c44:	f023 0307 	bic.w	r3, r3, #7
 8005c48:	f103 0208 	add.w	r2, r3, #8
 8005c4c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8005c50:	f8d4 a000 	ldr.w	sl, [r4]
 8005c54:	603a      	str	r2, [r7, #0]
 8005c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005c5e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8005c62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c66:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c68:	f04f 32ff 	mov.w	r2, #4294967295
 8005c6c:	4ba6      	ldr	r3, [pc, #664]	; (8005f08 <_printf_float+0x2ec>)
 8005c6e:	4638      	mov	r0, r7
 8005c70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c72:	f7fa fecb 	bl	8000a0c <__aeabi_dcmpun>
 8005c76:	bb68      	cbnz	r0, 8005cd4 <_printf_float+0xb8>
 8005c78:	f04f 32ff 	mov.w	r2, #4294967295
 8005c7c:	4ba2      	ldr	r3, [pc, #648]	; (8005f08 <_printf_float+0x2ec>)
 8005c7e:	4638      	mov	r0, r7
 8005c80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c82:	f7fa fea5 	bl	80009d0 <__aeabi_dcmple>
 8005c86:	bb28      	cbnz	r0, 8005cd4 <_printf_float+0xb8>
 8005c88:	2200      	movs	r2, #0
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	4638      	mov	r0, r7
 8005c8e:	4649      	mov	r1, r9
 8005c90:	f7fa fe94 	bl	80009bc <__aeabi_dcmplt>
 8005c94:	b110      	cbz	r0, 8005c9c <_printf_float+0x80>
 8005c96:	232d      	movs	r3, #45	; 0x2d
 8005c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c9c:	4f9b      	ldr	r7, [pc, #620]	; (8005f0c <_printf_float+0x2f0>)
 8005c9e:	4b9c      	ldr	r3, [pc, #624]	; (8005f10 <_printf_float+0x2f4>)
 8005ca0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ca4:	bf98      	it	ls
 8005ca6:	461f      	movls	r7, r3
 8005ca8:	2303      	movs	r3, #3
 8005caa:	f04f 0900 	mov.w	r9, #0
 8005cae:	6123      	str	r3, [r4, #16]
 8005cb0:	f02a 0304 	bic.w	r3, sl, #4
 8005cb4:	6023      	str	r3, [r4, #0]
 8005cb6:	9600      	str	r6, [sp, #0]
 8005cb8:	465b      	mov	r3, fp
 8005cba:	aa0f      	add	r2, sp, #60	; 0x3c
 8005cbc:	4621      	mov	r1, r4
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	f000 f9e2 	bl	8006088 <_printf_common>
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	f040 8090 	bne.w	8005dea <_printf_float+0x1ce>
 8005cca:	f04f 30ff 	mov.w	r0, #4294967295
 8005cce:	b011      	add	sp, #68	; 0x44
 8005cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cd4:	463a      	mov	r2, r7
 8005cd6:	464b      	mov	r3, r9
 8005cd8:	4638      	mov	r0, r7
 8005cda:	4649      	mov	r1, r9
 8005cdc:	f7fa fe96 	bl	8000a0c <__aeabi_dcmpun>
 8005ce0:	b110      	cbz	r0, 8005ce8 <_printf_float+0xcc>
 8005ce2:	4f8c      	ldr	r7, [pc, #560]	; (8005f14 <_printf_float+0x2f8>)
 8005ce4:	4b8c      	ldr	r3, [pc, #560]	; (8005f18 <_printf_float+0x2fc>)
 8005ce6:	e7db      	b.n	8005ca0 <_printf_float+0x84>
 8005ce8:	6863      	ldr	r3, [r4, #4]
 8005cea:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8005cee:	1c59      	adds	r1, r3, #1
 8005cf0:	a80d      	add	r0, sp, #52	; 0x34
 8005cf2:	a90e      	add	r1, sp, #56	; 0x38
 8005cf4:	d140      	bne.n	8005d78 <_printf_float+0x15c>
 8005cf6:	2306      	movs	r3, #6
 8005cf8:	6063      	str	r3, [r4, #4]
 8005cfa:	f04f 0c00 	mov.w	ip, #0
 8005cfe:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005d02:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005d06:	6863      	ldr	r3, [r4, #4]
 8005d08:	6022      	str	r2, [r4, #0]
 8005d0a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	463a      	mov	r2, r7
 8005d12:	464b      	mov	r3, r9
 8005d14:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005d18:	4628      	mov	r0, r5
 8005d1a:	f7ff feed 	bl	8005af8 <__cvt>
 8005d1e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8005d22:	2b47      	cmp	r3, #71	; 0x47
 8005d24:	4607      	mov	r7, r0
 8005d26:	d109      	bne.n	8005d3c <_printf_float+0x120>
 8005d28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d2a:	1cd8      	adds	r0, r3, #3
 8005d2c:	db02      	blt.n	8005d34 <_printf_float+0x118>
 8005d2e:	6862      	ldr	r2, [r4, #4]
 8005d30:	4293      	cmp	r3, r2
 8005d32:	dd47      	ble.n	8005dc4 <_printf_float+0x1a8>
 8005d34:	f1a8 0802 	sub.w	r8, r8, #2
 8005d38:	fa5f f888 	uxtb.w	r8, r8
 8005d3c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005d40:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005d42:	d824      	bhi.n	8005d8e <_printf_float+0x172>
 8005d44:	3901      	subs	r1, #1
 8005d46:	4642      	mov	r2, r8
 8005d48:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d4c:	910d      	str	r1, [sp, #52]	; 0x34
 8005d4e:	f7ff ff2f 	bl	8005bb0 <__exponent>
 8005d52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d54:	4681      	mov	r9, r0
 8005d56:	1813      	adds	r3, r2, r0
 8005d58:	2a01      	cmp	r2, #1
 8005d5a:	6123      	str	r3, [r4, #16]
 8005d5c:	dc02      	bgt.n	8005d64 <_printf_float+0x148>
 8005d5e:	6822      	ldr	r2, [r4, #0]
 8005d60:	07d1      	lsls	r1, r2, #31
 8005d62:	d501      	bpl.n	8005d68 <_printf_float+0x14c>
 8005d64:	3301      	adds	r3, #1
 8005d66:	6123      	str	r3, [r4, #16]
 8005d68:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d0a2      	beq.n	8005cb6 <_printf_float+0x9a>
 8005d70:	232d      	movs	r3, #45	; 0x2d
 8005d72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d76:	e79e      	b.n	8005cb6 <_printf_float+0x9a>
 8005d78:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005d7c:	f000 816e 	beq.w	800605c <_printf_float+0x440>
 8005d80:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d84:	d1b9      	bne.n	8005cfa <_printf_float+0xde>
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1b7      	bne.n	8005cfa <_printf_float+0xde>
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e7b4      	b.n	8005cf8 <_printf_float+0xdc>
 8005d8e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8005d92:	d119      	bne.n	8005dc8 <_printf_float+0x1ac>
 8005d94:	2900      	cmp	r1, #0
 8005d96:	6863      	ldr	r3, [r4, #4]
 8005d98:	dd0c      	ble.n	8005db4 <_printf_float+0x198>
 8005d9a:	6121      	str	r1, [r4, #16]
 8005d9c:	b913      	cbnz	r3, 8005da4 <_printf_float+0x188>
 8005d9e:	6822      	ldr	r2, [r4, #0]
 8005da0:	07d2      	lsls	r2, r2, #31
 8005da2:	d502      	bpl.n	8005daa <_printf_float+0x18e>
 8005da4:	3301      	adds	r3, #1
 8005da6:	440b      	add	r3, r1
 8005da8:	6123      	str	r3, [r4, #16]
 8005daa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dac:	f04f 0900 	mov.w	r9, #0
 8005db0:	65a3      	str	r3, [r4, #88]	; 0x58
 8005db2:	e7d9      	b.n	8005d68 <_printf_float+0x14c>
 8005db4:	b913      	cbnz	r3, 8005dbc <_printf_float+0x1a0>
 8005db6:	6822      	ldr	r2, [r4, #0]
 8005db8:	07d0      	lsls	r0, r2, #31
 8005dba:	d501      	bpl.n	8005dc0 <_printf_float+0x1a4>
 8005dbc:	3302      	adds	r3, #2
 8005dbe:	e7f3      	b.n	8005da8 <_printf_float+0x18c>
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e7f1      	b.n	8005da8 <_printf_float+0x18c>
 8005dc4:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005dc8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	db05      	blt.n	8005ddc <_printf_float+0x1c0>
 8005dd0:	6822      	ldr	r2, [r4, #0]
 8005dd2:	6123      	str	r3, [r4, #16]
 8005dd4:	07d1      	lsls	r1, r2, #31
 8005dd6:	d5e8      	bpl.n	8005daa <_printf_float+0x18e>
 8005dd8:	3301      	adds	r3, #1
 8005dda:	e7e5      	b.n	8005da8 <_printf_float+0x18c>
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	bfcc      	ite	gt
 8005de0:	2301      	movgt	r3, #1
 8005de2:	f1c3 0302 	rsble	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	e7de      	b.n	8005da8 <_printf_float+0x18c>
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	055a      	lsls	r2, r3, #21
 8005dee:	d407      	bmi.n	8005e00 <_printf_float+0x1e4>
 8005df0:	6923      	ldr	r3, [r4, #16]
 8005df2:	463a      	mov	r2, r7
 8005df4:	4659      	mov	r1, fp
 8005df6:	4628      	mov	r0, r5
 8005df8:	47b0      	blx	r6
 8005dfa:	3001      	adds	r0, #1
 8005dfc:	d129      	bne.n	8005e52 <_printf_float+0x236>
 8005dfe:	e764      	b.n	8005cca <_printf_float+0xae>
 8005e00:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005e04:	f240 80d7 	bls.w	8005fb6 <_printf_float+0x39a>
 8005e08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	2300      	movs	r3, #0
 8005e10:	f7fa fdca 	bl	80009a8 <__aeabi_dcmpeq>
 8005e14:	b388      	cbz	r0, 8005e7a <_printf_float+0x25e>
 8005e16:	2301      	movs	r3, #1
 8005e18:	4a40      	ldr	r2, [pc, #256]	; (8005f1c <_printf_float+0x300>)
 8005e1a:	4659      	mov	r1, fp
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	47b0      	blx	r6
 8005e20:	3001      	adds	r0, #1
 8005e22:	f43f af52 	beq.w	8005cca <_printf_float+0xae>
 8005e26:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	db02      	blt.n	8005e34 <_printf_float+0x218>
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	07d8      	lsls	r0, r3, #31
 8005e32:	d50e      	bpl.n	8005e52 <_printf_float+0x236>
 8005e34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e38:	4659      	mov	r1, fp
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	47b0      	blx	r6
 8005e3e:	3001      	adds	r0, #1
 8005e40:	f43f af43 	beq.w	8005cca <_printf_float+0xae>
 8005e44:	2700      	movs	r7, #0
 8005e46:	f104 081a 	add.w	r8, r4, #26
 8005e4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	42bb      	cmp	r3, r7
 8005e50:	dc09      	bgt.n	8005e66 <_printf_float+0x24a>
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	079f      	lsls	r7, r3, #30
 8005e56:	f100 80fd 	bmi.w	8006054 <_printf_float+0x438>
 8005e5a:	68e0      	ldr	r0, [r4, #12]
 8005e5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e5e:	4298      	cmp	r0, r3
 8005e60:	bfb8      	it	lt
 8005e62:	4618      	movlt	r0, r3
 8005e64:	e733      	b.n	8005cce <_printf_float+0xb2>
 8005e66:	2301      	movs	r3, #1
 8005e68:	4642      	mov	r2, r8
 8005e6a:	4659      	mov	r1, fp
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	47b0      	blx	r6
 8005e70:	3001      	adds	r0, #1
 8005e72:	f43f af2a 	beq.w	8005cca <_printf_float+0xae>
 8005e76:	3701      	adds	r7, #1
 8005e78:	e7e7      	b.n	8005e4a <_printf_float+0x22e>
 8005e7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	dc2b      	bgt.n	8005ed8 <_printf_float+0x2bc>
 8005e80:	2301      	movs	r3, #1
 8005e82:	4a26      	ldr	r2, [pc, #152]	; (8005f1c <_printf_float+0x300>)
 8005e84:	4659      	mov	r1, fp
 8005e86:	4628      	mov	r0, r5
 8005e88:	47b0      	blx	r6
 8005e8a:	3001      	adds	r0, #1
 8005e8c:	f43f af1d 	beq.w	8005cca <_printf_float+0xae>
 8005e90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e92:	b923      	cbnz	r3, 8005e9e <_printf_float+0x282>
 8005e94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e96:	b913      	cbnz	r3, 8005e9e <_printf_float+0x282>
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	07d9      	lsls	r1, r3, #31
 8005e9c:	d5d9      	bpl.n	8005e52 <_printf_float+0x236>
 8005e9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ea2:	4659      	mov	r1, fp
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	47b0      	blx	r6
 8005ea8:	3001      	adds	r0, #1
 8005eaa:	f43f af0e 	beq.w	8005cca <_printf_float+0xae>
 8005eae:	f04f 0800 	mov.w	r8, #0
 8005eb2:	f104 091a 	add.w	r9, r4, #26
 8005eb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005eb8:	425b      	negs	r3, r3
 8005eba:	4543      	cmp	r3, r8
 8005ebc:	dc01      	bgt.n	8005ec2 <_printf_float+0x2a6>
 8005ebe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ec0:	e797      	b.n	8005df2 <_printf_float+0x1d6>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	464a      	mov	r2, r9
 8005ec6:	4659      	mov	r1, fp
 8005ec8:	4628      	mov	r0, r5
 8005eca:	47b0      	blx	r6
 8005ecc:	3001      	adds	r0, #1
 8005ece:	f43f aefc 	beq.w	8005cca <_printf_float+0xae>
 8005ed2:	f108 0801 	add.w	r8, r8, #1
 8005ed6:	e7ee      	b.n	8005eb6 <_printf_float+0x29a>
 8005ed8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005eda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005edc:	429a      	cmp	r2, r3
 8005ede:	bfa8      	it	ge
 8005ee0:	461a      	movge	r2, r3
 8005ee2:	2a00      	cmp	r2, #0
 8005ee4:	4690      	mov	r8, r2
 8005ee6:	dd07      	ble.n	8005ef8 <_printf_float+0x2dc>
 8005ee8:	4613      	mov	r3, r2
 8005eea:	4659      	mov	r1, fp
 8005eec:	463a      	mov	r2, r7
 8005eee:	4628      	mov	r0, r5
 8005ef0:	47b0      	blx	r6
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	f43f aee9 	beq.w	8005cca <_printf_float+0xae>
 8005ef8:	f104 031a 	add.w	r3, r4, #26
 8005efc:	f04f 0a00 	mov.w	sl, #0
 8005f00:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005f04:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f06:	e015      	b.n	8005f34 <_printf_float+0x318>
 8005f08:	7fefffff 	.word	0x7fefffff
 8005f0c:	08009dc0 	.word	0x08009dc0
 8005f10:	08009dbc 	.word	0x08009dbc
 8005f14:	08009dc8 	.word	0x08009dc8
 8005f18:	08009dc4 	.word	0x08009dc4
 8005f1c:	08009dcc 	.word	0x08009dcc
 8005f20:	2301      	movs	r3, #1
 8005f22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f24:	4659      	mov	r1, fp
 8005f26:	4628      	mov	r0, r5
 8005f28:	47b0      	blx	r6
 8005f2a:	3001      	adds	r0, #1
 8005f2c:	f43f aecd 	beq.w	8005cca <_printf_float+0xae>
 8005f30:	f10a 0a01 	add.w	sl, sl, #1
 8005f34:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005f38:	eba9 0308 	sub.w	r3, r9, r8
 8005f3c:	4553      	cmp	r3, sl
 8005f3e:	dcef      	bgt.n	8005f20 <_printf_float+0x304>
 8005f40:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f44:	429a      	cmp	r2, r3
 8005f46:	444f      	add	r7, r9
 8005f48:	db14      	blt.n	8005f74 <_printf_float+0x358>
 8005f4a:	6823      	ldr	r3, [r4, #0]
 8005f4c:	07da      	lsls	r2, r3, #31
 8005f4e:	d411      	bmi.n	8005f74 <_printf_float+0x358>
 8005f50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f52:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005f54:	eba3 0209 	sub.w	r2, r3, r9
 8005f58:	eba3 0901 	sub.w	r9, r3, r1
 8005f5c:	4591      	cmp	r9, r2
 8005f5e:	bfa8      	it	ge
 8005f60:	4691      	movge	r9, r2
 8005f62:	f1b9 0f00 	cmp.w	r9, #0
 8005f66:	dc0d      	bgt.n	8005f84 <_printf_float+0x368>
 8005f68:	2700      	movs	r7, #0
 8005f6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f6e:	f104 081a 	add.w	r8, r4, #26
 8005f72:	e018      	b.n	8005fa6 <_printf_float+0x38a>
 8005f74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f78:	4659      	mov	r1, fp
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	47b0      	blx	r6
 8005f7e:	3001      	adds	r0, #1
 8005f80:	d1e6      	bne.n	8005f50 <_printf_float+0x334>
 8005f82:	e6a2      	b.n	8005cca <_printf_float+0xae>
 8005f84:	464b      	mov	r3, r9
 8005f86:	463a      	mov	r2, r7
 8005f88:	4659      	mov	r1, fp
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	47b0      	blx	r6
 8005f8e:	3001      	adds	r0, #1
 8005f90:	d1ea      	bne.n	8005f68 <_printf_float+0x34c>
 8005f92:	e69a      	b.n	8005cca <_printf_float+0xae>
 8005f94:	2301      	movs	r3, #1
 8005f96:	4642      	mov	r2, r8
 8005f98:	4659      	mov	r1, fp
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	47b0      	blx	r6
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	f43f ae93 	beq.w	8005cca <_printf_float+0xae>
 8005fa4:	3701      	adds	r7, #1
 8005fa6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005faa:	1a9b      	subs	r3, r3, r2
 8005fac:	eba3 0309 	sub.w	r3, r3, r9
 8005fb0:	42bb      	cmp	r3, r7
 8005fb2:	dcef      	bgt.n	8005f94 <_printf_float+0x378>
 8005fb4:	e74d      	b.n	8005e52 <_printf_float+0x236>
 8005fb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fb8:	2a01      	cmp	r2, #1
 8005fba:	dc01      	bgt.n	8005fc0 <_printf_float+0x3a4>
 8005fbc:	07db      	lsls	r3, r3, #31
 8005fbe:	d538      	bpl.n	8006032 <_printf_float+0x416>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	463a      	mov	r2, r7
 8005fc4:	4659      	mov	r1, fp
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	47b0      	blx	r6
 8005fca:	3001      	adds	r0, #1
 8005fcc:	f43f ae7d 	beq.w	8005cca <_printf_float+0xae>
 8005fd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fd4:	4659      	mov	r1, fp
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	47b0      	blx	r6
 8005fda:	3001      	adds	r0, #1
 8005fdc:	f107 0701 	add.w	r7, r7, #1
 8005fe0:	f43f ae73 	beq.w	8005cca <_printf_float+0xae>
 8005fe4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fe8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fea:	2200      	movs	r2, #0
 8005fec:	f103 38ff 	add.w	r8, r3, #4294967295
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	f7fa fcd9 	bl	80009a8 <__aeabi_dcmpeq>
 8005ff6:	b9c0      	cbnz	r0, 800602a <_printf_float+0x40e>
 8005ff8:	4643      	mov	r3, r8
 8005ffa:	463a      	mov	r2, r7
 8005ffc:	4659      	mov	r1, fp
 8005ffe:	4628      	mov	r0, r5
 8006000:	47b0      	blx	r6
 8006002:	3001      	adds	r0, #1
 8006004:	d10d      	bne.n	8006022 <_printf_float+0x406>
 8006006:	e660      	b.n	8005cca <_printf_float+0xae>
 8006008:	2301      	movs	r3, #1
 800600a:	4642      	mov	r2, r8
 800600c:	4659      	mov	r1, fp
 800600e:	4628      	mov	r0, r5
 8006010:	47b0      	blx	r6
 8006012:	3001      	adds	r0, #1
 8006014:	f43f ae59 	beq.w	8005cca <_printf_float+0xae>
 8006018:	3701      	adds	r7, #1
 800601a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800601c:	3b01      	subs	r3, #1
 800601e:	42bb      	cmp	r3, r7
 8006020:	dcf2      	bgt.n	8006008 <_printf_float+0x3ec>
 8006022:	464b      	mov	r3, r9
 8006024:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006028:	e6e4      	b.n	8005df4 <_printf_float+0x1d8>
 800602a:	2700      	movs	r7, #0
 800602c:	f104 081a 	add.w	r8, r4, #26
 8006030:	e7f3      	b.n	800601a <_printf_float+0x3fe>
 8006032:	2301      	movs	r3, #1
 8006034:	e7e1      	b.n	8005ffa <_printf_float+0x3de>
 8006036:	2301      	movs	r3, #1
 8006038:	4642      	mov	r2, r8
 800603a:	4659      	mov	r1, fp
 800603c:	4628      	mov	r0, r5
 800603e:	47b0      	blx	r6
 8006040:	3001      	adds	r0, #1
 8006042:	f43f ae42 	beq.w	8005cca <_printf_float+0xae>
 8006046:	3701      	adds	r7, #1
 8006048:	68e3      	ldr	r3, [r4, #12]
 800604a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800604c:	1a9b      	subs	r3, r3, r2
 800604e:	42bb      	cmp	r3, r7
 8006050:	dcf1      	bgt.n	8006036 <_printf_float+0x41a>
 8006052:	e702      	b.n	8005e5a <_printf_float+0x23e>
 8006054:	2700      	movs	r7, #0
 8006056:	f104 0819 	add.w	r8, r4, #25
 800605a:	e7f5      	b.n	8006048 <_printf_float+0x42c>
 800605c:	2b00      	cmp	r3, #0
 800605e:	f43f ae94 	beq.w	8005d8a <_printf_float+0x16e>
 8006062:	f04f 0c00 	mov.w	ip, #0
 8006066:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800606a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800606e:	6022      	str	r2, [r4, #0]
 8006070:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8006074:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	463a      	mov	r2, r7
 800607c:	464b      	mov	r3, r9
 800607e:	4628      	mov	r0, r5
 8006080:	f7ff fd3a 	bl	8005af8 <__cvt>
 8006084:	4607      	mov	r7, r0
 8006086:	e64f      	b.n	8005d28 <_printf_float+0x10c>

08006088 <_printf_common>:
 8006088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800608c:	4691      	mov	r9, r2
 800608e:	461f      	mov	r7, r3
 8006090:	688a      	ldr	r2, [r1, #8]
 8006092:	690b      	ldr	r3, [r1, #16]
 8006094:	4606      	mov	r6, r0
 8006096:	4293      	cmp	r3, r2
 8006098:	bfb8      	it	lt
 800609a:	4613      	movlt	r3, r2
 800609c:	f8c9 3000 	str.w	r3, [r9]
 80060a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060a4:	460c      	mov	r4, r1
 80060a6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060aa:	b112      	cbz	r2, 80060b2 <_printf_common+0x2a>
 80060ac:	3301      	adds	r3, #1
 80060ae:	f8c9 3000 	str.w	r3, [r9]
 80060b2:	6823      	ldr	r3, [r4, #0]
 80060b4:	0699      	lsls	r1, r3, #26
 80060b6:	bf42      	ittt	mi
 80060b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80060bc:	3302      	addmi	r3, #2
 80060be:	f8c9 3000 	strmi.w	r3, [r9]
 80060c2:	6825      	ldr	r5, [r4, #0]
 80060c4:	f015 0506 	ands.w	r5, r5, #6
 80060c8:	d107      	bne.n	80060da <_printf_common+0x52>
 80060ca:	f104 0a19 	add.w	sl, r4, #25
 80060ce:	68e3      	ldr	r3, [r4, #12]
 80060d0:	f8d9 2000 	ldr.w	r2, [r9]
 80060d4:	1a9b      	subs	r3, r3, r2
 80060d6:	42ab      	cmp	r3, r5
 80060d8:	dc29      	bgt.n	800612e <_printf_common+0xa6>
 80060da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80060de:	6822      	ldr	r2, [r4, #0]
 80060e0:	3300      	adds	r3, #0
 80060e2:	bf18      	it	ne
 80060e4:	2301      	movne	r3, #1
 80060e6:	0692      	lsls	r2, r2, #26
 80060e8:	d42e      	bmi.n	8006148 <_printf_common+0xc0>
 80060ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060ee:	4639      	mov	r1, r7
 80060f0:	4630      	mov	r0, r6
 80060f2:	47c0      	blx	r8
 80060f4:	3001      	adds	r0, #1
 80060f6:	d021      	beq.n	800613c <_printf_common+0xb4>
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	68e5      	ldr	r5, [r4, #12]
 80060fc:	f003 0306 	and.w	r3, r3, #6
 8006100:	2b04      	cmp	r3, #4
 8006102:	bf18      	it	ne
 8006104:	2500      	movne	r5, #0
 8006106:	f8d9 2000 	ldr.w	r2, [r9]
 800610a:	f04f 0900 	mov.w	r9, #0
 800610e:	bf08      	it	eq
 8006110:	1aad      	subeq	r5, r5, r2
 8006112:	68a3      	ldr	r3, [r4, #8]
 8006114:	6922      	ldr	r2, [r4, #16]
 8006116:	bf08      	it	eq
 8006118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800611c:	4293      	cmp	r3, r2
 800611e:	bfc4      	itt	gt
 8006120:	1a9b      	subgt	r3, r3, r2
 8006122:	18ed      	addgt	r5, r5, r3
 8006124:	341a      	adds	r4, #26
 8006126:	454d      	cmp	r5, r9
 8006128:	d11a      	bne.n	8006160 <_printf_common+0xd8>
 800612a:	2000      	movs	r0, #0
 800612c:	e008      	b.n	8006140 <_printf_common+0xb8>
 800612e:	2301      	movs	r3, #1
 8006130:	4652      	mov	r2, sl
 8006132:	4639      	mov	r1, r7
 8006134:	4630      	mov	r0, r6
 8006136:	47c0      	blx	r8
 8006138:	3001      	adds	r0, #1
 800613a:	d103      	bne.n	8006144 <_printf_common+0xbc>
 800613c:	f04f 30ff 	mov.w	r0, #4294967295
 8006140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006144:	3501      	adds	r5, #1
 8006146:	e7c2      	b.n	80060ce <_printf_common+0x46>
 8006148:	2030      	movs	r0, #48	; 0x30
 800614a:	18e1      	adds	r1, r4, r3
 800614c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006150:	1c5a      	adds	r2, r3, #1
 8006152:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006156:	4422      	add	r2, r4
 8006158:	3302      	adds	r3, #2
 800615a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800615e:	e7c4      	b.n	80060ea <_printf_common+0x62>
 8006160:	2301      	movs	r3, #1
 8006162:	4622      	mov	r2, r4
 8006164:	4639      	mov	r1, r7
 8006166:	4630      	mov	r0, r6
 8006168:	47c0      	blx	r8
 800616a:	3001      	adds	r0, #1
 800616c:	d0e6      	beq.n	800613c <_printf_common+0xb4>
 800616e:	f109 0901 	add.w	r9, r9, #1
 8006172:	e7d8      	b.n	8006126 <_printf_common+0x9e>

08006174 <_printf_i>:
 8006174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006178:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800617c:	460c      	mov	r4, r1
 800617e:	7e09      	ldrb	r1, [r1, #24]
 8006180:	b085      	sub	sp, #20
 8006182:	296e      	cmp	r1, #110	; 0x6e
 8006184:	4617      	mov	r7, r2
 8006186:	4606      	mov	r6, r0
 8006188:	4698      	mov	r8, r3
 800618a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800618c:	f000 80b3 	beq.w	80062f6 <_printf_i+0x182>
 8006190:	d822      	bhi.n	80061d8 <_printf_i+0x64>
 8006192:	2963      	cmp	r1, #99	; 0x63
 8006194:	d036      	beq.n	8006204 <_printf_i+0x90>
 8006196:	d80a      	bhi.n	80061ae <_printf_i+0x3a>
 8006198:	2900      	cmp	r1, #0
 800619a:	f000 80b9 	beq.w	8006310 <_printf_i+0x19c>
 800619e:	2958      	cmp	r1, #88	; 0x58
 80061a0:	f000 8083 	beq.w	80062aa <_printf_i+0x136>
 80061a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80061ac:	e032      	b.n	8006214 <_printf_i+0xa0>
 80061ae:	2964      	cmp	r1, #100	; 0x64
 80061b0:	d001      	beq.n	80061b6 <_printf_i+0x42>
 80061b2:	2969      	cmp	r1, #105	; 0x69
 80061b4:	d1f6      	bne.n	80061a4 <_printf_i+0x30>
 80061b6:	6820      	ldr	r0, [r4, #0]
 80061b8:	6813      	ldr	r3, [r2, #0]
 80061ba:	0605      	lsls	r5, r0, #24
 80061bc:	f103 0104 	add.w	r1, r3, #4
 80061c0:	d52a      	bpl.n	8006218 <_printf_i+0xa4>
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6011      	str	r1, [r2, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	da03      	bge.n	80061d2 <_printf_i+0x5e>
 80061ca:	222d      	movs	r2, #45	; 0x2d
 80061cc:	425b      	negs	r3, r3
 80061ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80061d2:	486f      	ldr	r0, [pc, #444]	; (8006390 <_printf_i+0x21c>)
 80061d4:	220a      	movs	r2, #10
 80061d6:	e039      	b.n	800624c <_printf_i+0xd8>
 80061d8:	2973      	cmp	r1, #115	; 0x73
 80061da:	f000 809d 	beq.w	8006318 <_printf_i+0x1a4>
 80061de:	d808      	bhi.n	80061f2 <_printf_i+0x7e>
 80061e0:	296f      	cmp	r1, #111	; 0x6f
 80061e2:	d020      	beq.n	8006226 <_printf_i+0xb2>
 80061e4:	2970      	cmp	r1, #112	; 0x70
 80061e6:	d1dd      	bne.n	80061a4 <_printf_i+0x30>
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	f043 0320 	orr.w	r3, r3, #32
 80061ee:	6023      	str	r3, [r4, #0]
 80061f0:	e003      	b.n	80061fa <_printf_i+0x86>
 80061f2:	2975      	cmp	r1, #117	; 0x75
 80061f4:	d017      	beq.n	8006226 <_printf_i+0xb2>
 80061f6:	2978      	cmp	r1, #120	; 0x78
 80061f8:	d1d4      	bne.n	80061a4 <_printf_i+0x30>
 80061fa:	2378      	movs	r3, #120	; 0x78
 80061fc:	4865      	ldr	r0, [pc, #404]	; (8006394 <_printf_i+0x220>)
 80061fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006202:	e055      	b.n	80062b0 <_printf_i+0x13c>
 8006204:	6813      	ldr	r3, [r2, #0]
 8006206:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800620a:	1d19      	adds	r1, r3, #4
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	6011      	str	r1, [r2, #0]
 8006210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006214:	2301      	movs	r3, #1
 8006216:	e08c      	b.n	8006332 <_printf_i+0x1be>
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800621e:	6011      	str	r1, [r2, #0]
 8006220:	bf18      	it	ne
 8006222:	b21b      	sxthne	r3, r3
 8006224:	e7cf      	b.n	80061c6 <_printf_i+0x52>
 8006226:	6813      	ldr	r3, [r2, #0]
 8006228:	6825      	ldr	r5, [r4, #0]
 800622a:	1d18      	adds	r0, r3, #4
 800622c:	6010      	str	r0, [r2, #0]
 800622e:	0628      	lsls	r0, r5, #24
 8006230:	d501      	bpl.n	8006236 <_printf_i+0xc2>
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	e002      	b.n	800623c <_printf_i+0xc8>
 8006236:	0668      	lsls	r0, r5, #25
 8006238:	d5fb      	bpl.n	8006232 <_printf_i+0xbe>
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	296f      	cmp	r1, #111	; 0x6f
 800623e:	bf14      	ite	ne
 8006240:	220a      	movne	r2, #10
 8006242:	2208      	moveq	r2, #8
 8006244:	4852      	ldr	r0, [pc, #328]	; (8006390 <_printf_i+0x21c>)
 8006246:	2100      	movs	r1, #0
 8006248:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800624c:	6865      	ldr	r5, [r4, #4]
 800624e:	2d00      	cmp	r5, #0
 8006250:	60a5      	str	r5, [r4, #8]
 8006252:	f2c0 8095 	blt.w	8006380 <_printf_i+0x20c>
 8006256:	6821      	ldr	r1, [r4, #0]
 8006258:	f021 0104 	bic.w	r1, r1, #4
 800625c:	6021      	str	r1, [r4, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d13d      	bne.n	80062de <_printf_i+0x16a>
 8006262:	2d00      	cmp	r5, #0
 8006264:	f040 808e 	bne.w	8006384 <_printf_i+0x210>
 8006268:	4665      	mov	r5, ip
 800626a:	2a08      	cmp	r2, #8
 800626c:	d10b      	bne.n	8006286 <_printf_i+0x112>
 800626e:	6823      	ldr	r3, [r4, #0]
 8006270:	07db      	lsls	r3, r3, #31
 8006272:	d508      	bpl.n	8006286 <_printf_i+0x112>
 8006274:	6923      	ldr	r3, [r4, #16]
 8006276:	6862      	ldr	r2, [r4, #4]
 8006278:	429a      	cmp	r2, r3
 800627a:	bfde      	ittt	le
 800627c:	2330      	movle	r3, #48	; 0x30
 800627e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006282:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006286:	ebac 0305 	sub.w	r3, ip, r5
 800628a:	6123      	str	r3, [r4, #16]
 800628c:	f8cd 8000 	str.w	r8, [sp]
 8006290:	463b      	mov	r3, r7
 8006292:	aa03      	add	r2, sp, #12
 8006294:	4621      	mov	r1, r4
 8006296:	4630      	mov	r0, r6
 8006298:	f7ff fef6 	bl	8006088 <_printf_common>
 800629c:	3001      	adds	r0, #1
 800629e:	d14d      	bne.n	800633c <_printf_i+0x1c8>
 80062a0:	f04f 30ff 	mov.w	r0, #4294967295
 80062a4:	b005      	add	sp, #20
 80062a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062aa:	4839      	ldr	r0, [pc, #228]	; (8006390 <_printf_i+0x21c>)
 80062ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80062b0:	6813      	ldr	r3, [r2, #0]
 80062b2:	6821      	ldr	r1, [r4, #0]
 80062b4:	1d1d      	adds	r5, r3, #4
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6015      	str	r5, [r2, #0]
 80062ba:	060a      	lsls	r2, r1, #24
 80062bc:	d50b      	bpl.n	80062d6 <_printf_i+0x162>
 80062be:	07ca      	lsls	r2, r1, #31
 80062c0:	bf44      	itt	mi
 80062c2:	f041 0120 	orrmi.w	r1, r1, #32
 80062c6:	6021      	strmi	r1, [r4, #0]
 80062c8:	b91b      	cbnz	r3, 80062d2 <_printf_i+0x15e>
 80062ca:	6822      	ldr	r2, [r4, #0]
 80062cc:	f022 0220 	bic.w	r2, r2, #32
 80062d0:	6022      	str	r2, [r4, #0]
 80062d2:	2210      	movs	r2, #16
 80062d4:	e7b7      	b.n	8006246 <_printf_i+0xd2>
 80062d6:	064d      	lsls	r5, r1, #25
 80062d8:	bf48      	it	mi
 80062da:	b29b      	uxthmi	r3, r3
 80062dc:	e7ef      	b.n	80062be <_printf_i+0x14a>
 80062de:	4665      	mov	r5, ip
 80062e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80062e4:	fb02 3311 	mls	r3, r2, r1, r3
 80062e8:	5cc3      	ldrb	r3, [r0, r3]
 80062ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80062ee:	460b      	mov	r3, r1
 80062f0:	2900      	cmp	r1, #0
 80062f2:	d1f5      	bne.n	80062e0 <_printf_i+0x16c>
 80062f4:	e7b9      	b.n	800626a <_printf_i+0xf6>
 80062f6:	6813      	ldr	r3, [r2, #0]
 80062f8:	6825      	ldr	r5, [r4, #0]
 80062fa:	1d18      	adds	r0, r3, #4
 80062fc:	6961      	ldr	r1, [r4, #20]
 80062fe:	6010      	str	r0, [r2, #0]
 8006300:	0628      	lsls	r0, r5, #24
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	d501      	bpl.n	800630a <_printf_i+0x196>
 8006306:	6019      	str	r1, [r3, #0]
 8006308:	e002      	b.n	8006310 <_printf_i+0x19c>
 800630a:	066a      	lsls	r2, r5, #25
 800630c:	d5fb      	bpl.n	8006306 <_printf_i+0x192>
 800630e:	8019      	strh	r1, [r3, #0]
 8006310:	2300      	movs	r3, #0
 8006312:	4665      	mov	r5, ip
 8006314:	6123      	str	r3, [r4, #16]
 8006316:	e7b9      	b.n	800628c <_printf_i+0x118>
 8006318:	6813      	ldr	r3, [r2, #0]
 800631a:	1d19      	adds	r1, r3, #4
 800631c:	6011      	str	r1, [r2, #0]
 800631e:	681d      	ldr	r5, [r3, #0]
 8006320:	6862      	ldr	r2, [r4, #4]
 8006322:	2100      	movs	r1, #0
 8006324:	4628      	mov	r0, r5
 8006326:	f002 fa95 	bl	8008854 <memchr>
 800632a:	b108      	cbz	r0, 8006330 <_printf_i+0x1bc>
 800632c:	1b40      	subs	r0, r0, r5
 800632e:	6060      	str	r0, [r4, #4]
 8006330:	6863      	ldr	r3, [r4, #4]
 8006332:	6123      	str	r3, [r4, #16]
 8006334:	2300      	movs	r3, #0
 8006336:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800633a:	e7a7      	b.n	800628c <_printf_i+0x118>
 800633c:	6923      	ldr	r3, [r4, #16]
 800633e:	462a      	mov	r2, r5
 8006340:	4639      	mov	r1, r7
 8006342:	4630      	mov	r0, r6
 8006344:	47c0      	blx	r8
 8006346:	3001      	adds	r0, #1
 8006348:	d0aa      	beq.n	80062a0 <_printf_i+0x12c>
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	079b      	lsls	r3, r3, #30
 800634e:	d413      	bmi.n	8006378 <_printf_i+0x204>
 8006350:	68e0      	ldr	r0, [r4, #12]
 8006352:	9b03      	ldr	r3, [sp, #12]
 8006354:	4298      	cmp	r0, r3
 8006356:	bfb8      	it	lt
 8006358:	4618      	movlt	r0, r3
 800635a:	e7a3      	b.n	80062a4 <_printf_i+0x130>
 800635c:	2301      	movs	r3, #1
 800635e:	464a      	mov	r2, r9
 8006360:	4639      	mov	r1, r7
 8006362:	4630      	mov	r0, r6
 8006364:	47c0      	blx	r8
 8006366:	3001      	adds	r0, #1
 8006368:	d09a      	beq.n	80062a0 <_printf_i+0x12c>
 800636a:	3501      	adds	r5, #1
 800636c:	68e3      	ldr	r3, [r4, #12]
 800636e:	9a03      	ldr	r2, [sp, #12]
 8006370:	1a9b      	subs	r3, r3, r2
 8006372:	42ab      	cmp	r3, r5
 8006374:	dcf2      	bgt.n	800635c <_printf_i+0x1e8>
 8006376:	e7eb      	b.n	8006350 <_printf_i+0x1dc>
 8006378:	2500      	movs	r5, #0
 800637a:	f104 0919 	add.w	r9, r4, #25
 800637e:	e7f5      	b.n	800636c <_printf_i+0x1f8>
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1ac      	bne.n	80062de <_printf_i+0x16a>
 8006384:	7803      	ldrb	r3, [r0, #0]
 8006386:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800638a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800638e:	e76c      	b.n	800626a <_printf_i+0xf6>
 8006390:	08009dce 	.word	0x08009dce
 8006394:	08009ddf 	.word	0x08009ddf

08006398 <_scanf_float>:
 8006398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800639c:	469a      	mov	sl, r3
 800639e:	688b      	ldr	r3, [r1, #8]
 80063a0:	4616      	mov	r6, r2
 80063a2:	1e5a      	subs	r2, r3, #1
 80063a4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80063a8:	bf88      	it	hi
 80063aa:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80063ae:	b087      	sub	sp, #28
 80063b0:	bf85      	ittet	hi
 80063b2:	189b      	addhi	r3, r3, r2
 80063b4:	9301      	strhi	r3, [sp, #4]
 80063b6:	2300      	movls	r3, #0
 80063b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80063bc:	4688      	mov	r8, r1
 80063be:	f04f 0b00 	mov.w	fp, #0
 80063c2:	bf8c      	ite	hi
 80063c4:	608b      	strhi	r3, [r1, #8]
 80063c6:	9301      	strls	r3, [sp, #4]
 80063c8:	680b      	ldr	r3, [r1, #0]
 80063ca:	4607      	mov	r7, r0
 80063cc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80063d0:	f848 3b1c 	str.w	r3, [r8], #28
 80063d4:	460c      	mov	r4, r1
 80063d6:	4645      	mov	r5, r8
 80063d8:	465a      	mov	r2, fp
 80063da:	46d9      	mov	r9, fp
 80063dc:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80063e0:	f8cd b008 	str.w	fp, [sp, #8]
 80063e4:	68a1      	ldr	r1, [r4, #8]
 80063e6:	b181      	cbz	r1, 800640a <_scanf_float+0x72>
 80063e8:	6833      	ldr	r3, [r6, #0]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	2b49      	cmp	r3, #73	; 0x49
 80063ee:	d071      	beq.n	80064d4 <_scanf_float+0x13c>
 80063f0:	d84d      	bhi.n	800648e <_scanf_float+0xf6>
 80063f2:	2b39      	cmp	r3, #57	; 0x39
 80063f4:	d840      	bhi.n	8006478 <_scanf_float+0xe0>
 80063f6:	2b31      	cmp	r3, #49	; 0x31
 80063f8:	f080 8088 	bcs.w	800650c <_scanf_float+0x174>
 80063fc:	2b2d      	cmp	r3, #45	; 0x2d
 80063fe:	f000 8090 	beq.w	8006522 <_scanf_float+0x18a>
 8006402:	d815      	bhi.n	8006430 <_scanf_float+0x98>
 8006404:	2b2b      	cmp	r3, #43	; 0x2b
 8006406:	f000 808c 	beq.w	8006522 <_scanf_float+0x18a>
 800640a:	f1b9 0f00 	cmp.w	r9, #0
 800640e:	d003      	beq.n	8006418 <_scanf_float+0x80>
 8006410:	6823      	ldr	r3, [r4, #0]
 8006412:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006416:	6023      	str	r3, [r4, #0]
 8006418:	3a01      	subs	r2, #1
 800641a:	2a01      	cmp	r2, #1
 800641c:	f200 80ea 	bhi.w	80065f4 <_scanf_float+0x25c>
 8006420:	4545      	cmp	r5, r8
 8006422:	f200 80dc 	bhi.w	80065de <_scanf_float+0x246>
 8006426:	2601      	movs	r6, #1
 8006428:	4630      	mov	r0, r6
 800642a:	b007      	add	sp, #28
 800642c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006430:	2b2e      	cmp	r3, #46	; 0x2e
 8006432:	f000 809f 	beq.w	8006574 <_scanf_float+0x1dc>
 8006436:	2b30      	cmp	r3, #48	; 0x30
 8006438:	d1e7      	bne.n	800640a <_scanf_float+0x72>
 800643a:	6820      	ldr	r0, [r4, #0]
 800643c:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006440:	d064      	beq.n	800650c <_scanf_float+0x174>
 8006442:	9b01      	ldr	r3, [sp, #4]
 8006444:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006448:	6020      	str	r0, [r4, #0]
 800644a:	f109 0901 	add.w	r9, r9, #1
 800644e:	b11b      	cbz	r3, 8006458 <_scanf_float+0xc0>
 8006450:	3b01      	subs	r3, #1
 8006452:	3101      	adds	r1, #1
 8006454:	9301      	str	r3, [sp, #4]
 8006456:	60a1      	str	r1, [r4, #8]
 8006458:	68a3      	ldr	r3, [r4, #8]
 800645a:	3b01      	subs	r3, #1
 800645c:	60a3      	str	r3, [r4, #8]
 800645e:	6923      	ldr	r3, [r4, #16]
 8006460:	3301      	adds	r3, #1
 8006462:	6123      	str	r3, [r4, #16]
 8006464:	6873      	ldr	r3, [r6, #4]
 8006466:	3b01      	subs	r3, #1
 8006468:	2b00      	cmp	r3, #0
 800646a:	6073      	str	r3, [r6, #4]
 800646c:	f340 80ac 	ble.w	80065c8 <_scanf_float+0x230>
 8006470:	6833      	ldr	r3, [r6, #0]
 8006472:	3301      	adds	r3, #1
 8006474:	6033      	str	r3, [r6, #0]
 8006476:	e7b5      	b.n	80063e4 <_scanf_float+0x4c>
 8006478:	2b45      	cmp	r3, #69	; 0x45
 800647a:	f000 8085 	beq.w	8006588 <_scanf_float+0x1f0>
 800647e:	2b46      	cmp	r3, #70	; 0x46
 8006480:	d06a      	beq.n	8006558 <_scanf_float+0x1c0>
 8006482:	2b41      	cmp	r3, #65	; 0x41
 8006484:	d1c1      	bne.n	800640a <_scanf_float+0x72>
 8006486:	2a01      	cmp	r2, #1
 8006488:	d1bf      	bne.n	800640a <_scanf_float+0x72>
 800648a:	2202      	movs	r2, #2
 800648c:	e046      	b.n	800651c <_scanf_float+0x184>
 800648e:	2b65      	cmp	r3, #101	; 0x65
 8006490:	d07a      	beq.n	8006588 <_scanf_float+0x1f0>
 8006492:	d818      	bhi.n	80064c6 <_scanf_float+0x12e>
 8006494:	2b54      	cmp	r3, #84	; 0x54
 8006496:	d066      	beq.n	8006566 <_scanf_float+0x1ce>
 8006498:	d811      	bhi.n	80064be <_scanf_float+0x126>
 800649a:	2b4e      	cmp	r3, #78	; 0x4e
 800649c:	d1b5      	bne.n	800640a <_scanf_float+0x72>
 800649e:	2a00      	cmp	r2, #0
 80064a0:	d146      	bne.n	8006530 <_scanf_float+0x198>
 80064a2:	f1b9 0f00 	cmp.w	r9, #0
 80064a6:	d145      	bne.n	8006534 <_scanf_float+0x19c>
 80064a8:	6821      	ldr	r1, [r4, #0]
 80064aa:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80064ae:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80064b2:	d13f      	bne.n	8006534 <_scanf_float+0x19c>
 80064b4:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80064b8:	6021      	str	r1, [r4, #0]
 80064ba:	2201      	movs	r2, #1
 80064bc:	e02e      	b.n	800651c <_scanf_float+0x184>
 80064be:	2b59      	cmp	r3, #89	; 0x59
 80064c0:	d01e      	beq.n	8006500 <_scanf_float+0x168>
 80064c2:	2b61      	cmp	r3, #97	; 0x61
 80064c4:	e7de      	b.n	8006484 <_scanf_float+0xec>
 80064c6:	2b6e      	cmp	r3, #110	; 0x6e
 80064c8:	d0e9      	beq.n	800649e <_scanf_float+0x106>
 80064ca:	d815      	bhi.n	80064f8 <_scanf_float+0x160>
 80064cc:	2b66      	cmp	r3, #102	; 0x66
 80064ce:	d043      	beq.n	8006558 <_scanf_float+0x1c0>
 80064d0:	2b69      	cmp	r3, #105	; 0x69
 80064d2:	d19a      	bne.n	800640a <_scanf_float+0x72>
 80064d4:	f1bb 0f00 	cmp.w	fp, #0
 80064d8:	d138      	bne.n	800654c <_scanf_float+0x1b4>
 80064da:	f1b9 0f00 	cmp.w	r9, #0
 80064de:	d197      	bne.n	8006410 <_scanf_float+0x78>
 80064e0:	6821      	ldr	r1, [r4, #0]
 80064e2:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80064e6:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80064ea:	d195      	bne.n	8006418 <_scanf_float+0x80>
 80064ec:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80064f0:	6021      	str	r1, [r4, #0]
 80064f2:	f04f 0b01 	mov.w	fp, #1
 80064f6:	e011      	b.n	800651c <_scanf_float+0x184>
 80064f8:	2b74      	cmp	r3, #116	; 0x74
 80064fa:	d034      	beq.n	8006566 <_scanf_float+0x1ce>
 80064fc:	2b79      	cmp	r3, #121	; 0x79
 80064fe:	d184      	bne.n	800640a <_scanf_float+0x72>
 8006500:	f1bb 0f07 	cmp.w	fp, #7
 8006504:	d181      	bne.n	800640a <_scanf_float+0x72>
 8006506:	f04f 0b08 	mov.w	fp, #8
 800650a:	e007      	b.n	800651c <_scanf_float+0x184>
 800650c:	eb12 0f0b 	cmn.w	r2, fp
 8006510:	f47f af7b 	bne.w	800640a <_scanf_float+0x72>
 8006514:	6821      	ldr	r1, [r4, #0]
 8006516:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800651a:	6021      	str	r1, [r4, #0]
 800651c:	702b      	strb	r3, [r5, #0]
 800651e:	3501      	adds	r5, #1
 8006520:	e79a      	b.n	8006458 <_scanf_float+0xc0>
 8006522:	6821      	ldr	r1, [r4, #0]
 8006524:	0608      	lsls	r0, r1, #24
 8006526:	f57f af70 	bpl.w	800640a <_scanf_float+0x72>
 800652a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800652e:	e7f4      	b.n	800651a <_scanf_float+0x182>
 8006530:	2a02      	cmp	r2, #2
 8006532:	d047      	beq.n	80065c4 <_scanf_float+0x22c>
 8006534:	f1bb 0f01 	cmp.w	fp, #1
 8006538:	d003      	beq.n	8006542 <_scanf_float+0x1aa>
 800653a:	f1bb 0f04 	cmp.w	fp, #4
 800653e:	f47f af64 	bne.w	800640a <_scanf_float+0x72>
 8006542:	f10b 0b01 	add.w	fp, fp, #1
 8006546:	fa5f fb8b 	uxtb.w	fp, fp
 800654a:	e7e7      	b.n	800651c <_scanf_float+0x184>
 800654c:	f1bb 0f03 	cmp.w	fp, #3
 8006550:	d0f7      	beq.n	8006542 <_scanf_float+0x1aa>
 8006552:	f1bb 0f05 	cmp.w	fp, #5
 8006556:	e7f2      	b.n	800653e <_scanf_float+0x1a6>
 8006558:	f1bb 0f02 	cmp.w	fp, #2
 800655c:	f47f af55 	bne.w	800640a <_scanf_float+0x72>
 8006560:	f04f 0b03 	mov.w	fp, #3
 8006564:	e7da      	b.n	800651c <_scanf_float+0x184>
 8006566:	f1bb 0f06 	cmp.w	fp, #6
 800656a:	f47f af4e 	bne.w	800640a <_scanf_float+0x72>
 800656e:	f04f 0b07 	mov.w	fp, #7
 8006572:	e7d3      	b.n	800651c <_scanf_float+0x184>
 8006574:	6821      	ldr	r1, [r4, #0]
 8006576:	0588      	lsls	r0, r1, #22
 8006578:	f57f af47 	bpl.w	800640a <_scanf_float+0x72>
 800657c:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8006580:	6021      	str	r1, [r4, #0]
 8006582:	f8cd 9008 	str.w	r9, [sp, #8]
 8006586:	e7c9      	b.n	800651c <_scanf_float+0x184>
 8006588:	6821      	ldr	r1, [r4, #0]
 800658a:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800658e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006592:	d006      	beq.n	80065a2 <_scanf_float+0x20a>
 8006594:	0548      	lsls	r0, r1, #21
 8006596:	f57f af38 	bpl.w	800640a <_scanf_float+0x72>
 800659a:	f1b9 0f00 	cmp.w	r9, #0
 800659e:	f43f af3b 	beq.w	8006418 <_scanf_float+0x80>
 80065a2:	0588      	lsls	r0, r1, #22
 80065a4:	bf58      	it	pl
 80065a6:	9802      	ldrpl	r0, [sp, #8]
 80065a8:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80065ac:	bf58      	it	pl
 80065ae:	eba9 0000 	subpl.w	r0, r9, r0
 80065b2:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80065b6:	bf58      	it	pl
 80065b8:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80065bc:	6021      	str	r1, [r4, #0]
 80065be:	f04f 0900 	mov.w	r9, #0
 80065c2:	e7ab      	b.n	800651c <_scanf_float+0x184>
 80065c4:	2203      	movs	r2, #3
 80065c6:	e7a9      	b.n	800651c <_scanf_float+0x184>
 80065c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80065cc:	4631      	mov	r1, r6
 80065ce:	4638      	mov	r0, r7
 80065d0:	9205      	str	r2, [sp, #20]
 80065d2:	4798      	blx	r3
 80065d4:	9a05      	ldr	r2, [sp, #20]
 80065d6:	2800      	cmp	r0, #0
 80065d8:	f43f af04 	beq.w	80063e4 <_scanf_float+0x4c>
 80065dc:	e715      	b.n	800640a <_scanf_float+0x72>
 80065de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80065e2:	4632      	mov	r2, r6
 80065e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80065e8:	4638      	mov	r0, r7
 80065ea:	4798      	blx	r3
 80065ec:	6923      	ldr	r3, [r4, #16]
 80065ee:	3b01      	subs	r3, #1
 80065f0:	6123      	str	r3, [r4, #16]
 80065f2:	e715      	b.n	8006420 <_scanf_float+0x88>
 80065f4:	f10b 33ff 	add.w	r3, fp, #4294967295
 80065f8:	2b06      	cmp	r3, #6
 80065fa:	d80a      	bhi.n	8006612 <_scanf_float+0x27a>
 80065fc:	f1bb 0f02 	cmp.w	fp, #2
 8006600:	d967      	bls.n	80066d2 <_scanf_float+0x33a>
 8006602:	f1ab 0b03 	sub.w	fp, fp, #3
 8006606:	fa5f fb8b 	uxtb.w	fp, fp
 800660a:	eba5 0b0b 	sub.w	fp, r5, fp
 800660e:	455d      	cmp	r5, fp
 8006610:	d14a      	bne.n	80066a8 <_scanf_float+0x310>
 8006612:	6823      	ldr	r3, [r4, #0]
 8006614:	05da      	lsls	r2, r3, #23
 8006616:	d51f      	bpl.n	8006658 <_scanf_float+0x2c0>
 8006618:	055b      	lsls	r3, r3, #21
 800661a:	d467      	bmi.n	80066ec <_scanf_float+0x354>
 800661c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006620:	6923      	ldr	r3, [r4, #16]
 8006622:	2965      	cmp	r1, #101	; 0x65
 8006624:	f103 33ff 	add.w	r3, r3, #4294967295
 8006628:	f105 3bff 	add.w	fp, r5, #4294967295
 800662c:	6123      	str	r3, [r4, #16]
 800662e:	d00d      	beq.n	800664c <_scanf_float+0x2b4>
 8006630:	2945      	cmp	r1, #69	; 0x45
 8006632:	d00b      	beq.n	800664c <_scanf_float+0x2b4>
 8006634:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006638:	4632      	mov	r2, r6
 800663a:	4638      	mov	r0, r7
 800663c:	4798      	blx	r3
 800663e:	6923      	ldr	r3, [r4, #16]
 8006640:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8006644:	3b01      	subs	r3, #1
 8006646:	f1a5 0b02 	sub.w	fp, r5, #2
 800664a:	6123      	str	r3, [r4, #16]
 800664c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006650:	4632      	mov	r2, r6
 8006652:	4638      	mov	r0, r7
 8006654:	4798      	blx	r3
 8006656:	465d      	mov	r5, fp
 8006658:	6826      	ldr	r6, [r4, #0]
 800665a:	f016 0610 	ands.w	r6, r6, #16
 800665e:	d176      	bne.n	800674e <_scanf_float+0x3b6>
 8006660:	702e      	strb	r6, [r5, #0]
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800666c:	d141      	bne.n	80066f2 <_scanf_float+0x35a>
 800666e:	9b02      	ldr	r3, [sp, #8]
 8006670:	eba9 0303 	sub.w	r3, r9, r3
 8006674:	425a      	negs	r2, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d148      	bne.n	800670c <_scanf_float+0x374>
 800667a:	4641      	mov	r1, r8
 800667c:	2200      	movs	r2, #0
 800667e:	4638      	mov	r0, r7
 8006680:	f000 feb2 	bl	80073e8 <_strtod_r>
 8006684:	6825      	ldr	r5, [r4, #0]
 8006686:	4680      	mov	r8, r0
 8006688:	f015 0f02 	tst.w	r5, #2
 800668c:	4689      	mov	r9, r1
 800668e:	f8da 3000 	ldr.w	r3, [sl]
 8006692:	d046      	beq.n	8006722 <_scanf_float+0x38a>
 8006694:	1d1a      	adds	r2, r3, #4
 8006696:	f8ca 2000 	str.w	r2, [sl]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	e9c3 8900 	strd	r8, r9, [r3]
 80066a0:	68e3      	ldr	r3, [r4, #12]
 80066a2:	3301      	adds	r3, #1
 80066a4:	60e3      	str	r3, [r4, #12]
 80066a6:	e6bf      	b.n	8006428 <_scanf_float+0x90>
 80066a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066ac:	4632      	mov	r2, r6
 80066ae:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80066b2:	4638      	mov	r0, r7
 80066b4:	4798      	blx	r3
 80066b6:	6923      	ldr	r3, [r4, #16]
 80066b8:	3b01      	subs	r3, #1
 80066ba:	6123      	str	r3, [r4, #16]
 80066bc:	e7a7      	b.n	800660e <_scanf_float+0x276>
 80066be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066c2:	4632      	mov	r2, r6
 80066c4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80066c8:	4638      	mov	r0, r7
 80066ca:	4798      	blx	r3
 80066cc:	6923      	ldr	r3, [r4, #16]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	6123      	str	r3, [r4, #16]
 80066d2:	4545      	cmp	r5, r8
 80066d4:	d8f3      	bhi.n	80066be <_scanf_float+0x326>
 80066d6:	e6a6      	b.n	8006426 <_scanf_float+0x8e>
 80066d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066dc:	4632      	mov	r2, r6
 80066de:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80066e2:	4638      	mov	r0, r7
 80066e4:	4798      	blx	r3
 80066e6:	6923      	ldr	r3, [r4, #16]
 80066e8:	3b01      	subs	r3, #1
 80066ea:	6123      	str	r3, [r4, #16]
 80066ec:	4545      	cmp	r5, r8
 80066ee:	d8f3      	bhi.n	80066d8 <_scanf_float+0x340>
 80066f0:	e699      	b.n	8006426 <_scanf_float+0x8e>
 80066f2:	9b03      	ldr	r3, [sp, #12]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d0c0      	beq.n	800667a <_scanf_float+0x2e2>
 80066f8:	9904      	ldr	r1, [sp, #16]
 80066fa:	230a      	movs	r3, #10
 80066fc:	4632      	mov	r2, r6
 80066fe:	3101      	adds	r1, #1
 8006700:	4638      	mov	r0, r7
 8006702:	f000 fefd 	bl	8007500 <_strtol_r>
 8006706:	9b03      	ldr	r3, [sp, #12]
 8006708:	9d04      	ldr	r5, [sp, #16]
 800670a:	1ac2      	subs	r2, r0, r3
 800670c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006710:	429d      	cmp	r5, r3
 8006712:	bf28      	it	cs
 8006714:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8006718:	490e      	ldr	r1, [pc, #56]	; (8006754 <_scanf_float+0x3bc>)
 800671a:	4628      	mov	r0, r5
 800671c:	f000 f820 	bl	8006760 <siprintf>
 8006720:	e7ab      	b.n	800667a <_scanf_float+0x2e2>
 8006722:	1d1f      	adds	r7, r3, #4
 8006724:	f015 0504 	ands.w	r5, r5, #4
 8006728:	f8ca 7000 	str.w	r7, [sl]
 800672c:	d1b5      	bne.n	800669a <_scanf_float+0x302>
 800672e:	681f      	ldr	r7, [r3, #0]
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	f7fa f96a 	bl	8000a0c <__aeabi_dcmpun>
 8006738:	b120      	cbz	r0, 8006744 <_scanf_float+0x3ac>
 800673a:	4628      	mov	r0, r5
 800673c:	f000 f80c 	bl	8006758 <nanf>
 8006740:	6038      	str	r0, [r7, #0]
 8006742:	e7ad      	b.n	80066a0 <_scanf_float+0x308>
 8006744:	4640      	mov	r0, r8
 8006746:	4649      	mov	r1, r9
 8006748:	f7fa f9be 	bl	8000ac8 <__aeabi_d2f>
 800674c:	e7f8      	b.n	8006740 <_scanf_float+0x3a8>
 800674e:	2600      	movs	r6, #0
 8006750:	e66a      	b.n	8006428 <_scanf_float+0x90>
 8006752:	bf00      	nop
 8006754:	08009df0 	.word	0x08009df0

08006758 <nanf>:
 8006758:	4800      	ldr	r0, [pc, #0]	; (800675c <nanf+0x4>)
 800675a:	4770      	bx	lr
 800675c:	7fc00000 	.word	0x7fc00000

08006760 <siprintf>:
 8006760:	b40e      	push	{r1, r2, r3}
 8006762:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006766:	b500      	push	{lr}
 8006768:	b09c      	sub	sp, #112	; 0x70
 800676a:	ab1d      	add	r3, sp, #116	; 0x74
 800676c:	9002      	str	r0, [sp, #8]
 800676e:	9006      	str	r0, [sp, #24]
 8006770:	9107      	str	r1, [sp, #28]
 8006772:	9104      	str	r1, [sp, #16]
 8006774:	4808      	ldr	r0, [pc, #32]	; (8006798 <siprintf+0x38>)
 8006776:	4909      	ldr	r1, [pc, #36]	; (800679c <siprintf+0x3c>)
 8006778:	f853 2b04 	ldr.w	r2, [r3], #4
 800677c:	9105      	str	r1, [sp, #20]
 800677e:	6800      	ldr	r0, [r0, #0]
 8006780:	a902      	add	r1, sp, #8
 8006782:	9301      	str	r3, [sp, #4]
 8006784:	f002 fd86 	bl	8009294 <_svfiprintf_r>
 8006788:	2200      	movs	r2, #0
 800678a:	9b02      	ldr	r3, [sp, #8]
 800678c:	701a      	strb	r2, [r3, #0]
 800678e:	b01c      	add	sp, #112	; 0x70
 8006790:	f85d eb04 	ldr.w	lr, [sp], #4
 8006794:	b003      	add	sp, #12
 8006796:	4770      	bx	lr
 8006798:	20000184 	.word	0x20000184
 800679c:	ffff0208 	.word	0xffff0208

080067a0 <sulp>:
 80067a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067a4:	460f      	mov	r7, r1
 80067a6:	4690      	mov	r8, r2
 80067a8:	f002 fb38 	bl	8008e1c <__ulp>
 80067ac:	4604      	mov	r4, r0
 80067ae:	460d      	mov	r5, r1
 80067b0:	f1b8 0f00 	cmp.w	r8, #0
 80067b4:	d011      	beq.n	80067da <sulp+0x3a>
 80067b6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80067ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80067be:	2b00      	cmp	r3, #0
 80067c0:	dd0b      	ble.n	80067da <sulp+0x3a>
 80067c2:	2400      	movs	r4, #0
 80067c4:	051b      	lsls	r3, r3, #20
 80067c6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80067ca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80067ce:	4622      	mov	r2, r4
 80067d0:	462b      	mov	r3, r5
 80067d2:	f7f9 fe81 	bl	80004d8 <__aeabi_dmul>
 80067d6:	4604      	mov	r4, r0
 80067d8:	460d      	mov	r5, r1
 80067da:	4620      	mov	r0, r4
 80067dc:	4629      	mov	r1, r5
 80067de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067e2:	0000      	movs	r0, r0
 80067e4:	0000      	movs	r0, r0
	...

080067e8 <_strtod_l>:
 80067e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ec:	461f      	mov	r7, r3
 80067ee:	2300      	movs	r3, #0
 80067f0:	b0a1      	sub	sp, #132	; 0x84
 80067f2:	4683      	mov	fp, r0
 80067f4:	4638      	mov	r0, r7
 80067f6:	460e      	mov	r6, r1
 80067f8:	9217      	str	r2, [sp, #92]	; 0x5c
 80067fa:	931c      	str	r3, [sp, #112]	; 0x70
 80067fc:	f001 ffff 	bl	80087fe <__localeconv_l>
 8006800:	4680      	mov	r8, r0
 8006802:	6800      	ldr	r0, [r0, #0]
 8006804:	f7f9 fca4 	bl	8000150 <strlen>
 8006808:	f04f 0900 	mov.w	r9, #0
 800680c:	4604      	mov	r4, r0
 800680e:	f04f 0a00 	mov.w	sl, #0
 8006812:	961b      	str	r6, [sp, #108]	; 0x6c
 8006814:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006816:	781a      	ldrb	r2, [r3, #0]
 8006818:	2a0d      	cmp	r2, #13
 800681a:	d832      	bhi.n	8006882 <_strtod_l+0x9a>
 800681c:	2a09      	cmp	r2, #9
 800681e:	d236      	bcs.n	800688e <_strtod_l+0xa6>
 8006820:	2a00      	cmp	r2, #0
 8006822:	d03e      	beq.n	80068a2 <_strtod_l+0xba>
 8006824:	2300      	movs	r3, #0
 8006826:	930d      	str	r3, [sp, #52]	; 0x34
 8006828:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800682a:	782b      	ldrb	r3, [r5, #0]
 800682c:	2b30      	cmp	r3, #48	; 0x30
 800682e:	f040 80ac 	bne.w	800698a <_strtod_l+0x1a2>
 8006832:	786b      	ldrb	r3, [r5, #1]
 8006834:	2b58      	cmp	r3, #88	; 0x58
 8006836:	d001      	beq.n	800683c <_strtod_l+0x54>
 8006838:	2b78      	cmp	r3, #120	; 0x78
 800683a:	d167      	bne.n	800690c <_strtod_l+0x124>
 800683c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800683e:	9702      	str	r7, [sp, #8]
 8006840:	9301      	str	r3, [sp, #4]
 8006842:	ab1c      	add	r3, sp, #112	; 0x70
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	4a89      	ldr	r2, [pc, #548]	; (8006a6c <_strtod_l+0x284>)
 8006848:	ab1d      	add	r3, sp, #116	; 0x74
 800684a:	a91b      	add	r1, sp, #108	; 0x6c
 800684c:	4658      	mov	r0, fp
 800684e:	f001 fcfb 	bl	8008248 <__gethex>
 8006852:	f010 0407 	ands.w	r4, r0, #7
 8006856:	4606      	mov	r6, r0
 8006858:	d005      	beq.n	8006866 <_strtod_l+0x7e>
 800685a:	2c06      	cmp	r4, #6
 800685c:	d12b      	bne.n	80068b6 <_strtod_l+0xce>
 800685e:	2300      	movs	r3, #0
 8006860:	3501      	adds	r5, #1
 8006862:	951b      	str	r5, [sp, #108]	; 0x6c
 8006864:	930d      	str	r3, [sp, #52]	; 0x34
 8006866:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006868:	2b00      	cmp	r3, #0
 800686a:	f040 85a6 	bne.w	80073ba <_strtod_l+0xbd2>
 800686e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006870:	b1e3      	cbz	r3, 80068ac <_strtod_l+0xc4>
 8006872:	464a      	mov	r2, r9
 8006874:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8006878:	4610      	mov	r0, r2
 800687a:	4619      	mov	r1, r3
 800687c:	b021      	add	sp, #132	; 0x84
 800687e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006882:	2a2b      	cmp	r2, #43	; 0x2b
 8006884:	d015      	beq.n	80068b2 <_strtod_l+0xca>
 8006886:	2a2d      	cmp	r2, #45	; 0x2d
 8006888:	d004      	beq.n	8006894 <_strtod_l+0xac>
 800688a:	2a20      	cmp	r2, #32
 800688c:	d1ca      	bne.n	8006824 <_strtod_l+0x3c>
 800688e:	3301      	adds	r3, #1
 8006890:	931b      	str	r3, [sp, #108]	; 0x6c
 8006892:	e7bf      	b.n	8006814 <_strtod_l+0x2c>
 8006894:	2201      	movs	r2, #1
 8006896:	920d      	str	r2, [sp, #52]	; 0x34
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	921b      	str	r2, [sp, #108]	; 0x6c
 800689c:	785b      	ldrb	r3, [r3, #1]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1c2      	bne.n	8006828 <_strtod_l+0x40>
 80068a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068a4:	961b      	str	r6, [sp, #108]	; 0x6c
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f040 8585 	bne.w	80073b6 <_strtod_l+0xbce>
 80068ac:	464a      	mov	r2, r9
 80068ae:	4653      	mov	r3, sl
 80068b0:	e7e2      	b.n	8006878 <_strtod_l+0x90>
 80068b2:	2200      	movs	r2, #0
 80068b4:	e7ef      	b.n	8006896 <_strtod_l+0xae>
 80068b6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80068b8:	b13a      	cbz	r2, 80068ca <_strtod_l+0xe2>
 80068ba:	2135      	movs	r1, #53	; 0x35
 80068bc:	a81e      	add	r0, sp, #120	; 0x78
 80068be:	f002 fba0 	bl	8009002 <__copybits>
 80068c2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80068c4:	4658      	mov	r0, fp
 80068c6:	f002 f812 	bl	80088ee <_Bfree>
 80068ca:	3c01      	subs	r4, #1
 80068cc:	2c04      	cmp	r4, #4
 80068ce:	d806      	bhi.n	80068de <_strtod_l+0xf6>
 80068d0:	e8df f004 	tbb	[pc, r4]
 80068d4:	1714030a 	.word	0x1714030a
 80068d8:	0a          	.byte	0x0a
 80068d9:	00          	.byte	0x00
 80068da:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 80068de:	0731      	lsls	r1, r6, #28
 80068e0:	d5c1      	bpl.n	8006866 <_strtod_l+0x7e>
 80068e2:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 80068e6:	e7be      	b.n	8006866 <_strtod_l+0x7e>
 80068e8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80068ea:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 80068ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80068f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80068f6:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 80068fa:	e7f0      	b.n	80068de <_strtod_l+0xf6>
 80068fc:	f8df a170 	ldr.w	sl, [pc, #368]	; 8006a70 <_strtod_l+0x288>
 8006900:	e7ed      	b.n	80068de <_strtod_l+0xf6>
 8006902:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8006906:	f04f 39ff 	mov.w	r9, #4294967295
 800690a:	e7e8      	b.n	80068de <_strtod_l+0xf6>
 800690c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	921b      	str	r2, [sp, #108]	; 0x6c
 8006912:	785b      	ldrb	r3, [r3, #1]
 8006914:	2b30      	cmp	r3, #48	; 0x30
 8006916:	d0f9      	beq.n	800690c <_strtod_l+0x124>
 8006918:	2b00      	cmp	r3, #0
 800691a:	d0a4      	beq.n	8006866 <_strtod_l+0x7e>
 800691c:	2301      	movs	r3, #1
 800691e:	2500      	movs	r5, #0
 8006920:	220a      	movs	r2, #10
 8006922:	9307      	str	r3, [sp, #28]
 8006924:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006926:	9506      	str	r5, [sp, #24]
 8006928:	9308      	str	r3, [sp, #32]
 800692a:	9504      	str	r5, [sp, #16]
 800692c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800692e:	7807      	ldrb	r7, [r0, #0]
 8006930:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006934:	b2d9      	uxtb	r1, r3
 8006936:	2909      	cmp	r1, #9
 8006938:	d929      	bls.n	800698e <_strtod_l+0x1a6>
 800693a:	4622      	mov	r2, r4
 800693c:	f8d8 1000 	ldr.w	r1, [r8]
 8006940:	f002 fdb0 	bl	80094a4 <strncmp>
 8006944:	2800      	cmp	r0, #0
 8006946:	d031      	beq.n	80069ac <_strtod_l+0x1c4>
 8006948:	2000      	movs	r0, #0
 800694a:	463b      	mov	r3, r7
 800694c:	4602      	mov	r2, r0
 800694e:	9c04      	ldr	r4, [sp, #16]
 8006950:	9005      	str	r0, [sp, #20]
 8006952:	2b65      	cmp	r3, #101	; 0x65
 8006954:	d001      	beq.n	800695a <_strtod_l+0x172>
 8006956:	2b45      	cmp	r3, #69	; 0x45
 8006958:	d114      	bne.n	8006984 <_strtod_l+0x19c>
 800695a:	b924      	cbnz	r4, 8006966 <_strtod_l+0x17e>
 800695c:	b910      	cbnz	r0, 8006964 <_strtod_l+0x17c>
 800695e:	9b07      	ldr	r3, [sp, #28]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d09e      	beq.n	80068a2 <_strtod_l+0xba>
 8006964:	2400      	movs	r4, #0
 8006966:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006968:	1c73      	adds	r3, r6, #1
 800696a:	931b      	str	r3, [sp, #108]	; 0x6c
 800696c:	7873      	ldrb	r3, [r6, #1]
 800696e:	2b2b      	cmp	r3, #43	; 0x2b
 8006970:	d078      	beq.n	8006a64 <_strtod_l+0x27c>
 8006972:	2b2d      	cmp	r3, #45	; 0x2d
 8006974:	d070      	beq.n	8006a58 <_strtod_l+0x270>
 8006976:	f04f 0c00 	mov.w	ip, #0
 800697a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800697e:	2f09      	cmp	r7, #9
 8006980:	d97c      	bls.n	8006a7c <_strtod_l+0x294>
 8006982:	961b      	str	r6, [sp, #108]	; 0x6c
 8006984:	f04f 0e00 	mov.w	lr, #0
 8006988:	e09a      	b.n	8006ac0 <_strtod_l+0x2d8>
 800698a:	2300      	movs	r3, #0
 800698c:	e7c7      	b.n	800691e <_strtod_l+0x136>
 800698e:	9904      	ldr	r1, [sp, #16]
 8006990:	3001      	adds	r0, #1
 8006992:	2908      	cmp	r1, #8
 8006994:	bfd7      	itett	le
 8006996:	9906      	ldrle	r1, [sp, #24]
 8006998:	fb02 3505 	mlagt	r5, r2, r5, r3
 800699c:	fb02 3301 	mlale	r3, r2, r1, r3
 80069a0:	9306      	strle	r3, [sp, #24]
 80069a2:	9b04      	ldr	r3, [sp, #16]
 80069a4:	901b      	str	r0, [sp, #108]	; 0x6c
 80069a6:	3301      	adds	r3, #1
 80069a8:	9304      	str	r3, [sp, #16]
 80069aa:	e7bf      	b.n	800692c <_strtod_l+0x144>
 80069ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80069ae:	191a      	adds	r2, r3, r4
 80069b0:	921b      	str	r2, [sp, #108]	; 0x6c
 80069b2:	9a04      	ldr	r2, [sp, #16]
 80069b4:	5d1b      	ldrb	r3, [r3, r4]
 80069b6:	2a00      	cmp	r2, #0
 80069b8:	d037      	beq.n	8006a2a <_strtod_l+0x242>
 80069ba:	4602      	mov	r2, r0
 80069bc:	9c04      	ldr	r4, [sp, #16]
 80069be:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80069c2:	2909      	cmp	r1, #9
 80069c4:	d913      	bls.n	80069ee <_strtod_l+0x206>
 80069c6:	2101      	movs	r1, #1
 80069c8:	9105      	str	r1, [sp, #20]
 80069ca:	e7c2      	b.n	8006952 <_strtod_l+0x16a>
 80069cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80069ce:	3001      	adds	r0, #1
 80069d0:	1c5a      	adds	r2, r3, #1
 80069d2:	921b      	str	r2, [sp, #108]	; 0x6c
 80069d4:	785b      	ldrb	r3, [r3, #1]
 80069d6:	2b30      	cmp	r3, #48	; 0x30
 80069d8:	d0f8      	beq.n	80069cc <_strtod_l+0x1e4>
 80069da:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80069de:	2a08      	cmp	r2, #8
 80069e0:	f200 84f0 	bhi.w	80073c4 <_strtod_l+0xbdc>
 80069e4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80069e6:	9208      	str	r2, [sp, #32]
 80069e8:	4602      	mov	r2, r0
 80069ea:	2000      	movs	r0, #0
 80069ec:	4604      	mov	r4, r0
 80069ee:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80069f2:	f100 0101 	add.w	r1, r0, #1
 80069f6:	d012      	beq.n	8006a1e <_strtod_l+0x236>
 80069f8:	440a      	add	r2, r1
 80069fa:	270a      	movs	r7, #10
 80069fc:	4621      	mov	r1, r4
 80069fe:	eb00 0c04 	add.w	ip, r0, r4
 8006a02:	458c      	cmp	ip, r1
 8006a04:	d113      	bne.n	8006a2e <_strtod_l+0x246>
 8006a06:	1821      	adds	r1, r4, r0
 8006a08:	2908      	cmp	r1, #8
 8006a0a:	f104 0401 	add.w	r4, r4, #1
 8006a0e:	4404      	add	r4, r0
 8006a10:	dc19      	bgt.n	8006a46 <_strtod_l+0x25e>
 8006a12:	210a      	movs	r1, #10
 8006a14:	9b06      	ldr	r3, [sp, #24]
 8006a16:	fb01 e303 	mla	r3, r1, r3, lr
 8006a1a:	9306      	str	r3, [sp, #24]
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a20:	1c58      	adds	r0, r3, #1
 8006a22:	901b      	str	r0, [sp, #108]	; 0x6c
 8006a24:	785b      	ldrb	r3, [r3, #1]
 8006a26:	4608      	mov	r0, r1
 8006a28:	e7c9      	b.n	80069be <_strtod_l+0x1d6>
 8006a2a:	9804      	ldr	r0, [sp, #16]
 8006a2c:	e7d3      	b.n	80069d6 <_strtod_l+0x1ee>
 8006a2e:	2908      	cmp	r1, #8
 8006a30:	f101 0101 	add.w	r1, r1, #1
 8006a34:	dc03      	bgt.n	8006a3e <_strtod_l+0x256>
 8006a36:	9b06      	ldr	r3, [sp, #24]
 8006a38:	437b      	muls	r3, r7
 8006a3a:	9306      	str	r3, [sp, #24]
 8006a3c:	e7e1      	b.n	8006a02 <_strtod_l+0x21a>
 8006a3e:	2910      	cmp	r1, #16
 8006a40:	bfd8      	it	le
 8006a42:	437d      	mulle	r5, r7
 8006a44:	e7dd      	b.n	8006a02 <_strtod_l+0x21a>
 8006a46:	2c10      	cmp	r4, #16
 8006a48:	bfdc      	itt	le
 8006a4a:	210a      	movle	r1, #10
 8006a4c:	fb01 e505 	mlale	r5, r1, r5, lr
 8006a50:	e7e4      	b.n	8006a1c <_strtod_l+0x234>
 8006a52:	2301      	movs	r3, #1
 8006a54:	9305      	str	r3, [sp, #20]
 8006a56:	e781      	b.n	800695c <_strtod_l+0x174>
 8006a58:	f04f 0c01 	mov.w	ip, #1
 8006a5c:	1cb3      	adds	r3, r6, #2
 8006a5e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006a60:	78b3      	ldrb	r3, [r6, #2]
 8006a62:	e78a      	b.n	800697a <_strtod_l+0x192>
 8006a64:	f04f 0c00 	mov.w	ip, #0
 8006a68:	e7f8      	b.n	8006a5c <_strtod_l+0x274>
 8006a6a:	bf00      	nop
 8006a6c:	08009df8 	.word	0x08009df8
 8006a70:	7ff00000 	.word	0x7ff00000
 8006a74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a76:	1c5f      	adds	r7, r3, #1
 8006a78:	971b      	str	r7, [sp, #108]	; 0x6c
 8006a7a:	785b      	ldrb	r3, [r3, #1]
 8006a7c:	2b30      	cmp	r3, #48	; 0x30
 8006a7e:	d0f9      	beq.n	8006a74 <_strtod_l+0x28c>
 8006a80:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8006a84:	2f08      	cmp	r7, #8
 8006a86:	f63f af7d 	bhi.w	8006984 <_strtod_l+0x19c>
 8006a8a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006a8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a90:	9309      	str	r3, [sp, #36]	; 0x24
 8006a92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a94:	1c5f      	adds	r7, r3, #1
 8006a96:	971b      	str	r7, [sp, #108]	; 0x6c
 8006a98:	785b      	ldrb	r3, [r3, #1]
 8006a9a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8006a9e:	f1b8 0f09 	cmp.w	r8, #9
 8006aa2:	d937      	bls.n	8006b14 <_strtod_l+0x32c>
 8006aa4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006aa6:	1a7f      	subs	r7, r7, r1
 8006aa8:	2f08      	cmp	r7, #8
 8006aaa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006aae:	dc37      	bgt.n	8006b20 <_strtod_l+0x338>
 8006ab0:	45be      	cmp	lr, r7
 8006ab2:	bfa8      	it	ge
 8006ab4:	46be      	movge	lr, r7
 8006ab6:	f1bc 0f00 	cmp.w	ip, #0
 8006aba:	d001      	beq.n	8006ac0 <_strtod_l+0x2d8>
 8006abc:	f1ce 0e00 	rsb	lr, lr, #0
 8006ac0:	2c00      	cmp	r4, #0
 8006ac2:	d151      	bne.n	8006b68 <_strtod_l+0x380>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	f47f aece 	bne.w	8006866 <_strtod_l+0x7e>
 8006aca:	9a07      	ldr	r2, [sp, #28]
 8006acc:	2a00      	cmp	r2, #0
 8006ace:	f47f aeca 	bne.w	8006866 <_strtod_l+0x7e>
 8006ad2:	9a05      	ldr	r2, [sp, #20]
 8006ad4:	2a00      	cmp	r2, #0
 8006ad6:	f47f aee4 	bne.w	80068a2 <_strtod_l+0xba>
 8006ada:	2b4e      	cmp	r3, #78	; 0x4e
 8006adc:	d027      	beq.n	8006b2e <_strtod_l+0x346>
 8006ade:	dc21      	bgt.n	8006b24 <_strtod_l+0x33c>
 8006ae0:	2b49      	cmp	r3, #73	; 0x49
 8006ae2:	f47f aede 	bne.w	80068a2 <_strtod_l+0xba>
 8006ae6:	49a4      	ldr	r1, [pc, #656]	; (8006d78 <_strtod_l+0x590>)
 8006ae8:	a81b      	add	r0, sp, #108	; 0x6c
 8006aea:	f001 fde1 	bl	80086b0 <__match>
 8006aee:	2800      	cmp	r0, #0
 8006af0:	f43f aed7 	beq.w	80068a2 <_strtod_l+0xba>
 8006af4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006af6:	49a1      	ldr	r1, [pc, #644]	; (8006d7c <_strtod_l+0x594>)
 8006af8:	3b01      	subs	r3, #1
 8006afa:	a81b      	add	r0, sp, #108	; 0x6c
 8006afc:	931b      	str	r3, [sp, #108]	; 0x6c
 8006afe:	f001 fdd7 	bl	80086b0 <__match>
 8006b02:	b910      	cbnz	r0, 8006b0a <_strtod_l+0x322>
 8006b04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b06:	3301      	adds	r3, #1
 8006b08:	931b      	str	r3, [sp, #108]	; 0x6c
 8006b0a:	f8df a284 	ldr.w	sl, [pc, #644]	; 8006d90 <_strtod_l+0x5a8>
 8006b0e:	f04f 0900 	mov.w	r9, #0
 8006b12:	e6a8      	b.n	8006866 <_strtod_l+0x7e>
 8006b14:	210a      	movs	r1, #10
 8006b16:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006b1a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006b1e:	e7b8      	b.n	8006a92 <_strtod_l+0x2aa>
 8006b20:	46be      	mov	lr, r7
 8006b22:	e7c8      	b.n	8006ab6 <_strtod_l+0x2ce>
 8006b24:	2b69      	cmp	r3, #105	; 0x69
 8006b26:	d0de      	beq.n	8006ae6 <_strtod_l+0x2fe>
 8006b28:	2b6e      	cmp	r3, #110	; 0x6e
 8006b2a:	f47f aeba 	bne.w	80068a2 <_strtod_l+0xba>
 8006b2e:	4994      	ldr	r1, [pc, #592]	; (8006d80 <_strtod_l+0x598>)
 8006b30:	a81b      	add	r0, sp, #108	; 0x6c
 8006b32:	f001 fdbd 	bl	80086b0 <__match>
 8006b36:	2800      	cmp	r0, #0
 8006b38:	f43f aeb3 	beq.w	80068a2 <_strtod_l+0xba>
 8006b3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	2b28      	cmp	r3, #40	; 0x28
 8006b42:	d10e      	bne.n	8006b62 <_strtod_l+0x37a>
 8006b44:	aa1e      	add	r2, sp, #120	; 0x78
 8006b46:	498f      	ldr	r1, [pc, #572]	; (8006d84 <_strtod_l+0x59c>)
 8006b48:	a81b      	add	r0, sp, #108	; 0x6c
 8006b4a:	f001 fdc5 	bl	80086d8 <__hexnan>
 8006b4e:	2805      	cmp	r0, #5
 8006b50:	d107      	bne.n	8006b62 <_strtod_l+0x37a>
 8006b52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006b54:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8006b58:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8006b5c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8006b60:	e681      	b.n	8006866 <_strtod_l+0x7e>
 8006b62:	f8df a234 	ldr.w	sl, [pc, #564]	; 8006d98 <_strtod_l+0x5b0>
 8006b66:	e7d2      	b.n	8006b0e <_strtod_l+0x326>
 8006b68:	ebae 0302 	sub.w	r3, lr, r2
 8006b6c:	9307      	str	r3, [sp, #28]
 8006b6e:	9b04      	ldr	r3, [sp, #16]
 8006b70:	9806      	ldr	r0, [sp, #24]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	bf08      	it	eq
 8006b76:	4623      	moveq	r3, r4
 8006b78:	2c10      	cmp	r4, #16
 8006b7a:	9304      	str	r3, [sp, #16]
 8006b7c:	46a0      	mov	r8, r4
 8006b7e:	bfa8      	it	ge
 8006b80:	f04f 0810 	movge.w	r8, #16
 8006b84:	f7f9 fc2e 	bl	80003e4 <__aeabi_ui2d>
 8006b88:	2c09      	cmp	r4, #9
 8006b8a:	4681      	mov	r9, r0
 8006b8c:	468a      	mov	sl, r1
 8006b8e:	dc13      	bgt.n	8006bb8 <_strtod_l+0x3d0>
 8006b90:	9b07      	ldr	r3, [sp, #28]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f43f ae67 	beq.w	8006866 <_strtod_l+0x7e>
 8006b98:	9b07      	ldr	r3, [sp, #28]
 8006b9a:	dd7e      	ble.n	8006c9a <_strtod_l+0x4b2>
 8006b9c:	2b16      	cmp	r3, #22
 8006b9e:	dc65      	bgt.n	8006c6c <_strtod_l+0x484>
 8006ba0:	4a79      	ldr	r2, [pc, #484]	; (8006d88 <_strtod_l+0x5a0>)
 8006ba2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8006ba6:	464a      	mov	r2, r9
 8006ba8:	e9de 0100 	ldrd	r0, r1, [lr]
 8006bac:	4653      	mov	r3, sl
 8006bae:	f7f9 fc93 	bl	80004d8 <__aeabi_dmul>
 8006bb2:	4681      	mov	r9, r0
 8006bb4:	468a      	mov	sl, r1
 8006bb6:	e656      	b.n	8006866 <_strtod_l+0x7e>
 8006bb8:	4b73      	ldr	r3, [pc, #460]	; (8006d88 <_strtod_l+0x5a0>)
 8006bba:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006bbe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006bc2:	f7f9 fc89 	bl	80004d8 <__aeabi_dmul>
 8006bc6:	4606      	mov	r6, r0
 8006bc8:	4628      	mov	r0, r5
 8006bca:	460f      	mov	r7, r1
 8006bcc:	f7f9 fc0a 	bl	80003e4 <__aeabi_ui2d>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	4630      	mov	r0, r6
 8006bd6:	4639      	mov	r1, r7
 8006bd8:	f7f9 fac8 	bl	800016c <__adddf3>
 8006bdc:	2c0f      	cmp	r4, #15
 8006bde:	4681      	mov	r9, r0
 8006be0:	468a      	mov	sl, r1
 8006be2:	ddd5      	ble.n	8006b90 <_strtod_l+0x3a8>
 8006be4:	9b07      	ldr	r3, [sp, #28]
 8006be6:	eba4 0808 	sub.w	r8, r4, r8
 8006bea:	4498      	add	r8, r3
 8006bec:	f1b8 0f00 	cmp.w	r8, #0
 8006bf0:	f340 809a 	ble.w	8006d28 <_strtod_l+0x540>
 8006bf4:	f018 030f 	ands.w	r3, r8, #15
 8006bf8:	d00a      	beq.n	8006c10 <_strtod_l+0x428>
 8006bfa:	4963      	ldr	r1, [pc, #396]	; (8006d88 <_strtod_l+0x5a0>)
 8006bfc:	464a      	mov	r2, r9
 8006bfe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c06:	4653      	mov	r3, sl
 8006c08:	f7f9 fc66 	bl	80004d8 <__aeabi_dmul>
 8006c0c:	4681      	mov	r9, r0
 8006c0e:	468a      	mov	sl, r1
 8006c10:	f038 080f 	bics.w	r8, r8, #15
 8006c14:	d077      	beq.n	8006d06 <_strtod_l+0x51e>
 8006c16:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006c1a:	dd4b      	ble.n	8006cb4 <_strtod_l+0x4cc>
 8006c1c:	f04f 0800 	mov.w	r8, #0
 8006c20:	f8cd 8010 	str.w	r8, [sp, #16]
 8006c24:	f8cd 8020 	str.w	r8, [sp, #32]
 8006c28:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c2c:	2322      	movs	r3, #34	; 0x22
 8006c2e:	f04f 0900 	mov.w	r9, #0
 8006c32:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8006d90 <_strtod_l+0x5a8>
 8006c36:	f8cb 3000 	str.w	r3, [fp]
 8006c3a:	9b08      	ldr	r3, [sp, #32]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f43f ae12 	beq.w	8006866 <_strtod_l+0x7e>
 8006c42:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006c44:	4658      	mov	r0, fp
 8006c46:	f001 fe52 	bl	80088ee <_Bfree>
 8006c4a:	9906      	ldr	r1, [sp, #24]
 8006c4c:	4658      	mov	r0, fp
 8006c4e:	f001 fe4e 	bl	80088ee <_Bfree>
 8006c52:	9904      	ldr	r1, [sp, #16]
 8006c54:	4658      	mov	r0, fp
 8006c56:	f001 fe4a 	bl	80088ee <_Bfree>
 8006c5a:	9908      	ldr	r1, [sp, #32]
 8006c5c:	4658      	mov	r0, fp
 8006c5e:	f001 fe46 	bl	80088ee <_Bfree>
 8006c62:	4641      	mov	r1, r8
 8006c64:	4658      	mov	r0, fp
 8006c66:	f001 fe42 	bl	80088ee <_Bfree>
 8006c6a:	e5fc      	b.n	8006866 <_strtod_l+0x7e>
 8006c6c:	9a07      	ldr	r2, [sp, #28]
 8006c6e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006c72:	4293      	cmp	r3, r2
 8006c74:	dbb6      	blt.n	8006be4 <_strtod_l+0x3fc>
 8006c76:	4d44      	ldr	r5, [pc, #272]	; (8006d88 <_strtod_l+0x5a0>)
 8006c78:	f1c4 040f 	rsb	r4, r4, #15
 8006c7c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006c80:	464a      	mov	r2, r9
 8006c82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c86:	4653      	mov	r3, sl
 8006c88:	f7f9 fc26 	bl	80004d8 <__aeabi_dmul>
 8006c8c:	9b07      	ldr	r3, [sp, #28]
 8006c8e:	1b1c      	subs	r4, r3, r4
 8006c90:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006c94:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c98:	e789      	b.n	8006bae <_strtod_l+0x3c6>
 8006c9a:	f113 0f16 	cmn.w	r3, #22
 8006c9e:	dba1      	blt.n	8006be4 <_strtod_l+0x3fc>
 8006ca0:	4a39      	ldr	r2, [pc, #228]	; (8006d88 <_strtod_l+0x5a0>)
 8006ca2:	4648      	mov	r0, r9
 8006ca4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8006ca8:	e9d2 2300 	ldrd	r2, r3, [r2]
 8006cac:	4651      	mov	r1, sl
 8006cae:	f7f9 fd3d 	bl	800072c <__aeabi_ddiv>
 8006cb2:	e77e      	b.n	8006bb2 <_strtod_l+0x3ca>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	4648      	mov	r0, r9
 8006cb8:	4651      	mov	r1, sl
 8006cba:	461d      	mov	r5, r3
 8006cbc:	4e33      	ldr	r6, [pc, #204]	; (8006d8c <_strtod_l+0x5a4>)
 8006cbe:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006cc2:	f1b8 0f01 	cmp.w	r8, #1
 8006cc6:	dc21      	bgt.n	8006d0c <_strtod_l+0x524>
 8006cc8:	b10b      	cbz	r3, 8006cce <_strtod_l+0x4e6>
 8006cca:	4681      	mov	r9, r0
 8006ccc:	468a      	mov	sl, r1
 8006cce:	4b2f      	ldr	r3, [pc, #188]	; (8006d8c <_strtod_l+0x5a4>)
 8006cd0:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8006cd4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006cd8:	464a      	mov	r2, r9
 8006cda:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006cde:	4653      	mov	r3, sl
 8006ce0:	f7f9 fbfa 	bl	80004d8 <__aeabi_dmul>
 8006ce4:	4b2a      	ldr	r3, [pc, #168]	; (8006d90 <_strtod_l+0x5a8>)
 8006ce6:	460a      	mov	r2, r1
 8006ce8:	400b      	ands	r3, r1
 8006cea:	492a      	ldr	r1, [pc, #168]	; (8006d94 <_strtod_l+0x5ac>)
 8006cec:	4681      	mov	r9, r0
 8006cee:	428b      	cmp	r3, r1
 8006cf0:	d894      	bhi.n	8006c1c <_strtod_l+0x434>
 8006cf2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006cf6:	428b      	cmp	r3, r1
 8006cf8:	bf86      	itte	hi
 8006cfa:	f04f 39ff 	movhi.w	r9, #4294967295
 8006cfe:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8006d9c <_strtod_l+0x5b4>
 8006d02:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8006d06:	2300      	movs	r3, #0
 8006d08:	9305      	str	r3, [sp, #20]
 8006d0a:	e07b      	b.n	8006e04 <_strtod_l+0x61c>
 8006d0c:	f018 0f01 	tst.w	r8, #1
 8006d10:	d006      	beq.n	8006d20 <_strtod_l+0x538>
 8006d12:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8006d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1a:	f7f9 fbdd 	bl	80004d8 <__aeabi_dmul>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	3501      	adds	r5, #1
 8006d22:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006d26:	e7cc      	b.n	8006cc2 <_strtod_l+0x4da>
 8006d28:	d0ed      	beq.n	8006d06 <_strtod_l+0x51e>
 8006d2a:	f1c8 0800 	rsb	r8, r8, #0
 8006d2e:	f018 020f 	ands.w	r2, r8, #15
 8006d32:	d00a      	beq.n	8006d4a <_strtod_l+0x562>
 8006d34:	4b14      	ldr	r3, [pc, #80]	; (8006d88 <_strtod_l+0x5a0>)
 8006d36:	4648      	mov	r0, r9
 8006d38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d3c:	4651      	mov	r1, sl
 8006d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d42:	f7f9 fcf3 	bl	800072c <__aeabi_ddiv>
 8006d46:	4681      	mov	r9, r0
 8006d48:	468a      	mov	sl, r1
 8006d4a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006d4e:	d0da      	beq.n	8006d06 <_strtod_l+0x51e>
 8006d50:	f1b8 0f1f 	cmp.w	r8, #31
 8006d54:	dd24      	ble.n	8006da0 <_strtod_l+0x5b8>
 8006d56:	f04f 0800 	mov.w	r8, #0
 8006d5a:	f8cd 8010 	str.w	r8, [sp, #16]
 8006d5e:	f8cd 8020 	str.w	r8, [sp, #32]
 8006d62:	f8cd 8018 	str.w	r8, [sp, #24]
 8006d66:	2322      	movs	r3, #34	; 0x22
 8006d68:	f04f 0900 	mov.w	r9, #0
 8006d6c:	f04f 0a00 	mov.w	sl, #0
 8006d70:	f8cb 3000 	str.w	r3, [fp]
 8006d74:	e761      	b.n	8006c3a <_strtod_l+0x452>
 8006d76:	bf00      	nop
 8006d78:	08009dc1 	.word	0x08009dc1
 8006d7c:	08009e4b 	.word	0x08009e4b
 8006d80:	08009dc9 	.word	0x08009dc9
 8006d84:	08009e0c 	.word	0x08009e0c
 8006d88:	08009e88 	.word	0x08009e88
 8006d8c:	08009e60 	.word	0x08009e60
 8006d90:	7ff00000 	.word	0x7ff00000
 8006d94:	7ca00000 	.word	0x7ca00000
 8006d98:	fff80000 	.word	0xfff80000
 8006d9c:	7fefffff 	.word	0x7fefffff
 8006da0:	f018 0310 	ands.w	r3, r8, #16
 8006da4:	bf18      	it	ne
 8006da6:	236a      	movne	r3, #106	; 0x6a
 8006da8:	4648      	mov	r0, r9
 8006daa:	9305      	str	r3, [sp, #20]
 8006dac:	4651      	mov	r1, sl
 8006dae:	2300      	movs	r3, #0
 8006db0:	4da1      	ldr	r5, [pc, #644]	; (8007038 <_strtod_l+0x850>)
 8006db2:	f1b8 0f00 	cmp.w	r8, #0
 8006db6:	f300 8113 	bgt.w	8006fe0 <_strtod_l+0x7f8>
 8006dba:	b10b      	cbz	r3, 8006dc0 <_strtod_l+0x5d8>
 8006dbc:	4681      	mov	r9, r0
 8006dbe:	468a      	mov	sl, r1
 8006dc0:	9b05      	ldr	r3, [sp, #20]
 8006dc2:	b1bb      	cbz	r3, 8006df4 <_strtod_l+0x60c>
 8006dc4:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8006dc8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	4651      	mov	r1, sl
 8006dd0:	dd10      	ble.n	8006df4 <_strtod_l+0x60c>
 8006dd2:	2b1f      	cmp	r3, #31
 8006dd4:	f340 8110 	ble.w	8006ff8 <_strtod_l+0x810>
 8006dd8:	2b34      	cmp	r3, #52	; 0x34
 8006dda:	bfd8      	it	le
 8006ddc:	f04f 32ff 	movle.w	r2, #4294967295
 8006de0:	f04f 0900 	mov.w	r9, #0
 8006de4:	bfcf      	iteee	gt
 8006de6:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8006dea:	3b20      	suble	r3, #32
 8006dec:	fa02 f303 	lslle.w	r3, r2, r3
 8006df0:	ea03 0a01 	andle.w	sl, r3, r1
 8006df4:	2200      	movs	r2, #0
 8006df6:	2300      	movs	r3, #0
 8006df8:	4648      	mov	r0, r9
 8006dfa:	4651      	mov	r1, sl
 8006dfc:	f7f9 fdd4 	bl	80009a8 <__aeabi_dcmpeq>
 8006e00:	2800      	cmp	r0, #0
 8006e02:	d1a8      	bne.n	8006d56 <_strtod_l+0x56e>
 8006e04:	9b06      	ldr	r3, [sp, #24]
 8006e06:	9a04      	ldr	r2, [sp, #16]
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	9908      	ldr	r1, [sp, #32]
 8006e0c:	4623      	mov	r3, r4
 8006e0e:	4658      	mov	r0, fp
 8006e10:	f001 fdbf 	bl	8008992 <__s2b>
 8006e14:	9008      	str	r0, [sp, #32]
 8006e16:	2800      	cmp	r0, #0
 8006e18:	f43f af00 	beq.w	8006c1c <_strtod_l+0x434>
 8006e1c:	9a07      	ldr	r2, [sp, #28]
 8006e1e:	9b07      	ldr	r3, [sp, #28]
 8006e20:	2a00      	cmp	r2, #0
 8006e22:	f1c3 0300 	rsb	r3, r3, #0
 8006e26:	bfa8      	it	ge
 8006e28:	2300      	movge	r3, #0
 8006e2a:	f04f 0800 	mov.w	r8, #0
 8006e2e:	930e      	str	r3, [sp, #56]	; 0x38
 8006e30:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006e34:	9316      	str	r3, [sp, #88]	; 0x58
 8006e36:	f8cd 8010 	str.w	r8, [sp, #16]
 8006e3a:	9b08      	ldr	r3, [sp, #32]
 8006e3c:	4658      	mov	r0, fp
 8006e3e:	6859      	ldr	r1, [r3, #4]
 8006e40:	f001 fd21 	bl	8008886 <_Balloc>
 8006e44:	9006      	str	r0, [sp, #24]
 8006e46:	2800      	cmp	r0, #0
 8006e48:	f43f aef0 	beq.w	8006c2c <_strtod_l+0x444>
 8006e4c:	9b08      	ldr	r3, [sp, #32]
 8006e4e:	300c      	adds	r0, #12
 8006e50:	691a      	ldr	r2, [r3, #16]
 8006e52:	f103 010c 	add.w	r1, r3, #12
 8006e56:	3202      	adds	r2, #2
 8006e58:	0092      	lsls	r2, r2, #2
 8006e5a:	f001 fd09 	bl	8008870 <memcpy>
 8006e5e:	ab1e      	add	r3, sp, #120	; 0x78
 8006e60:	9301      	str	r3, [sp, #4]
 8006e62:	ab1d      	add	r3, sp, #116	; 0x74
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	464a      	mov	r2, r9
 8006e68:	4653      	mov	r3, sl
 8006e6a:	4658      	mov	r0, fp
 8006e6c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8006e70:	f002 f84a 	bl	8008f08 <__d2b>
 8006e74:	901c      	str	r0, [sp, #112]	; 0x70
 8006e76:	2800      	cmp	r0, #0
 8006e78:	f43f aed8 	beq.w	8006c2c <_strtod_l+0x444>
 8006e7c:	2101      	movs	r1, #1
 8006e7e:	4658      	mov	r0, fp
 8006e80:	f001 fe13 	bl	8008aaa <__i2b>
 8006e84:	9004      	str	r0, [sp, #16]
 8006e86:	4603      	mov	r3, r0
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	f43f aecf 	beq.w	8006c2c <_strtod_l+0x444>
 8006e8e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8006e90:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006e92:	2d00      	cmp	r5, #0
 8006e94:	bfab      	itete	ge
 8006e96:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006e98:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006e9a:	18ee      	addge	r6, r5, r3
 8006e9c:	1b5c      	sublt	r4, r3, r5
 8006e9e:	9b05      	ldr	r3, [sp, #20]
 8006ea0:	bfa8      	it	ge
 8006ea2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8006ea4:	eba5 0503 	sub.w	r5, r5, r3
 8006ea8:	4415      	add	r5, r2
 8006eaa:	4b64      	ldr	r3, [pc, #400]	; (800703c <_strtod_l+0x854>)
 8006eac:	f105 35ff 	add.w	r5, r5, #4294967295
 8006eb0:	bfb8      	it	lt
 8006eb2:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006eb4:	429d      	cmp	r5, r3
 8006eb6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006eba:	f280 80af 	bge.w	800701c <_strtod_l+0x834>
 8006ebe:	1b5b      	subs	r3, r3, r5
 8006ec0:	2b1f      	cmp	r3, #31
 8006ec2:	eba2 0203 	sub.w	r2, r2, r3
 8006ec6:	f04f 0701 	mov.w	r7, #1
 8006eca:	f300 809c 	bgt.w	8007006 <_strtod_l+0x81e>
 8006ece:	2500      	movs	r5, #0
 8006ed0:	fa07 f303 	lsl.w	r3, r7, r3
 8006ed4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ed6:	18b7      	adds	r7, r6, r2
 8006ed8:	9b05      	ldr	r3, [sp, #20]
 8006eda:	42be      	cmp	r6, r7
 8006edc:	4414      	add	r4, r2
 8006ede:	441c      	add	r4, r3
 8006ee0:	4633      	mov	r3, r6
 8006ee2:	bfa8      	it	ge
 8006ee4:	463b      	movge	r3, r7
 8006ee6:	42a3      	cmp	r3, r4
 8006ee8:	bfa8      	it	ge
 8006eea:	4623      	movge	r3, r4
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	bfc2      	ittt	gt
 8006ef0:	1aff      	subgt	r7, r7, r3
 8006ef2:	1ae4      	subgt	r4, r4, r3
 8006ef4:	1af6      	subgt	r6, r6, r3
 8006ef6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ef8:	b1bb      	cbz	r3, 8006f2a <_strtod_l+0x742>
 8006efa:	461a      	mov	r2, r3
 8006efc:	9904      	ldr	r1, [sp, #16]
 8006efe:	4658      	mov	r0, fp
 8006f00:	f001 fe72 	bl	8008be8 <__pow5mult>
 8006f04:	9004      	str	r0, [sp, #16]
 8006f06:	2800      	cmp	r0, #0
 8006f08:	f43f ae90 	beq.w	8006c2c <_strtod_l+0x444>
 8006f0c:	4601      	mov	r1, r0
 8006f0e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006f10:	4658      	mov	r0, fp
 8006f12:	f001 fdd3 	bl	8008abc <__multiply>
 8006f16:	9009      	str	r0, [sp, #36]	; 0x24
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	f43f ae87 	beq.w	8006c2c <_strtod_l+0x444>
 8006f1e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006f20:	4658      	mov	r0, fp
 8006f22:	f001 fce4 	bl	80088ee <_Bfree>
 8006f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f28:	931c      	str	r3, [sp, #112]	; 0x70
 8006f2a:	2f00      	cmp	r7, #0
 8006f2c:	dc7a      	bgt.n	8007024 <_strtod_l+0x83c>
 8006f2e:	9b07      	ldr	r3, [sp, #28]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	dd08      	ble.n	8006f46 <_strtod_l+0x75e>
 8006f34:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006f36:	9906      	ldr	r1, [sp, #24]
 8006f38:	4658      	mov	r0, fp
 8006f3a:	f001 fe55 	bl	8008be8 <__pow5mult>
 8006f3e:	9006      	str	r0, [sp, #24]
 8006f40:	2800      	cmp	r0, #0
 8006f42:	f43f ae73 	beq.w	8006c2c <_strtod_l+0x444>
 8006f46:	2c00      	cmp	r4, #0
 8006f48:	dd08      	ble.n	8006f5c <_strtod_l+0x774>
 8006f4a:	4622      	mov	r2, r4
 8006f4c:	9906      	ldr	r1, [sp, #24]
 8006f4e:	4658      	mov	r0, fp
 8006f50:	f001 fe98 	bl	8008c84 <__lshift>
 8006f54:	9006      	str	r0, [sp, #24]
 8006f56:	2800      	cmp	r0, #0
 8006f58:	f43f ae68 	beq.w	8006c2c <_strtod_l+0x444>
 8006f5c:	2e00      	cmp	r6, #0
 8006f5e:	dd08      	ble.n	8006f72 <_strtod_l+0x78a>
 8006f60:	4632      	mov	r2, r6
 8006f62:	9904      	ldr	r1, [sp, #16]
 8006f64:	4658      	mov	r0, fp
 8006f66:	f001 fe8d 	bl	8008c84 <__lshift>
 8006f6a:	9004      	str	r0, [sp, #16]
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	f43f ae5d 	beq.w	8006c2c <_strtod_l+0x444>
 8006f72:	9a06      	ldr	r2, [sp, #24]
 8006f74:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006f76:	4658      	mov	r0, fp
 8006f78:	f001 fef2 	bl	8008d60 <__mdiff>
 8006f7c:	4680      	mov	r8, r0
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	f43f ae54 	beq.w	8006c2c <_strtod_l+0x444>
 8006f84:	2400      	movs	r4, #0
 8006f86:	68c3      	ldr	r3, [r0, #12]
 8006f88:	9904      	ldr	r1, [sp, #16]
 8006f8a:	60c4      	str	r4, [r0, #12]
 8006f8c:	930c      	str	r3, [sp, #48]	; 0x30
 8006f8e:	f001 fecd 	bl	8008d2c <__mcmp>
 8006f92:	42a0      	cmp	r0, r4
 8006f94:	da54      	bge.n	8007040 <_strtod_l+0x858>
 8006f96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f98:	b9f3      	cbnz	r3, 8006fd8 <_strtod_l+0x7f0>
 8006f9a:	f1b9 0f00 	cmp.w	r9, #0
 8006f9e:	d11b      	bne.n	8006fd8 <_strtod_l+0x7f0>
 8006fa0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8006fa4:	b9c3      	cbnz	r3, 8006fd8 <_strtod_l+0x7f0>
 8006fa6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006faa:	0d1b      	lsrs	r3, r3, #20
 8006fac:	051b      	lsls	r3, r3, #20
 8006fae:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006fb2:	d911      	bls.n	8006fd8 <_strtod_l+0x7f0>
 8006fb4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006fb8:	b91b      	cbnz	r3, 8006fc2 <_strtod_l+0x7da>
 8006fba:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	dd0a      	ble.n	8006fd8 <_strtod_l+0x7f0>
 8006fc2:	4641      	mov	r1, r8
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	4658      	mov	r0, fp
 8006fc8:	f001 fe5c 	bl	8008c84 <__lshift>
 8006fcc:	9904      	ldr	r1, [sp, #16]
 8006fce:	4680      	mov	r8, r0
 8006fd0:	f001 feac 	bl	8008d2c <__mcmp>
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	dc68      	bgt.n	80070aa <_strtod_l+0x8c2>
 8006fd8:	9b05      	ldr	r3, [sp, #20]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d172      	bne.n	80070c4 <_strtod_l+0x8dc>
 8006fde:	e630      	b.n	8006c42 <_strtod_l+0x45a>
 8006fe0:	f018 0f01 	tst.w	r8, #1
 8006fe4:	d004      	beq.n	8006ff0 <_strtod_l+0x808>
 8006fe6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006fea:	f7f9 fa75 	bl	80004d8 <__aeabi_dmul>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006ff4:	3508      	adds	r5, #8
 8006ff6:	e6dc      	b.n	8006db2 <_strtod_l+0x5ca>
 8006ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8006ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8007000:	ea03 0909 	and.w	r9, r3, r9
 8007004:	e6f6      	b.n	8006df4 <_strtod_l+0x60c>
 8007006:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800700a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800700e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007012:	35e2      	adds	r5, #226	; 0xe2
 8007014:	fa07 f505 	lsl.w	r5, r7, r5
 8007018:	970f      	str	r7, [sp, #60]	; 0x3c
 800701a:	e75c      	b.n	8006ed6 <_strtod_l+0x6ee>
 800701c:	2301      	movs	r3, #1
 800701e:	2500      	movs	r5, #0
 8007020:	930f      	str	r3, [sp, #60]	; 0x3c
 8007022:	e758      	b.n	8006ed6 <_strtod_l+0x6ee>
 8007024:	463a      	mov	r2, r7
 8007026:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007028:	4658      	mov	r0, fp
 800702a:	f001 fe2b 	bl	8008c84 <__lshift>
 800702e:	901c      	str	r0, [sp, #112]	; 0x70
 8007030:	2800      	cmp	r0, #0
 8007032:	f47f af7c 	bne.w	8006f2e <_strtod_l+0x746>
 8007036:	e5f9      	b.n	8006c2c <_strtod_l+0x444>
 8007038:	08009e20 	.word	0x08009e20
 800703c:	fffffc02 	.word	0xfffffc02
 8007040:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007044:	f040 8089 	bne.w	800715a <_strtod_l+0x972>
 8007048:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800704a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800704e:	b342      	cbz	r2, 80070a2 <_strtod_l+0x8ba>
 8007050:	4aaf      	ldr	r2, [pc, #700]	; (8007310 <_strtod_l+0xb28>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d156      	bne.n	8007104 <_strtod_l+0x91c>
 8007056:	9b05      	ldr	r3, [sp, #20]
 8007058:	4648      	mov	r0, r9
 800705a:	b1eb      	cbz	r3, 8007098 <_strtod_l+0x8b0>
 800705c:	4653      	mov	r3, sl
 800705e:	4aad      	ldr	r2, [pc, #692]	; (8007314 <_strtod_l+0xb2c>)
 8007060:	f04f 31ff 	mov.w	r1, #4294967295
 8007064:	401a      	ands	r2, r3
 8007066:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800706a:	d818      	bhi.n	800709e <_strtod_l+0x8b6>
 800706c:	0d12      	lsrs	r2, r2, #20
 800706e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007072:	fa01 f303 	lsl.w	r3, r1, r3
 8007076:	4298      	cmp	r0, r3
 8007078:	d144      	bne.n	8007104 <_strtod_l+0x91c>
 800707a:	4ba7      	ldr	r3, [pc, #668]	; (8007318 <_strtod_l+0xb30>)
 800707c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800707e:	429a      	cmp	r2, r3
 8007080:	d102      	bne.n	8007088 <_strtod_l+0x8a0>
 8007082:	3001      	adds	r0, #1
 8007084:	f43f add2 	beq.w	8006c2c <_strtod_l+0x444>
 8007088:	4ba2      	ldr	r3, [pc, #648]	; (8007314 <_strtod_l+0xb2c>)
 800708a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800708c:	f04f 0900 	mov.w	r9, #0
 8007090:	401a      	ands	r2, r3
 8007092:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8007096:	e79f      	b.n	8006fd8 <_strtod_l+0x7f0>
 8007098:	f04f 33ff 	mov.w	r3, #4294967295
 800709c:	e7eb      	b.n	8007076 <_strtod_l+0x88e>
 800709e:	460b      	mov	r3, r1
 80070a0:	e7e9      	b.n	8007076 <_strtod_l+0x88e>
 80070a2:	bb7b      	cbnz	r3, 8007104 <_strtod_l+0x91c>
 80070a4:	f1b9 0f00 	cmp.w	r9, #0
 80070a8:	d12c      	bne.n	8007104 <_strtod_l+0x91c>
 80070aa:	9905      	ldr	r1, [sp, #20]
 80070ac:	4653      	mov	r3, sl
 80070ae:	4a99      	ldr	r2, [pc, #612]	; (8007314 <_strtod_l+0xb2c>)
 80070b0:	b1f1      	cbz	r1, 80070f0 <_strtod_l+0x908>
 80070b2:	ea02 010a 	and.w	r1, r2, sl
 80070b6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80070ba:	dc19      	bgt.n	80070f0 <_strtod_l+0x908>
 80070bc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80070c0:	f77f ae51 	ble.w	8006d66 <_strtod_l+0x57e>
 80070c4:	2300      	movs	r3, #0
 80070c6:	4a95      	ldr	r2, [pc, #596]	; (800731c <_strtod_l+0xb34>)
 80070c8:	4648      	mov	r0, r9
 80070ca:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80070ce:	4651      	mov	r1, sl
 80070d0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80070d4:	f7f9 fa00 	bl	80004d8 <__aeabi_dmul>
 80070d8:	4681      	mov	r9, r0
 80070da:	468a      	mov	sl, r1
 80070dc:	2900      	cmp	r1, #0
 80070de:	f47f adb0 	bne.w	8006c42 <_strtod_l+0x45a>
 80070e2:	2800      	cmp	r0, #0
 80070e4:	f47f adad 	bne.w	8006c42 <_strtod_l+0x45a>
 80070e8:	2322      	movs	r3, #34	; 0x22
 80070ea:	f8cb 3000 	str.w	r3, [fp]
 80070ee:	e5a8      	b.n	8006c42 <_strtod_l+0x45a>
 80070f0:	4013      	ands	r3, r2
 80070f2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80070f6:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 80070fa:	f04f 39ff 	mov.w	r9, #4294967295
 80070fe:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8007102:	e769      	b.n	8006fd8 <_strtod_l+0x7f0>
 8007104:	b19d      	cbz	r5, 800712e <_strtod_l+0x946>
 8007106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007108:	421d      	tst	r5, r3
 800710a:	f43f af65 	beq.w	8006fd8 <_strtod_l+0x7f0>
 800710e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007110:	9a05      	ldr	r2, [sp, #20]
 8007112:	4648      	mov	r0, r9
 8007114:	4651      	mov	r1, sl
 8007116:	b173      	cbz	r3, 8007136 <_strtod_l+0x94e>
 8007118:	f7ff fb42 	bl	80067a0 <sulp>
 800711c:	4602      	mov	r2, r0
 800711e:	460b      	mov	r3, r1
 8007120:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007124:	f7f9 f822 	bl	800016c <__adddf3>
 8007128:	4681      	mov	r9, r0
 800712a:	468a      	mov	sl, r1
 800712c:	e754      	b.n	8006fd8 <_strtod_l+0x7f0>
 800712e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007130:	ea13 0f09 	tst.w	r3, r9
 8007134:	e7e9      	b.n	800710a <_strtod_l+0x922>
 8007136:	f7ff fb33 	bl	80067a0 <sulp>
 800713a:	4602      	mov	r2, r0
 800713c:	460b      	mov	r3, r1
 800713e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007142:	f7f9 f811 	bl	8000168 <__aeabi_dsub>
 8007146:	2200      	movs	r2, #0
 8007148:	2300      	movs	r3, #0
 800714a:	4681      	mov	r9, r0
 800714c:	468a      	mov	sl, r1
 800714e:	f7f9 fc2b 	bl	80009a8 <__aeabi_dcmpeq>
 8007152:	2800      	cmp	r0, #0
 8007154:	f47f ae07 	bne.w	8006d66 <_strtod_l+0x57e>
 8007158:	e73e      	b.n	8006fd8 <_strtod_l+0x7f0>
 800715a:	9904      	ldr	r1, [sp, #16]
 800715c:	4640      	mov	r0, r8
 800715e:	f001 ff22 	bl	8008fa6 <__ratio>
 8007162:	2200      	movs	r2, #0
 8007164:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007168:	4606      	mov	r6, r0
 800716a:	460f      	mov	r7, r1
 800716c:	f7f9 fc30 	bl	80009d0 <__aeabi_dcmple>
 8007170:	2800      	cmp	r0, #0
 8007172:	d075      	beq.n	8007260 <_strtod_l+0xa78>
 8007174:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007176:	2b00      	cmp	r3, #0
 8007178:	d047      	beq.n	800720a <_strtod_l+0xa22>
 800717a:	2600      	movs	r6, #0
 800717c:	4f68      	ldr	r7, [pc, #416]	; (8007320 <_strtod_l+0xb38>)
 800717e:	4d68      	ldr	r5, [pc, #416]	; (8007320 <_strtod_l+0xb38>)
 8007180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007182:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007186:	0d1b      	lsrs	r3, r3, #20
 8007188:	051b      	lsls	r3, r3, #20
 800718a:	930f      	str	r3, [sp, #60]	; 0x3c
 800718c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800718e:	4b65      	ldr	r3, [pc, #404]	; (8007324 <_strtod_l+0xb3c>)
 8007190:	429a      	cmp	r2, r3
 8007192:	f040 80cf 	bne.w	8007334 <_strtod_l+0xb4c>
 8007196:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800719a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800719e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071a0:	4648      	mov	r0, r9
 80071a2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 80071a6:	4651      	mov	r1, sl
 80071a8:	f001 fe38 	bl	8008e1c <__ulp>
 80071ac:	4602      	mov	r2, r0
 80071ae:	460b      	mov	r3, r1
 80071b0:	4630      	mov	r0, r6
 80071b2:	4639      	mov	r1, r7
 80071b4:	f7f9 f990 	bl	80004d8 <__aeabi_dmul>
 80071b8:	464a      	mov	r2, r9
 80071ba:	4653      	mov	r3, sl
 80071bc:	f7f8 ffd6 	bl	800016c <__adddf3>
 80071c0:	460b      	mov	r3, r1
 80071c2:	4954      	ldr	r1, [pc, #336]	; (8007314 <_strtod_l+0xb2c>)
 80071c4:	4a58      	ldr	r2, [pc, #352]	; (8007328 <_strtod_l+0xb40>)
 80071c6:	4019      	ands	r1, r3
 80071c8:	4291      	cmp	r1, r2
 80071ca:	4681      	mov	r9, r0
 80071cc:	d95e      	bls.n	800728c <_strtod_l+0xaa4>
 80071ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071d0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d103      	bne.n	80071e0 <_strtod_l+0x9f8>
 80071d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071da:	3301      	adds	r3, #1
 80071dc:	f43f ad26 	beq.w	8006c2c <_strtod_l+0x444>
 80071e0:	f04f 39ff 	mov.w	r9, #4294967295
 80071e4:	f8df a130 	ldr.w	sl, [pc, #304]	; 8007318 <_strtod_l+0xb30>
 80071e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80071ea:	4658      	mov	r0, fp
 80071ec:	f001 fb7f 	bl	80088ee <_Bfree>
 80071f0:	9906      	ldr	r1, [sp, #24]
 80071f2:	4658      	mov	r0, fp
 80071f4:	f001 fb7b 	bl	80088ee <_Bfree>
 80071f8:	9904      	ldr	r1, [sp, #16]
 80071fa:	4658      	mov	r0, fp
 80071fc:	f001 fb77 	bl	80088ee <_Bfree>
 8007200:	4641      	mov	r1, r8
 8007202:	4658      	mov	r0, fp
 8007204:	f001 fb73 	bl	80088ee <_Bfree>
 8007208:	e617      	b.n	8006e3a <_strtod_l+0x652>
 800720a:	f1b9 0f00 	cmp.w	r9, #0
 800720e:	d119      	bne.n	8007244 <_strtod_l+0xa5c>
 8007210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007212:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007216:	b9e3      	cbnz	r3, 8007252 <_strtod_l+0xa6a>
 8007218:	2200      	movs	r2, #0
 800721a:	4b41      	ldr	r3, [pc, #260]	; (8007320 <_strtod_l+0xb38>)
 800721c:	4630      	mov	r0, r6
 800721e:	4639      	mov	r1, r7
 8007220:	f7f9 fbcc 	bl	80009bc <__aeabi_dcmplt>
 8007224:	b9c8      	cbnz	r0, 800725a <_strtod_l+0xa72>
 8007226:	2200      	movs	r2, #0
 8007228:	4b40      	ldr	r3, [pc, #256]	; (800732c <_strtod_l+0xb44>)
 800722a:	4630      	mov	r0, r6
 800722c:	4639      	mov	r1, r7
 800722e:	f7f9 f953 	bl	80004d8 <__aeabi_dmul>
 8007232:	4604      	mov	r4, r0
 8007234:	460d      	mov	r5, r1
 8007236:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800723a:	9418      	str	r4, [sp, #96]	; 0x60
 800723c:	9319      	str	r3, [sp, #100]	; 0x64
 800723e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8007242:	e79d      	b.n	8007180 <_strtod_l+0x998>
 8007244:	f1b9 0f01 	cmp.w	r9, #1
 8007248:	d103      	bne.n	8007252 <_strtod_l+0xa6a>
 800724a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800724c:	2b00      	cmp	r3, #0
 800724e:	f43f ad8a 	beq.w	8006d66 <_strtod_l+0x57e>
 8007252:	2600      	movs	r6, #0
 8007254:	4f36      	ldr	r7, [pc, #216]	; (8007330 <_strtod_l+0xb48>)
 8007256:	2400      	movs	r4, #0
 8007258:	e791      	b.n	800717e <_strtod_l+0x996>
 800725a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800725c:	4d33      	ldr	r5, [pc, #204]	; (800732c <_strtod_l+0xb44>)
 800725e:	e7ea      	b.n	8007236 <_strtod_l+0xa4e>
 8007260:	4b32      	ldr	r3, [pc, #200]	; (800732c <_strtod_l+0xb44>)
 8007262:	2200      	movs	r2, #0
 8007264:	4630      	mov	r0, r6
 8007266:	4639      	mov	r1, r7
 8007268:	f7f9 f936 	bl	80004d8 <__aeabi_dmul>
 800726c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800726e:	4604      	mov	r4, r0
 8007270:	460d      	mov	r5, r1
 8007272:	b933      	cbnz	r3, 8007282 <_strtod_l+0xa9a>
 8007274:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007278:	9010      	str	r0, [sp, #64]	; 0x40
 800727a:	9311      	str	r3, [sp, #68]	; 0x44
 800727c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007280:	e77e      	b.n	8007180 <_strtod_l+0x998>
 8007282:	4602      	mov	r2, r0
 8007284:	460b      	mov	r3, r1
 8007286:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800728a:	e7f7      	b.n	800727c <_strtod_l+0xa94>
 800728c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8007290:	9b05      	ldr	r3, [sp, #20]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1a8      	bne.n	80071e8 <_strtod_l+0xa00>
 8007296:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800729a:	0d1b      	lsrs	r3, r3, #20
 800729c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800729e:	051b      	lsls	r3, r3, #20
 80072a0:	429a      	cmp	r2, r3
 80072a2:	4656      	mov	r6, sl
 80072a4:	d1a0      	bne.n	80071e8 <_strtod_l+0xa00>
 80072a6:	4629      	mov	r1, r5
 80072a8:	4620      	mov	r0, r4
 80072aa:	f7f9 fbc5 	bl	8000a38 <__aeabi_d2iz>
 80072ae:	f7f9 f8a9 	bl	8000404 <__aeabi_i2d>
 80072b2:	460b      	mov	r3, r1
 80072b4:	4602      	mov	r2, r0
 80072b6:	4629      	mov	r1, r5
 80072b8:	4620      	mov	r0, r4
 80072ba:	f7f8 ff55 	bl	8000168 <__aeabi_dsub>
 80072be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072c0:	4604      	mov	r4, r0
 80072c2:	460d      	mov	r5, r1
 80072c4:	b933      	cbnz	r3, 80072d4 <_strtod_l+0xaec>
 80072c6:	f1b9 0f00 	cmp.w	r9, #0
 80072ca:	d103      	bne.n	80072d4 <_strtod_l+0xaec>
 80072cc:	f3ca 0613 	ubfx	r6, sl, #0, #20
 80072d0:	2e00      	cmp	r6, #0
 80072d2:	d06a      	beq.n	80073aa <_strtod_l+0xbc2>
 80072d4:	a30a      	add	r3, pc, #40	; (adr r3, 8007300 <_strtod_l+0xb18>)
 80072d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072da:	4620      	mov	r0, r4
 80072dc:	4629      	mov	r1, r5
 80072de:	f7f9 fb6d 	bl	80009bc <__aeabi_dcmplt>
 80072e2:	2800      	cmp	r0, #0
 80072e4:	f47f acad 	bne.w	8006c42 <_strtod_l+0x45a>
 80072e8:	a307      	add	r3, pc, #28	; (adr r3, 8007308 <_strtod_l+0xb20>)
 80072ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ee:	4620      	mov	r0, r4
 80072f0:	4629      	mov	r1, r5
 80072f2:	f7f9 fb81 	bl	80009f8 <__aeabi_dcmpgt>
 80072f6:	2800      	cmp	r0, #0
 80072f8:	f43f af76 	beq.w	80071e8 <_strtod_l+0xa00>
 80072fc:	e4a1      	b.n	8006c42 <_strtod_l+0x45a>
 80072fe:	bf00      	nop
 8007300:	94a03595 	.word	0x94a03595
 8007304:	3fdfffff 	.word	0x3fdfffff
 8007308:	35afe535 	.word	0x35afe535
 800730c:	3fe00000 	.word	0x3fe00000
 8007310:	000fffff 	.word	0x000fffff
 8007314:	7ff00000 	.word	0x7ff00000
 8007318:	7fefffff 	.word	0x7fefffff
 800731c:	39500000 	.word	0x39500000
 8007320:	3ff00000 	.word	0x3ff00000
 8007324:	7fe00000 	.word	0x7fe00000
 8007328:	7c9fffff 	.word	0x7c9fffff
 800732c:	3fe00000 	.word	0x3fe00000
 8007330:	bff00000 	.word	0xbff00000
 8007334:	9b05      	ldr	r3, [sp, #20]
 8007336:	b313      	cbz	r3, 800737e <_strtod_l+0xb96>
 8007338:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800733a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800733e:	d81e      	bhi.n	800737e <_strtod_l+0xb96>
 8007340:	a325      	add	r3, pc, #148	; (adr r3, 80073d8 <_strtod_l+0xbf0>)
 8007342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007346:	4620      	mov	r0, r4
 8007348:	4629      	mov	r1, r5
 800734a:	f7f9 fb41 	bl	80009d0 <__aeabi_dcmple>
 800734e:	b190      	cbz	r0, 8007376 <_strtod_l+0xb8e>
 8007350:	4629      	mov	r1, r5
 8007352:	4620      	mov	r0, r4
 8007354:	f7f9 fb98 	bl	8000a88 <__aeabi_d2uiz>
 8007358:	2800      	cmp	r0, #0
 800735a:	bf08      	it	eq
 800735c:	2001      	moveq	r0, #1
 800735e:	f7f9 f841 	bl	80003e4 <__aeabi_ui2d>
 8007362:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007364:	4604      	mov	r4, r0
 8007366:	460d      	mov	r5, r1
 8007368:	b9d3      	cbnz	r3, 80073a0 <_strtod_l+0xbb8>
 800736a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800736e:	9012      	str	r0, [sp, #72]	; 0x48
 8007370:	9313      	str	r3, [sp, #76]	; 0x4c
 8007372:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007376:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007378:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800737c:	1a9f      	subs	r7, r3, r2
 800737e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007382:	f001 fd4b 	bl	8008e1c <__ulp>
 8007386:	4602      	mov	r2, r0
 8007388:	460b      	mov	r3, r1
 800738a:	4630      	mov	r0, r6
 800738c:	4639      	mov	r1, r7
 800738e:	f7f9 f8a3 	bl	80004d8 <__aeabi_dmul>
 8007392:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007396:	f7f8 fee9 	bl	800016c <__adddf3>
 800739a:	4681      	mov	r9, r0
 800739c:	468a      	mov	sl, r1
 800739e:	e777      	b.n	8007290 <_strtod_l+0xaa8>
 80073a0:	4602      	mov	r2, r0
 80073a2:	460b      	mov	r3, r1
 80073a4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80073a8:	e7e3      	b.n	8007372 <_strtod_l+0xb8a>
 80073aa:	a30d      	add	r3, pc, #52	; (adr r3, 80073e0 <_strtod_l+0xbf8>)
 80073ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b0:	f7f9 fb04 	bl	80009bc <__aeabi_dcmplt>
 80073b4:	e79f      	b.n	80072f6 <_strtod_l+0xb0e>
 80073b6:	2300      	movs	r3, #0
 80073b8:	930d      	str	r3, [sp, #52]	; 0x34
 80073ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073be:	6013      	str	r3, [r2, #0]
 80073c0:	f7ff ba55 	b.w	800686e <_strtod_l+0x86>
 80073c4:	2b65      	cmp	r3, #101	; 0x65
 80073c6:	f04f 0200 	mov.w	r2, #0
 80073ca:	f43f ab42 	beq.w	8006a52 <_strtod_l+0x26a>
 80073ce:	2101      	movs	r1, #1
 80073d0:	4614      	mov	r4, r2
 80073d2:	9105      	str	r1, [sp, #20]
 80073d4:	f7ff babf 	b.w	8006956 <_strtod_l+0x16e>
 80073d8:	ffc00000 	.word	0xffc00000
 80073dc:	41dfffff 	.word	0x41dfffff
 80073e0:	94a03595 	.word	0x94a03595
 80073e4:	3fcfffff 	.word	0x3fcfffff

080073e8 <_strtod_r>:
 80073e8:	4b05      	ldr	r3, [pc, #20]	; (8007400 <_strtod_r+0x18>)
 80073ea:	b410      	push	{r4}
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4c05      	ldr	r4, [pc, #20]	; (8007404 <_strtod_r+0x1c>)
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	bf08      	it	eq
 80073f6:	4623      	moveq	r3, r4
 80073f8:	bc10      	pop	{r4}
 80073fa:	f7ff b9f5 	b.w	80067e8 <_strtod_l>
 80073fe:	bf00      	nop
 8007400:	20000184 	.word	0x20000184
 8007404:	200001e8 	.word	0x200001e8

08007408 <_strtol_l.isra.0>:
 8007408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800740c:	4680      	mov	r8, r0
 800740e:	4689      	mov	r9, r1
 8007410:	4692      	mov	sl, r2
 8007412:	461e      	mov	r6, r3
 8007414:	460f      	mov	r7, r1
 8007416:	463d      	mov	r5, r7
 8007418:	9808      	ldr	r0, [sp, #32]
 800741a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800741e:	f001 f9eb 	bl	80087f8 <__locale_ctype_ptr_l>
 8007422:	4420      	add	r0, r4
 8007424:	7843      	ldrb	r3, [r0, #1]
 8007426:	f013 0308 	ands.w	r3, r3, #8
 800742a:	d132      	bne.n	8007492 <_strtol_l.isra.0+0x8a>
 800742c:	2c2d      	cmp	r4, #45	; 0x2d
 800742e:	d132      	bne.n	8007496 <_strtol_l.isra.0+0x8e>
 8007430:	2201      	movs	r2, #1
 8007432:	787c      	ldrb	r4, [r7, #1]
 8007434:	1cbd      	adds	r5, r7, #2
 8007436:	2e00      	cmp	r6, #0
 8007438:	d05d      	beq.n	80074f6 <_strtol_l.isra.0+0xee>
 800743a:	2e10      	cmp	r6, #16
 800743c:	d109      	bne.n	8007452 <_strtol_l.isra.0+0x4a>
 800743e:	2c30      	cmp	r4, #48	; 0x30
 8007440:	d107      	bne.n	8007452 <_strtol_l.isra.0+0x4a>
 8007442:	782b      	ldrb	r3, [r5, #0]
 8007444:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007448:	2b58      	cmp	r3, #88	; 0x58
 800744a:	d14f      	bne.n	80074ec <_strtol_l.isra.0+0xe4>
 800744c:	2610      	movs	r6, #16
 800744e:	786c      	ldrb	r4, [r5, #1]
 8007450:	3502      	adds	r5, #2
 8007452:	2a00      	cmp	r2, #0
 8007454:	bf14      	ite	ne
 8007456:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800745a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800745e:	2700      	movs	r7, #0
 8007460:	fbb1 fcf6 	udiv	ip, r1, r6
 8007464:	4638      	mov	r0, r7
 8007466:	fb06 1e1c 	mls	lr, r6, ip, r1
 800746a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800746e:	2b09      	cmp	r3, #9
 8007470:	d817      	bhi.n	80074a2 <_strtol_l.isra.0+0x9a>
 8007472:	461c      	mov	r4, r3
 8007474:	42a6      	cmp	r6, r4
 8007476:	dd23      	ble.n	80074c0 <_strtol_l.isra.0+0xb8>
 8007478:	1c7b      	adds	r3, r7, #1
 800747a:	d007      	beq.n	800748c <_strtol_l.isra.0+0x84>
 800747c:	4584      	cmp	ip, r0
 800747e:	d31c      	bcc.n	80074ba <_strtol_l.isra.0+0xb2>
 8007480:	d101      	bne.n	8007486 <_strtol_l.isra.0+0x7e>
 8007482:	45a6      	cmp	lr, r4
 8007484:	db19      	blt.n	80074ba <_strtol_l.isra.0+0xb2>
 8007486:	2701      	movs	r7, #1
 8007488:	fb00 4006 	mla	r0, r0, r6, r4
 800748c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007490:	e7eb      	b.n	800746a <_strtol_l.isra.0+0x62>
 8007492:	462f      	mov	r7, r5
 8007494:	e7bf      	b.n	8007416 <_strtol_l.isra.0+0xe>
 8007496:	2c2b      	cmp	r4, #43	; 0x2b
 8007498:	bf04      	itt	eq
 800749a:	1cbd      	addeq	r5, r7, #2
 800749c:	787c      	ldrbeq	r4, [r7, #1]
 800749e:	461a      	mov	r2, r3
 80074a0:	e7c9      	b.n	8007436 <_strtol_l.isra.0+0x2e>
 80074a2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80074a6:	2b19      	cmp	r3, #25
 80074a8:	d801      	bhi.n	80074ae <_strtol_l.isra.0+0xa6>
 80074aa:	3c37      	subs	r4, #55	; 0x37
 80074ac:	e7e2      	b.n	8007474 <_strtol_l.isra.0+0x6c>
 80074ae:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80074b2:	2b19      	cmp	r3, #25
 80074b4:	d804      	bhi.n	80074c0 <_strtol_l.isra.0+0xb8>
 80074b6:	3c57      	subs	r4, #87	; 0x57
 80074b8:	e7dc      	b.n	8007474 <_strtol_l.isra.0+0x6c>
 80074ba:	f04f 37ff 	mov.w	r7, #4294967295
 80074be:	e7e5      	b.n	800748c <_strtol_l.isra.0+0x84>
 80074c0:	1c7b      	adds	r3, r7, #1
 80074c2:	d108      	bne.n	80074d6 <_strtol_l.isra.0+0xce>
 80074c4:	2322      	movs	r3, #34	; 0x22
 80074c6:	4608      	mov	r0, r1
 80074c8:	f8c8 3000 	str.w	r3, [r8]
 80074cc:	f1ba 0f00 	cmp.w	sl, #0
 80074d0:	d107      	bne.n	80074e2 <_strtol_l.isra.0+0xda>
 80074d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074d6:	b102      	cbz	r2, 80074da <_strtol_l.isra.0+0xd2>
 80074d8:	4240      	negs	r0, r0
 80074da:	f1ba 0f00 	cmp.w	sl, #0
 80074de:	d0f8      	beq.n	80074d2 <_strtol_l.isra.0+0xca>
 80074e0:	b10f      	cbz	r7, 80074e6 <_strtol_l.isra.0+0xde>
 80074e2:	f105 39ff 	add.w	r9, r5, #4294967295
 80074e6:	f8ca 9000 	str.w	r9, [sl]
 80074ea:	e7f2      	b.n	80074d2 <_strtol_l.isra.0+0xca>
 80074ec:	2430      	movs	r4, #48	; 0x30
 80074ee:	2e00      	cmp	r6, #0
 80074f0:	d1af      	bne.n	8007452 <_strtol_l.isra.0+0x4a>
 80074f2:	2608      	movs	r6, #8
 80074f4:	e7ad      	b.n	8007452 <_strtol_l.isra.0+0x4a>
 80074f6:	2c30      	cmp	r4, #48	; 0x30
 80074f8:	d0a3      	beq.n	8007442 <_strtol_l.isra.0+0x3a>
 80074fa:	260a      	movs	r6, #10
 80074fc:	e7a9      	b.n	8007452 <_strtol_l.isra.0+0x4a>
	...

08007500 <_strtol_r>:
 8007500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007502:	4c06      	ldr	r4, [pc, #24]	; (800751c <_strtol_r+0x1c>)
 8007504:	4d06      	ldr	r5, [pc, #24]	; (8007520 <_strtol_r+0x20>)
 8007506:	6824      	ldr	r4, [r4, #0]
 8007508:	6a24      	ldr	r4, [r4, #32]
 800750a:	2c00      	cmp	r4, #0
 800750c:	bf08      	it	eq
 800750e:	462c      	moveq	r4, r5
 8007510:	9400      	str	r4, [sp, #0]
 8007512:	f7ff ff79 	bl	8007408 <_strtol_l.isra.0>
 8007516:	b003      	add	sp, #12
 8007518:	bd30      	pop	{r4, r5, pc}
 800751a:	bf00      	nop
 800751c:	20000184 	.word	0x20000184
 8007520:	200001e8 	.word	0x200001e8

08007524 <quorem>:
 8007524:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007528:	6903      	ldr	r3, [r0, #16]
 800752a:	690c      	ldr	r4, [r1, #16]
 800752c:	4680      	mov	r8, r0
 800752e:	42a3      	cmp	r3, r4
 8007530:	f2c0 8084 	blt.w	800763c <quorem+0x118>
 8007534:	3c01      	subs	r4, #1
 8007536:	f101 0714 	add.w	r7, r1, #20
 800753a:	f100 0614 	add.w	r6, r0, #20
 800753e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007542:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007546:	3501      	adds	r5, #1
 8007548:	fbb0 f5f5 	udiv	r5, r0, r5
 800754c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007550:	eb06 030c 	add.w	r3, r6, ip
 8007554:	eb07 090c 	add.w	r9, r7, ip
 8007558:	9301      	str	r3, [sp, #4]
 800755a:	b39d      	cbz	r5, 80075c4 <quorem+0xa0>
 800755c:	f04f 0a00 	mov.w	sl, #0
 8007560:	4638      	mov	r0, r7
 8007562:	46b6      	mov	lr, r6
 8007564:	46d3      	mov	fp, sl
 8007566:	f850 2b04 	ldr.w	r2, [r0], #4
 800756a:	b293      	uxth	r3, r2
 800756c:	fb05 a303 	mla	r3, r5, r3, sl
 8007570:	0c12      	lsrs	r2, r2, #16
 8007572:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007576:	fb05 a202 	mla	r2, r5, r2, sl
 800757a:	b29b      	uxth	r3, r3
 800757c:	ebab 0303 	sub.w	r3, fp, r3
 8007580:	f8de b000 	ldr.w	fp, [lr]
 8007584:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007588:	fa1f fb8b 	uxth.w	fp, fp
 800758c:	445b      	add	r3, fp
 800758e:	fa1f fb82 	uxth.w	fp, r2
 8007592:	f8de 2000 	ldr.w	r2, [lr]
 8007596:	4581      	cmp	r9, r0
 8007598:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800759c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075a6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80075aa:	f84e 3b04 	str.w	r3, [lr], #4
 80075ae:	d2da      	bcs.n	8007566 <quorem+0x42>
 80075b0:	f856 300c 	ldr.w	r3, [r6, ip]
 80075b4:	b933      	cbnz	r3, 80075c4 <quorem+0xa0>
 80075b6:	9b01      	ldr	r3, [sp, #4]
 80075b8:	3b04      	subs	r3, #4
 80075ba:	429e      	cmp	r6, r3
 80075bc:	461a      	mov	r2, r3
 80075be:	d331      	bcc.n	8007624 <quorem+0x100>
 80075c0:	f8c8 4010 	str.w	r4, [r8, #16]
 80075c4:	4640      	mov	r0, r8
 80075c6:	f001 fbb1 	bl	8008d2c <__mcmp>
 80075ca:	2800      	cmp	r0, #0
 80075cc:	db26      	blt.n	800761c <quorem+0xf8>
 80075ce:	4630      	mov	r0, r6
 80075d0:	f04f 0c00 	mov.w	ip, #0
 80075d4:	3501      	adds	r5, #1
 80075d6:	f857 1b04 	ldr.w	r1, [r7], #4
 80075da:	f8d0 e000 	ldr.w	lr, [r0]
 80075de:	b28b      	uxth	r3, r1
 80075e0:	ebac 0303 	sub.w	r3, ip, r3
 80075e4:	fa1f f28e 	uxth.w	r2, lr
 80075e8:	4413      	add	r3, r2
 80075ea:	0c0a      	lsrs	r2, r1, #16
 80075ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80075f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075fa:	45b9      	cmp	r9, r7
 80075fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007600:	f840 3b04 	str.w	r3, [r0], #4
 8007604:	d2e7      	bcs.n	80075d6 <quorem+0xb2>
 8007606:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800760a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800760e:	b92a      	cbnz	r2, 800761c <quorem+0xf8>
 8007610:	3b04      	subs	r3, #4
 8007612:	429e      	cmp	r6, r3
 8007614:	461a      	mov	r2, r3
 8007616:	d30b      	bcc.n	8007630 <quorem+0x10c>
 8007618:	f8c8 4010 	str.w	r4, [r8, #16]
 800761c:	4628      	mov	r0, r5
 800761e:	b003      	add	sp, #12
 8007620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007624:	6812      	ldr	r2, [r2, #0]
 8007626:	3b04      	subs	r3, #4
 8007628:	2a00      	cmp	r2, #0
 800762a:	d1c9      	bne.n	80075c0 <quorem+0x9c>
 800762c:	3c01      	subs	r4, #1
 800762e:	e7c4      	b.n	80075ba <quorem+0x96>
 8007630:	6812      	ldr	r2, [r2, #0]
 8007632:	3b04      	subs	r3, #4
 8007634:	2a00      	cmp	r2, #0
 8007636:	d1ef      	bne.n	8007618 <quorem+0xf4>
 8007638:	3c01      	subs	r4, #1
 800763a:	e7ea      	b.n	8007612 <quorem+0xee>
 800763c:	2000      	movs	r0, #0
 800763e:	e7ee      	b.n	800761e <quorem+0xfa>

08007640 <_dtoa_r>:
 8007640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007644:	4616      	mov	r6, r2
 8007646:	461f      	mov	r7, r3
 8007648:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800764a:	b095      	sub	sp, #84	; 0x54
 800764c:	4604      	mov	r4, r0
 800764e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8007652:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007656:	b93d      	cbnz	r5, 8007668 <_dtoa_r+0x28>
 8007658:	2010      	movs	r0, #16
 800765a:	f001 f8e1 	bl	8008820 <malloc>
 800765e:	6260      	str	r0, [r4, #36]	; 0x24
 8007660:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007664:	6005      	str	r5, [r0, #0]
 8007666:	60c5      	str	r5, [r0, #12]
 8007668:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800766a:	6819      	ldr	r1, [r3, #0]
 800766c:	b151      	cbz	r1, 8007684 <_dtoa_r+0x44>
 800766e:	685a      	ldr	r2, [r3, #4]
 8007670:	2301      	movs	r3, #1
 8007672:	4093      	lsls	r3, r2
 8007674:	604a      	str	r2, [r1, #4]
 8007676:	608b      	str	r3, [r1, #8]
 8007678:	4620      	mov	r0, r4
 800767a:	f001 f938 	bl	80088ee <_Bfree>
 800767e:	2200      	movs	r2, #0
 8007680:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007682:	601a      	str	r2, [r3, #0]
 8007684:	1e3b      	subs	r3, r7, #0
 8007686:	bfaf      	iteee	ge
 8007688:	2300      	movge	r3, #0
 800768a:	2201      	movlt	r2, #1
 800768c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007690:	9303      	strlt	r3, [sp, #12]
 8007692:	bfac      	ite	ge
 8007694:	f8c8 3000 	strge.w	r3, [r8]
 8007698:	f8c8 2000 	strlt.w	r2, [r8]
 800769c:	4bae      	ldr	r3, [pc, #696]	; (8007958 <_dtoa_r+0x318>)
 800769e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80076a2:	ea33 0308 	bics.w	r3, r3, r8
 80076a6:	d11b      	bne.n	80076e0 <_dtoa_r+0xa0>
 80076a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80076ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80076ae:	6013      	str	r3, [r2, #0]
 80076b0:	9b02      	ldr	r3, [sp, #8]
 80076b2:	b923      	cbnz	r3, 80076be <_dtoa_r+0x7e>
 80076b4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80076b8:	2800      	cmp	r0, #0
 80076ba:	f000 8545 	beq.w	8008148 <_dtoa_r+0xb08>
 80076be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076c0:	b953      	cbnz	r3, 80076d8 <_dtoa_r+0x98>
 80076c2:	4ba6      	ldr	r3, [pc, #664]	; (800795c <_dtoa_r+0x31c>)
 80076c4:	e021      	b.n	800770a <_dtoa_r+0xca>
 80076c6:	4ba6      	ldr	r3, [pc, #664]	; (8007960 <_dtoa_r+0x320>)
 80076c8:	9306      	str	r3, [sp, #24]
 80076ca:	3308      	adds	r3, #8
 80076cc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80076ce:	6013      	str	r3, [r2, #0]
 80076d0:	9806      	ldr	r0, [sp, #24]
 80076d2:	b015      	add	sp, #84	; 0x54
 80076d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d8:	4ba0      	ldr	r3, [pc, #640]	; (800795c <_dtoa_r+0x31c>)
 80076da:	9306      	str	r3, [sp, #24]
 80076dc:	3303      	adds	r3, #3
 80076de:	e7f5      	b.n	80076cc <_dtoa_r+0x8c>
 80076e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80076e4:	2200      	movs	r2, #0
 80076e6:	2300      	movs	r3, #0
 80076e8:	4630      	mov	r0, r6
 80076ea:	4639      	mov	r1, r7
 80076ec:	f7f9 f95c 	bl	80009a8 <__aeabi_dcmpeq>
 80076f0:	4682      	mov	sl, r0
 80076f2:	b160      	cbz	r0, 800770e <_dtoa_r+0xce>
 80076f4:	2301      	movs	r3, #1
 80076f6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80076f8:	6013      	str	r3, [r2, #0]
 80076fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f000 8520 	beq.w	8008142 <_dtoa_r+0xb02>
 8007702:	4b98      	ldr	r3, [pc, #608]	; (8007964 <_dtoa_r+0x324>)
 8007704:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007706:	6013      	str	r3, [r2, #0]
 8007708:	3b01      	subs	r3, #1
 800770a:	9306      	str	r3, [sp, #24]
 800770c:	e7e0      	b.n	80076d0 <_dtoa_r+0x90>
 800770e:	ab12      	add	r3, sp, #72	; 0x48
 8007710:	9301      	str	r3, [sp, #4]
 8007712:	ab13      	add	r3, sp, #76	; 0x4c
 8007714:	9300      	str	r3, [sp, #0]
 8007716:	4632      	mov	r2, r6
 8007718:	463b      	mov	r3, r7
 800771a:	4620      	mov	r0, r4
 800771c:	f001 fbf4 	bl	8008f08 <__d2b>
 8007720:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007724:	4683      	mov	fp, r0
 8007726:	2d00      	cmp	r5, #0
 8007728:	d07d      	beq.n	8007826 <_dtoa_r+0x1e6>
 800772a:	46b0      	mov	r8, r6
 800772c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007730:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8007734:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8007738:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800773c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8007740:	2200      	movs	r2, #0
 8007742:	4b89      	ldr	r3, [pc, #548]	; (8007968 <_dtoa_r+0x328>)
 8007744:	4640      	mov	r0, r8
 8007746:	4649      	mov	r1, r9
 8007748:	f7f8 fd0e 	bl	8000168 <__aeabi_dsub>
 800774c:	a37c      	add	r3, pc, #496	; (adr r3, 8007940 <_dtoa_r+0x300>)
 800774e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007752:	f7f8 fec1 	bl	80004d8 <__aeabi_dmul>
 8007756:	a37c      	add	r3, pc, #496	; (adr r3, 8007948 <_dtoa_r+0x308>)
 8007758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775c:	f7f8 fd06 	bl	800016c <__adddf3>
 8007760:	4606      	mov	r6, r0
 8007762:	4628      	mov	r0, r5
 8007764:	460f      	mov	r7, r1
 8007766:	f7f8 fe4d 	bl	8000404 <__aeabi_i2d>
 800776a:	a379      	add	r3, pc, #484	; (adr r3, 8007950 <_dtoa_r+0x310>)
 800776c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007770:	f7f8 feb2 	bl	80004d8 <__aeabi_dmul>
 8007774:	4602      	mov	r2, r0
 8007776:	460b      	mov	r3, r1
 8007778:	4630      	mov	r0, r6
 800777a:	4639      	mov	r1, r7
 800777c:	f7f8 fcf6 	bl	800016c <__adddf3>
 8007780:	4606      	mov	r6, r0
 8007782:	460f      	mov	r7, r1
 8007784:	f7f9 f958 	bl	8000a38 <__aeabi_d2iz>
 8007788:	2200      	movs	r2, #0
 800778a:	4682      	mov	sl, r0
 800778c:	2300      	movs	r3, #0
 800778e:	4630      	mov	r0, r6
 8007790:	4639      	mov	r1, r7
 8007792:	f7f9 f913 	bl	80009bc <__aeabi_dcmplt>
 8007796:	b148      	cbz	r0, 80077ac <_dtoa_r+0x16c>
 8007798:	4650      	mov	r0, sl
 800779a:	f7f8 fe33 	bl	8000404 <__aeabi_i2d>
 800779e:	4632      	mov	r2, r6
 80077a0:	463b      	mov	r3, r7
 80077a2:	f7f9 f901 	bl	80009a8 <__aeabi_dcmpeq>
 80077a6:	b908      	cbnz	r0, 80077ac <_dtoa_r+0x16c>
 80077a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077ac:	f1ba 0f16 	cmp.w	sl, #22
 80077b0:	d85a      	bhi.n	8007868 <_dtoa_r+0x228>
 80077b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077b6:	496d      	ldr	r1, [pc, #436]	; (800796c <_dtoa_r+0x32c>)
 80077b8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80077bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077c0:	f7f9 f91a 	bl	80009f8 <__aeabi_dcmpgt>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	d051      	beq.n	800786c <_dtoa_r+0x22c>
 80077c8:	2300      	movs	r3, #0
 80077ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077ce:	930d      	str	r3, [sp, #52]	; 0x34
 80077d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077d2:	1b5d      	subs	r5, r3, r5
 80077d4:	1e6b      	subs	r3, r5, #1
 80077d6:	9307      	str	r3, [sp, #28]
 80077d8:	bf43      	ittte	mi
 80077da:	2300      	movmi	r3, #0
 80077dc:	f1c5 0901 	rsbmi	r9, r5, #1
 80077e0:	9307      	strmi	r3, [sp, #28]
 80077e2:	f04f 0900 	movpl.w	r9, #0
 80077e6:	f1ba 0f00 	cmp.w	sl, #0
 80077ea:	db41      	blt.n	8007870 <_dtoa_r+0x230>
 80077ec:	9b07      	ldr	r3, [sp, #28]
 80077ee:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80077f2:	4453      	add	r3, sl
 80077f4:	9307      	str	r3, [sp, #28]
 80077f6:	2300      	movs	r3, #0
 80077f8:	9308      	str	r3, [sp, #32]
 80077fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80077fc:	2b09      	cmp	r3, #9
 80077fe:	f200 808f 	bhi.w	8007920 <_dtoa_r+0x2e0>
 8007802:	2b05      	cmp	r3, #5
 8007804:	bfc4      	itt	gt
 8007806:	3b04      	subgt	r3, #4
 8007808:	931e      	strgt	r3, [sp, #120]	; 0x78
 800780a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800780c:	bfc8      	it	gt
 800780e:	2500      	movgt	r5, #0
 8007810:	f1a3 0302 	sub.w	r3, r3, #2
 8007814:	bfd8      	it	le
 8007816:	2501      	movle	r5, #1
 8007818:	2b03      	cmp	r3, #3
 800781a:	f200 808d 	bhi.w	8007938 <_dtoa_r+0x2f8>
 800781e:	e8df f003 	tbb	[pc, r3]
 8007822:	7d7b      	.short	0x7d7b
 8007824:	6f2f      	.short	0x6f2f
 8007826:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800782a:	441d      	add	r5, r3
 800782c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007830:	2820      	cmp	r0, #32
 8007832:	dd13      	ble.n	800785c <_dtoa_r+0x21c>
 8007834:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007838:	9b02      	ldr	r3, [sp, #8]
 800783a:	fa08 f800 	lsl.w	r8, r8, r0
 800783e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007842:	fa23 f000 	lsr.w	r0, r3, r0
 8007846:	ea48 0000 	orr.w	r0, r8, r0
 800784a:	f7f8 fdcb 	bl	80003e4 <__aeabi_ui2d>
 800784e:	2301      	movs	r3, #1
 8007850:	4680      	mov	r8, r0
 8007852:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8007856:	3d01      	subs	r5, #1
 8007858:	9310      	str	r3, [sp, #64]	; 0x40
 800785a:	e771      	b.n	8007740 <_dtoa_r+0x100>
 800785c:	9b02      	ldr	r3, [sp, #8]
 800785e:	f1c0 0020 	rsb	r0, r0, #32
 8007862:	fa03 f000 	lsl.w	r0, r3, r0
 8007866:	e7f0      	b.n	800784a <_dtoa_r+0x20a>
 8007868:	2301      	movs	r3, #1
 800786a:	e7b0      	b.n	80077ce <_dtoa_r+0x18e>
 800786c:	900d      	str	r0, [sp, #52]	; 0x34
 800786e:	e7af      	b.n	80077d0 <_dtoa_r+0x190>
 8007870:	f1ca 0300 	rsb	r3, sl, #0
 8007874:	9308      	str	r3, [sp, #32]
 8007876:	2300      	movs	r3, #0
 8007878:	eba9 090a 	sub.w	r9, r9, sl
 800787c:	930c      	str	r3, [sp, #48]	; 0x30
 800787e:	e7bc      	b.n	80077fa <_dtoa_r+0x1ba>
 8007880:	2301      	movs	r3, #1
 8007882:	9309      	str	r3, [sp, #36]	; 0x24
 8007884:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007886:	2b00      	cmp	r3, #0
 8007888:	dd74      	ble.n	8007974 <_dtoa_r+0x334>
 800788a:	4698      	mov	r8, r3
 800788c:	9304      	str	r3, [sp, #16]
 800788e:	2200      	movs	r2, #0
 8007890:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007892:	6072      	str	r2, [r6, #4]
 8007894:	2204      	movs	r2, #4
 8007896:	f102 0014 	add.w	r0, r2, #20
 800789a:	4298      	cmp	r0, r3
 800789c:	6871      	ldr	r1, [r6, #4]
 800789e:	d96e      	bls.n	800797e <_dtoa_r+0x33e>
 80078a0:	4620      	mov	r0, r4
 80078a2:	f000 fff0 	bl	8008886 <_Balloc>
 80078a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078a8:	6030      	str	r0, [r6, #0]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f1b8 0f0e 	cmp.w	r8, #14
 80078b0:	9306      	str	r3, [sp, #24]
 80078b2:	f200 80ed 	bhi.w	8007a90 <_dtoa_r+0x450>
 80078b6:	2d00      	cmp	r5, #0
 80078b8:	f000 80ea 	beq.w	8007a90 <_dtoa_r+0x450>
 80078bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078c0:	f1ba 0f00 	cmp.w	sl, #0
 80078c4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80078c8:	dd77      	ble.n	80079ba <_dtoa_r+0x37a>
 80078ca:	4a28      	ldr	r2, [pc, #160]	; (800796c <_dtoa_r+0x32c>)
 80078cc:	f00a 030f 	and.w	r3, sl, #15
 80078d0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80078d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80078d8:	06f0      	lsls	r0, r6, #27
 80078da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078de:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80078e2:	d568      	bpl.n	80079b6 <_dtoa_r+0x376>
 80078e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80078e8:	4b21      	ldr	r3, [pc, #132]	; (8007970 <_dtoa_r+0x330>)
 80078ea:	2503      	movs	r5, #3
 80078ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80078f0:	f7f8 ff1c 	bl	800072c <__aeabi_ddiv>
 80078f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078f8:	f006 060f 	and.w	r6, r6, #15
 80078fc:	4f1c      	ldr	r7, [pc, #112]	; (8007970 <_dtoa_r+0x330>)
 80078fe:	e04f      	b.n	80079a0 <_dtoa_r+0x360>
 8007900:	2301      	movs	r3, #1
 8007902:	9309      	str	r3, [sp, #36]	; 0x24
 8007904:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007906:	4453      	add	r3, sl
 8007908:	f103 0801 	add.w	r8, r3, #1
 800790c:	9304      	str	r3, [sp, #16]
 800790e:	4643      	mov	r3, r8
 8007910:	2b01      	cmp	r3, #1
 8007912:	bfb8      	it	lt
 8007914:	2301      	movlt	r3, #1
 8007916:	e7ba      	b.n	800788e <_dtoa_r+0x24e>
 8007918:	2300      	movs	r3, #0
 800791a:	e7b2      	b.n	8007882 <_dtoa_r+0x242>
 800791c:	2300      	movs	r3, #0
 800791e:	e7f0      	b.n	8007902 <_dtoa_r+0x2c2>
 8007920:	2501      	movs	r5, #1
 8007922:	2300      	movs	r3, #0
 8007924:	9509      	str	r5, [sp, #36]	; 0x24
 8007926:	931e      	str	r3, [sp, #120]	; 0x78
 8007928:	f04f 33ff 	mov.w	r3, #4294967295
 800792c:	2200      	movs	r2, #0
 800792e:	9304      	str	r3, [sp, #16]
 8007930:	4698      	mov	r8, r3
 8007932:	2312      	movs	r3, #18
 8007934:	921f      	str	r2, [sp, #124]	; 0x7c
 8007936:	e7aa      	b.n	800788e <_dtoa_r+0x24e>
 8007938:	2301      	movs	r3, #1
 800793a:	9309      	str	r3, [sp, #36]	; 0x24
 800793c:	e7f4      	b.n	8007928 <_dtoa_r+0x2e8>
 800793e:	bf00      	nop
 8007940:	636f4361 	.word	0x636f4361
 8007944:	3fd287a7 	.word	0x3fd287a7
 8007948:	8b60c8b3 	.word	0x8b60c8b3
 800794c:	3fc68a28 	.word	0x3fc68a28
 8007950:	509f79fb 	.word	0x509f79fb
 8007954:	3fd34413 	.word	0x3fd34413
 8007958:	7ff00000 	.word	0x7ff00000
 800795c:	08009e51 	.word	0x08009e51
 8007960:	08009e48 	.word	0x08009e48
 8007964:	08009dcd 	.word	0x08009dcd
 8007968:	3ff80000 	.word	0x3ff80000
 800796c:	08009e88 	.word	0x08009e88
 8007970:	08009e60 	.word	0x08009e60
 8007974:	2301      	movs	r3, #1
 8007976:	9304      	str	r3, [sp, #16]
 8007978:	4698      	mov	r8, r3
 800797a:	461a      	mov	r2, r3
 800797c:	e7da      	b.n	8007934 <_dtoa_r+0x2f4>
 800797e:	3101      	adds	r1, #1
 8007980:	6071      	str	r1, [r6, #4]
 8007982:	0052      	lsls	r2, r2, #1
 8007984:	e787      	b.n	8007896 <_dtoa_r+0x256>
 8007986:	07f1      	lsls	r1, r6, #31
 8007988:	d508      	bpl.n	800799c <_dtoa_r+0x35c>
 800798a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800798e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007992:	f7f8 fda1 	bl	80004d8 <__aeabi_dmul>
 8007996:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800799a:	3501      	adds	r5, #1
 800799c:	1076      	asrs	r6, r6, #1
 800799e:	3708      	adds	r7, #8
 80079a0:	2e00      	cmp	r6, #0
 80079a2:	d1f0      	bne.n	8007986 <_dtoa_r+0x346>
 80079a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80079a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079ac:	f7f8 febe 	bl	800072c <__aeabi_ddiv>
 80079b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079b4:	e01b      	b.n	80079ee <_dtoa_r+0x3ae>
 80079b6:	2502      	movs	r5, #2
 80079b8:	e7a0      	b.n	80078fc <_dtoa_r+0x2bc>
 80079ba:	f000 80a4 	beq.w	8007b06 <_dtoa_r+0x4c6>
 80079be:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80079c2:	f1ca 0600 	rsb	r6, sl, #0
 80079c6:	4ba0      	ldr	r3, [pc, #640]	; (8007c48 <_dtoa_r+0x608>)
 80079c8:	f006 020f 	and.w	r2, r6, #15
 80079cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d4:	f7f8 fd80 	bl	80004d8 <__aeabi_dmul>
 80079d8:	2502      	movs	r5, #2
 80079da:	2300      	movs	r3, #0
 80079dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079e0:	4f9a      	ldr	r7, [pc, #616]	; (8007c4c <_dtoa_r+0x60c>)
 80079e2:	1136      	asrs	r6, r6, #4
 80079e4:	2e00      	cmp	r6, #0
 80079e6:	f040 8083 	bne.w	8007af0 <_dtoa_r+0x4b0>
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1e0      	bne.n	80079b0 <_dtoa_r+0x370>
 80079ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 808a 	beq.w	8007b0a <_dtoa_r+0x4ca>
 80079f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079fa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80079fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007a02:	2200      	movs	r2, #0
 8007a04:	4b92      	ldr	r3, [pc, #584]	; (8007c50 <_dtoa_r+0x610>)
 8007a06:	f7f8 ffd9 	bl	80009bc <__aeabi_dcmplt>
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	d07d      	beq.n	8007b0a <_dtoa_r+0x4ca>
 8007a0e:	f1b8 0f00 	cmp.w	r8, #0
 8007a12:	d07a      	beq.n	8007b0a <_dtoa_r+0x4ca>
 8007a14:	9b04      	ldr	r3, [sp, #16]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	dd36      	ble.n	8007a88 <_dtoa_r+0x448>
 8007a1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007a1e:	2200      	movs	r2, #0
 8007a20:	4b8c      	ldr	r3, [pc, #560]	; (8007c54 <_dtoa_r+0x614>)
 8007a22:	f7f8 fd59 	bl	80004d8 <__aeabi_dmul>
 8007a26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a2a:	9e04      	ldr	r6, [sp, #16]
 8007a2c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8007a30:	3501      	adds	r5, #1
 8007a32:	4628      	mov	r0, r5
 8007a34:	f7f8 fce6 	bl	8000404 <__aeabi_i2d>
 8007a38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a3c:	f7f8 fd4c 	bl	80004d8 <__aeabi_dmul>
 8007a40:	2200      	movs	r2, #0
 8007a42:	4b85      	ldr	r3, [pc, #532]	; (8007c58 <_dtoa_r+0x618>)
 8007a44:	f7f8 fb92 	bl	800016c <__adddf3>
 8007a48:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007a4c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007a50:	950b      	str	r5, [sp, #44]	; 0x2c
 8007a52:	2e00      	cmp	r6, #0
 8007a54:	d15c      	bne.n	8007b10 <_dtoa_r+0x4d0>
 8007a56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	4b7f      	ldr	r3, [pc, #508]	; (8007c5c <_dtoa_r+0x61c>)
 8007a5e:	f7f8 fb83 	bl	8000168 <__aeabi_dsub>
 8007a62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a64:	462b      	mov	r3, r5
 8007a66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a6a:	f7f8 ffc5 	bl	80009f8 <__aeabi_dcmpgt>
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	f040 8281 	bne.w	8007f76 <_dtoa_r+0x936>
 8007a74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a7a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007a7e:	f7f8 ff9d 	bl	80009bc <__aeabi_dcmplt>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	f040 8275 	bne.w	8007f72 <_dtoa_r+0x932>
 8007a88:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007a8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f2c0 814b 	blt.w	8007d2e <_dtoa_r+0x6ee>
 8007a98:	f1ba 0f0e 	cmp.w	sl, #14
 8007a9c:	f300 8147 	bgt.w	8007d2e <_dtoa_r+0x6ee>
 8007aa0:	4b69      	ldr	r3, [pc, #420]	; (8007c48 <_dtoa_r+0x608>)
 8007aa2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aaa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007aae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f280 80d7 	bge.w	8007c64 <_dtoa_r+0x624>
 8007ab6:	f1b8 0f00 	cmp.w	r8, #0
 8007aba:	f300 80d3 	bgt.w	8007c64 <_dtoa_r+0x624>
 8007abe:	f040 8257 	bne.w	8007f70 <_dtoa_r+0x930>
 8007ac2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	4b64      	ldr	r3, [pc, #400]	; (8007c5c <_dtoa_r+0x61c>)
 8007aca:	f7f8 fd05 	bl	80004d8 <__aeabi_dmul>
 8007ace:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ad2:	f7f8 ff87 	bl	80009e4 <__aeabi_dcmpge>
 8007ad6:	4646      	mov	r6, r8
 8007ad8:	4647      	mov	r7, r8
 8007ada:	2800      	cmp	r0, #0
 8007adc:	f040 822d 	bne.w	8007f3a <_dtoa_r+0x8fa>
 8007ae0:	9b06      	ldr	r3, [sp, #24]
 8007ae2:	9a06      	ldr	r2, [sp, #24]
 8007ae4:	1c5d      	adds	r5, r3, #1
 8007ae6:	2331      	movs	r3, #49	; 0x31
 8007ae8:	f10a 0a01 	add.w	sl, sl, #1
 8007aec:	7013      	strb	r3, [r2, #0]
 8007aee:	e228      	b.n	8007f42 <_dtoa_r+0x902>
 8007af0:	07f2      	lsls	r2, r6, #31
 8007af2:	d505      	bpl.n	8007b00 <_dtoa_r+0x4c0>
 8007af4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007af8:	f7f8 fcee 	bl	80004d8 <__aeabi_dmul>
 8007afc:	2301      	movs	r3, #1
 8007afe:	3501      	adds	r5, #1
 8007b00:	1076      	asrs	r6, r6, #1
 8007b02:	3708      	adds	r7, #8
 8007b04:	e76e      	b.n	80079e4 <_dtoa_r+0x3a4>
 8007b06:	2502      	movs	r5, #2
 8007b08:	e771      	b.n	80079ee <_dtoa_r+0x3ae>
 8007b0a:	4657      	mov	r7, sl
 8007b0c:	4646      	mov	r6, r8
 8007b0e:	e790      	b.n	8007a32 <_dtoa_r+0x3f2>
 8007b10:	4b4d      	ldr	r3, [pc, #308]	; (8007c48 <_dtoa_r+0x608>)
 8007b12:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007b16:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d048      	beq.n	8007bb2 <_dtoa_r+0x572>
 8007b20:	4602      	mov	r2, r0
 8007b22:	460b      	mov	r3, r1
 8007b24:	2000      	movs	r0, #0
 8007b26:	494e      	ldr	r1, [pc, #312]	; (8007c60 <_dtoa_r+0x620>)
 8007b28:	f7f8 fe00 	bl	800072c <__aeabi_ddiv>
 8007b2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007b30:	f7f8 fb1a 	bl	8000168 <__aeabi_dsub>
 8007b34:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007b38:	9d06      	ldr	r5, [sp, #24]
 8007b3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b3e:	f7f8 ff7b 	bl	8000a38 <__aeabi_d2iz>
 8007b42:	9011      	str	r0, [sp, #68]	; 0x44
 8007b44:	f7f8 fc5e 	bl	8000404 <__aeabi_i2d>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b50:	f7f8 fb0a 	bl	8000168 <__aeabi_dsub>
 8007b54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b5a:	3330      	adds	r3, #48	; 0x30
 8007b5c:	f805 3b01 	strb.w	r3, [r5], #1
 8007b60:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007b64:	f7f8 ff2a 	bl	80009bc <__aeabi_dcmplt>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	d163      	bne.n	8007c34 <_dtoa_r+0x5f4>
 8007b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b70:	2000      	movs	r0, #0
 8007b72:	4937      	ldr	r1, [pc, #220]	; (8007c50 <_dtoa_r+0x610>)
 8007b74:	f7f8 faf8 	bl	8000168 <__aeabi_dsub>
 8007b78:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007b7c:	f7f8 ff1e 	bl	80009bc <__aeabi_dcmplt>
 8007b80:	2800      	cmp	r0, #0
 8007b82:	f040 80b5 	bne.w	8007cf0 <_dtoa_r+0x6b0>
 8007b86:	9b06      	ldr	r3, [sp, #24]
 8007b88:	1aeb      	subs	r3, r5, r3
 8007b8a:	429e      	cmp	r6, r3
 8007b8c:	f77f af7c 	ble.w	8007a88 <_dtoa_r+0x448>
 8007b90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b94:	2200      	movs	r2, #0
 8007b96:	4b2f      	ldr	r3, [pc, #188]	; (8007c54 <_dtoa_r+0x614>)
 8007b98:	f7f8 fc9e 	bl	80004d8 <__aeabi_dmul>
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007ba2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ba6:	4b2b      	ldr	r3, [pc, #172]	; (8007c54 <_dtoa_r+0x614>)
 8007ba8:	f7f8 fc96 	bl	80004d8 <__aeabi_dmul>
 8007bac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bb0:	e7c3      	b.n	8007b3a <_dtoa_r+0x4fa>
 8007bb2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007bb6:	f7f8 fc8f 	bl	80004d8 <__aeabi_dmul>
 8007bba:	9b06      	ldr	r3, [sp, #24]
 8007bbc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007bc0:	199d      	adds	r5, r3, r6
 8007bc2:	461e      	mov	r6, r3
 8007bc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bc8:	f7f8 ff36 	bl	8000a38 <__aeabi_d2iz>
 8007bcc:	9011      	str	r0, [sp, #68]	; 0x44
 8007bce:	f7f8 fc19 	bl	8000404 <__aeabi_i2d>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bda:	f7f8 fac5 	bl	8000168 <__aeabi_dsub>
 8007bde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007be0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007be4:	3330      	adds	r3, #48	; 0x30
 8007be6:	f806 3b01 	strb.w	r3, [r6], #1
 8007bea:	42ae      	cmp	r6, r5
 8007bec:	f04f 0200 	mov.w	r2, #0
 8007bf0:	d124      	bne.n	8007c3c <_dtoa_r+0x5fc>
 8007bf2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007bf6:	4b1a      	ldr	r3, [pc, #104]	; (8007c60 <_dtoa_r+0x620>)
 8007bf8:	f7f8 fab8 	bl	800016c <__adddf3>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	460b      	mov	r3, r1
 8007c00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c04:	f7f8 fef8 	bl	80009f8 <__aeabi_dcmpgt>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	d171      	bne.n	8007cf0 <_dtoa_r+0x6b0>
 8007c0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007c10:	2000      	movs	r0, #0
 8007c12:	4913      	ldr	r1, [pc, #76]	; (8007c60 <_dtoa_r+0x620>)
 8007c14:	f7f8 faa8 	bl	8000168 <__aeabi_dsub>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c20:	f7f8 fecc 	bl	80009bc <__aeabi_dcmplt>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	f43f af2f 	beq.w	8007a88 <_dtoa_r+0x448>
 8007c2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007c2e:	1e6a      	subs	r2, r5, #1
 8007c30:	2b30      	cmp	r3, #48	; 0x30
 8007c32:	d001      	beq.n	8007c38 <_dtoa_r+0x5f8>
 8007c34:	46ba      	mov	sl, r7
 8007c36:	e04a      	b.n	8007cce <_dtoa_r+0x68e>
 8007c38:	4615      	mov	r5, r2
 8007c3a:	e7f6      	b.n	8007c2a <_dtoa_r+0x5ea>
 8007c3c:	4b05      	ldr	r3, [pc, #20]	; (8007c54 <_dtoa_r+0x614>)
 8007c3e:	f7f8 fc4b 	bl	80004d8 <__aeabi_dmul>
 8007c42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c46:	e7bd      	b.n	8007bc4 <_dtoa_r+0x584>
 8007c48:	08009e88 	.word	0x08009e88
 8007c4c:	08009e60 	.word	0x08009e60
 8007c50:	3ff00000 	.word	0x3ff00000
 8007c54:	40240000 	.word	0x40240000
 8007c58:	401c0000 	.word	0x401c0000
 8007c5c:	40140000 	.word	0x40140000
 8007c60:	3fe00000 	.word	0x3fe00000
 8007c64:	9d06      	ldr	r5, [sp, #24]
 8007c66:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007c6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c6e:	4630      	mov	r0, r6
 8007c70:	4639      	mov	r1, r7
 8007c72:	f7f8 fd5b 	bl	800072c <__aeabi_ddiv>
 8007c76:	f7f8 fedf 	bl	8000a38 <__aeabi_d2iz>
 8007c7a:	4681      	mov	r9, r0
 8007c7c:	f7f8 fbc2 	bl	8000404 <__aeabi_i2d>
 8007c80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c84:	f7f8 fc28 	bl	80004d8 <__aeabi_dmul>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	4639      	mov	r1, r7
 8007c90:	f7f8 fa6a 	bl	8000168 <__aeabi_dsub>
 8007c94:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8007c98:	f805 6b01 	strb.w	r6, [r5], #1
 8007c9c:	9e06      	ldr	r6, [sp, #24]
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	1bae      	subs	r6, r5, r6
 8007ca2:	45b0      	cmp	r8, r6
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	d135      	bne.n	8007d14 <_dtoa_r+0x6d4>
 8007ca8:	f7f8 fa60 	bl	800016c <__adddf3>
 8007cac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cb0:	4606      	mov	r6, r0
 8007cb2:	460f      	mov	r7, r1
 8007cb4:	f7f8 fea0 	bl	80009f8 <__aeabi_dcmpgt>
 8007cb8:	b9c8      	cbnz	r0, 8007cee <_dtoa_r+0x6ae>
 8007cba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	4639      	mov	r1, r7
 8007cc2:	f7f8 fe71 	bl	80009a8 <__aeabi_dcmpeq>
 8007cc6:	b110      	cbz	r0, 8007cce <_dtoa_r+0x68e>
 8007cc8:	f019 0f01 	tst.w	r9, #1
 8007ccc:	d10f      	bne.n	8007cee <_dtoa_r+0x6ae>
 8007cce:	4659      	mov	r1, fp
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	f000 fe0c 	bl	80088ee <_Bfree>
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007cda:	702b      	strb	r3, [r5, #0]
 8007cdc:	f10a 0301 	add.w	r3, sl, #1
 8007ce0:	6013      	str	r3, [r2, #0]
 8007ce2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f43f acf3 	beq.w	80076d0 <_dtoa_r+0x90>
 8007cea:	601d      	str	r5, [r3, #0]
 8007cec:	e4f0      	b.n	80076d0 <_dtoa_r+0x90>
 8007cee:	4657      	mov	r7, sl
 8007cf0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007cf4:	1e6b      	subs	r3, r5, #1
 8007cf6:	2a39      	cmp	r2, #57	; 0x39
 8007cf8:	d106      	bne.n	8007d08 <_dtoa_r+0x6c8>
 8007cfa:	9a06      	ldr	r2, [sp, #24]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d107      	bne.n	8007d10 <_dtoa_r+0x6d0>
 8007d00:	2330      	movs	r3, #48	; 0x30
 8007d02:	7013      	strb	r3, [r2, #0]
 8007d04:	4613      	mov	r3, r2
 8007d06:	3701      	adds	r7, #1
 8007d08:	781a      	ldrb	r2, [r3, #0]
 8007d0a:	3201      	adds	r2, #1
 8007d0c:	701a      	strb	r2, [r3, #0]
 8007d0e:	e791      	b.n	8007c34 <_dtoa_r+0x5f4>
 8007d10:	461d      	mov	r5, r3
 8007d12:	e7ed      	b.n	8007cf0 <_dtoa_r+0x6b0>
 8007d14:	2200      	movs	r2, #0
 8007d16:	4b99      	ldr	r3, [pc, #612]	; (8007f7c <_dtoa_r+0x93c>)
 8007d18:	f7f8 fbde 	bl	80004d8 <__aeabi_dmul>
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	2300      	movs	r3, #0
 8007d20:	4606      	mov	r6, r0
 8007d22:	460f      	mov	r7, r1
 8007d24:	f7f8 fe40 	bl	80009a8 <__aeabi_dcmpeq>
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	d09e      	beq.n	8007c6a <_dtoa_r+0x62a>
 8007d2c:	e7cf      	b.n	8007cce <_dtoa_r+0x68e>
 8007d2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d30:	2a00      	cmp	r2, #0
 8007d32:	f000 8088 	beq.w	8007e46 <_dtoa_r+0x806>
 8007d36:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007d38:	2a01      	cmp	r2, #1
 8007d3a:	dc6d      	bgt.n	8007e18 <_dtoa_r+0x7d8>
 8007d3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007d3e:	2a00      	cmp	r2, #0
 8007d40:	d066      	beq.n	8007e10 <_dtoa_r+0x7d0>
 8007d42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007d46:	464d      	mov	r5, r9
 8007d48:	9e08      	ldr	r6, [sp, #32]
 8007d4a:	9a07      	ldr	r2, [sp, #28]
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	441a      	add	r2, r3
 8007d50:	4620      	mov	r0, r4
 8007d52:	4499      	add	r9, r3
 8007d54:	9207      	str	r2, [sp, #28]
 8007d56:	f000 fea8 	bl	8008aaa <__i2b>
 8007d5a:	4607      	mov	r7, r0
 8007d5c:	2d00      	cmp	r5, #0
 8007d5e:	dd0b      	ble.n	8007d78 <_dtoa_r+0x738>
 8007d60:	9b07      	ldr	r3, [sp, #28]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	dd08      	ble.n	8007d78 <_dtoa_r+0x738>
 8007d66:	42ab      	cmp	r3, r5
 8007d68:	bfa8      	it	ge
 8007d6a:	462b      	movge	r3, r5
 8007d6c:	9a07      	ldr	r2, [sp, #28]
 8007d6e:	eba9 0903 	sub.w	r9, r9, r3
 8007d72:	1aed      	subs	r5, r5, r3
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	9307      	str	r3, [sp, #28]
 8007d78:	9b08      	ldr	r3, [sp, #32]
 8007d7a:	b1eb      	cbz	r3, 8007db8 <_dtoa_r+0x778>
 8007d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d065      	beq.n	8007e4e <_dtoa_r+0x80e>
 8007d82:	b18e      	cbz	r6, 8007da8 <_dtoa_r+0x768>
 8007d84:	4639      	mov	r1, r7
 8007d86:	4632      	mov	r2, r6
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f000 ff2d 	bl	8008be8 <__pow5mult>
 8007d8e:	465a      	mov	r2, fp
 8007d90:	4601      	mov	r1, r0
 8007d92:	4607      	mov	r7, r0
 8007d94:	4620      	mov	r0, r4
 8007d96:	f000 fe91 	bl	8008abc <__multiply>
 8007d9a:	4659      	mov	r1, fp
 8007d9c:	900a      	str	r0, [sp, #40]	; 0x28
 8007d9e:	4620      	mov	r0, r4
 8007da0:	f000 fda5 	bl	80088ee <_Bfree>
 8007da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007da6:	469b      	mov	fp, r3
 8007da8:	9b08      	ldr	r3, [sp, #32]
 8007daa:	1b9a      	subs	r2, r3, r6
 8007dac:	d004      	beq.n	8007db8 <_dtoa_r+0x778>
 8007dae:	4659      	mov	r1, fp
 8007db0:	4620      	mov	r0, r4
 8007db2:	f000 ff19 	bl	8008be8 <__pow5mult>
 8007db6:	4683      	mov	fp, r0
 8007db8:	2101      	movs	r1, #1
 8007dba:	4620      	mov	r0, r4
 8007dbc:	f000 fe75 	bl	8008aaa <__i2b>
 8007dc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f000 81c6 	beq.w	8008156 <_dtoa_r+0xb16>
 8007dca:	461a      	mov	r2, r3
 8007dcc:	4601      	mov	r1, r0
 8007dce:	4620      	mov	r0, r4
 8007dd0:	f000 ff0a 	bl	8008be8 <__pow5mult>
 8007dd4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007dd6:	4606      	mov	r6, r0
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	dc3e      	bgt.n	8007e5a <_dtoa_r+0x81a>
 8007ddc:	9b02      	ldr	r3, [sp, #8]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d137      	bne.n	8007e52 <_dtoa_r+0x812>
 8007de2:	9b03      	ldr	r3, [sp, #12]
 8007de4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d134      	bne.n	8007e56 <_dtoa_r+0x816>
 8007dec:	9b03      	ldr	r3, [sp, #12]
 8007dee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007df2:	0d1b      	lsrs	r3, r3, #20
 8007df4:	051b      	lsls	r3, r3, #20
 8007df6:	b12b      	cbz	r3, 8007e04 <_dtoa_r+0x7c4>
 8007df8:	9b07      	ldr	r3, [sp, #28]
 8007dfa:	f109 0901 	add.w	r9, r9, #1
 8007dfe:	3301      	adds	r3, #1
 8007e00:	9307      	str	r3, [sp, #28]
 8007e02:	2301      	movs	r3, #1
 8007e04:	9308      	str	r3, [sp, #32]
 8007e06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d128      	bne.n	8007e5e <_dtoa_r+0x81e>
 8007e0c:	2001      	movs	r0, #1
 8007e0e:	e02e      	b.n	8007e6e <_dtoa_r+0x82e>
 8007e10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e12:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007e16:	e796      	b.n	8007d46 <_dtoa_r+0x706>
 8007e18:	9b08      	ldr	r3, [sp, #32]
 8007e1a:	f108 36ff 	add.w	r6, r8, #4294967295
 8007e1e:	42b3      	cmp	r3, r6
 8007e20:	bfb7      	itett	lt
 8007e22:	9b08      	ldrlt	r3, [sp, #32]
 8007e24:	1b9e      	subge	r6, r3, r6
 8007e26:	1af2      	sublt	r2, r6, r3
 8007e28:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8007e2a:	bfbf      	itttt	lt
 8007e2c:	9608      	strlt	r6, [sp, #32]
 8007e2e:	189b      	addlt	r3, r3, r2
 8007e30:	930c      	strlt	r3, [sp, #48]	; 0x30
 8007e32:	2600      	movlt	r6, #0
 8007e34:	f1b8 0f00 	cmp.w	r8, #0
 8007e38:	bfb9      	ittee	lt
 8007e3a:	eba9 0508 	sublt.w	r5, r9, r8
 8007e3e:	2300      	movlt	r3, #0
 8007e40:	464d      	movge	r5, r9
 8007e42:	4643      	movge	r3, r8
 8007e44:	e781      	b.n	8007d4a <_dtoa_r+0x70a>
 8007e46:	9e08      	ldr	r6, [sp, #32]
 8007e48:	464d      	mov	r5, r9
 8007e4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007e4c:	e786      	b.n	8007d5c <_dtoa_r+0x71c>
 8007e4e:	9a08      	ldr	r2, [sp, #32]
 8007e50:	e7ad      	b.n	8007dae <_dtoa_r+0x76e>
 8007e52:	2300      	movs	r3, #0
 8007e54:	e7d6      	b.n	8007e04 <_dtoa_r+0x7c4>
 8007e56:	9b02      	ldr	r3, [sp, #8]
 8007e58:	e7d4      	b.n	8007e04 <_dtoa_r+0x7c4>
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	9308      	str	r3, [sp, #32]
 8007e5e:	6933      	ldr	r3, [r6, #16]
 8007e60:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007e64:	6918      	ldr	r0, [r3, #16]
 8007e66:	f000 fdd2 	bl	8008a0e <__hi0bits>
 8007e6a:	f1c0 0020 	rsb	r0, r0, #32
 8007e6e:	9b07      	ldr	r3, [sp, #28]
 8007e70:	4418      	add	r0, r3
 8007e72:	f010 001f 	ands.w	r0, r0, #31
 8007e76:	d047      	beq.n	8007f08 <_dtoa_r+0x8c8>
 8007e78:	f1c0 0320 	rsb	r3, r0, #32
 8007e7c:	2b04      	cmp	r3, #4
 8007e7e:	dd3b      	ble.n	8007ef8 <_dtoa_r+0x8b8>
 8007e80:	9b07      	ldr	r3, [sp, #28]
 8007e82:	f1c0 001c 	rsb	r0, r0, #28
 8007e86:	4481      	add	r9, r0
 8007e88:	4405      	add	r5, r0
 8007e8a:	4403      	add	r3, r0
 8007e8c:	9307      	str	r3, [sp, #28]
 8007e8e:	f1b9 0f00 	cmp.w	r9, #0
 8007e92:	dd05      	ble.n	8007ea0 <_dtoa_r+0x860>
 8007e94:	4659      	mov	r1, fp
 8007e96:	464a      	mov	r2, r9
 8007e98:	4620      	mov	r0, r4
 8007e9a:	f000 fef3 	bl	8008c84 <__lshift>
 8007e9e:	4683      	mov	fp, r0
 8007ea0:	9b07      	ldr	r3, [sp, #28]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	dd05      	ble.n	8007eb2 <_dtoa_r+0x872>
 8007ea6:	4631      	mov	r1, r6
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	4620      	mov	r0, r4
 8007eac:	f000 feea 	bl	8008c84 <__lshift>
 8007eb0:	4606      	mov	r6, r0
 8007eb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007eb4:	b353      	cbz	r3, 8007f0c <_dtoa_r+0x8cc>
 8007eb6:	4631      	mov	r1, r6
 8007eb8:	4658      	mov	r0, fp
 8007eba:	f000 ff37 	bl	8008d2c <__mcmp>
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	da24      	bge.n	8007f0c <_dtoa_r+0x8cc>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	4659      	mov	r1, fp
 8007ec6:	220a      	movs	r2, #10
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f000 fd27 	bl	800891c <__multadd>
 8007ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ed0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ed4:	4683      	mov	fp, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f000 8144 	beq.w	8008164 <_dtoa_r+0xb24>
 8007edc:	2300      	movs	r3, #0
 8007ede:	4639      	mov	r1, r7
 8007ee0:	220a      	movs	r2, #10
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	f000 fd1a 	bl	800891c <__multadd>
 8007ee8:	9b04      	ldr	r3, [sp, #16]
 8007eea:	4607      	mov	r7, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	dc4d      	bgt.n	8007f8c <_dtoa_r+0x94c>
 8007ef0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	dd4a      	ble.n	8007f8c <_dtoa_r+0x94c>
 8007ef6:	e011      	b.n	8007f1c <_dtoa_r+0x8dc>
 8007ef8:	d0c9      	beq.n	8007e8e <_dtoa_r+0x84e>
 8007efa:	9a07      	ldr	r2, [sp, #28]
 8007efc:	331c      	adds	r3, #28
 8007efe:	441a      	add	r2, r3
 8007f00:	4499      	add	r9, r3
 8007f02:	441d      	add	r5, r3
 8007f04:	4613      	mov	r3, r2
 8007f06:	e7c1      	b.n	8007e8c <_dtoa_r+0x84c>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	e7f6      	b.n	8007efa <_dtoa_r+0x8ba>
 8007f0c:	f1b8 0f00 	cmp.w	r8, #0
 8007f10:	dc36      	bgt.n	8007f80 <_dtoa_r+0x940>
 8007f12:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	dd33      	ble.n	8007f80 <_dtoa_r+0x940>
 8007f18:	f8cd 8010 	str.w	r8, [sp, #16]
 8007f1c:	9b04      	ldr	r3, [sp, #16]
 8007f1e:	b963      	cbnz	r3, 8007f3a <_dtoa_r+0x8fa>
 8007f20:	4631      	mov	r1, r6
 8007f22:	2205      	movs	r2, #5
 8007f24:	4620      	mov	r0, r4
 8007f26:	f000 fcf9 	bl	800891c <__multadd>
 8007f2a:	4601      	mov	r1, r0
 8007f2c:	4606      	mov	r6, r0
 8007f2e:	4658      	mov	r0, fp
 8007f30:	f000 fefc 	bl	8008d2c <__mcmp>
 8007f34:	2800      	cmp	r0, #0
 8007f36:	f73f add3 	bgt.w	8007ae0 <_dtoa_r+0x4a0>
 8007f3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007f3c:	9d06      	ldr	r5, [sp, #24]
 8007f3e:	ea6f 0a03 	mvn.w	sl, r3
 8007f42:	f04f 0900 	mov.w	r9, #0
 8007f46:	4631      	mov	r1, r6
 8007f48:	4620      	mov	r0, r4
 8007f4a:	f000 fcd0 	bl	80088ee <_Bfree>
 8007f4e:	2f00      	cmp	r7, #0
 8007f50:	f43f aebd 	beq.w	8007cce <_dtoa_r+0x68e>
 8007f54:	f1b9 0f00 	cmp.w	r9, #0
 8007f58:	d005      	beq.n	8007f66 <_dtoa_r+0x926>
 8007f5a:	45b9      	cmp	r9, r7
 8007f5c:	d003      	beq.n	8007f66 <_dtoa_r+0x926>
 8007f5e:	4649      	mov	r1, r9
 8007f60:	4620      	mov	r0, r4
 8007f62:	f000 fcc4 	bl	80088ee <_Bfree>
 8007f66:	4639      	mov	r1, r7
 8007f68:	4620      	mov	r0, r4
 8007f6a:	f000 fcc0 	bl	80088ee <_Bfree>
 8007f6e:	e6ae      	b.n	8007cce <_dtoa_r+0x68e>
 8007f70:	2600      	movs	r6, #0
 8007f72:	4637      	mov	r7, r6
 8007f74:	e7e1      	b.n	8007f3a <_dtoa_r+0x8fa>
 8007f76:	46ba      	mov	sl, r7
 8007f78:	4637      	mov	r7, r6
 8007f7a:	e5b1      	b.n	8007ae0 <_dtoa_r+0x4a0>
 8007f7c:	40240000 	.word	0x40240000
 8007f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f82:	f8cd 8010 	str.w	r8, [sp, #16]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f000 80f3 	beq.w	8008172 <_dtoa_r+0xb32>
 8007f8c:	2d00      	cmp	r5, #0
 8007f8e:	dd05      	ble.n	8007f9c <_dtoa_r+0x95c>
 8007f90:	4639      	mov	r1, r7
 8007f92:	462a      	mov	r2, r5
 8007f94:	4620      	mov	r0, r4
 8007f96:	f000 fe75 	bl	8008c84 <__lshift>
 8007f9a:	4607      	mov	r7, r0
 8007f9c:	9b08      	ldr	r3, [sp, #32]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d04c      	beq.n	800803c <_dtoa_r+0x9fc>
 8007fa2:	6879      	ldr	r1, [r7, #4]
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	f000 fc6e 	bl	8008886 <_Balloc>
 8007faa:	4605      	mov	r5, r0
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	f107 010c 	add.w	r1, r7, #12
 8007fb2:	3202      	adds	r2, #2
 8007fb4:	0092      	lsls	r2, r2, #2
 8007fb6:	300c      	adds	r0, #12
 8007fb8:	f000 fc5a 	bl	8008870 <memcpy>
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	4629      	mov	r1, r5
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	f000 fe5f 	bl	8008c84 <__lshift>
 8007fc6:	46b9      	mov	r9, r7
 8007fc8:	4607      	mov	r7, r0
 8007fca:	9b06      	ldr	r3, [sp, #24]
 8007fcc:	9307      	str	r3, [sp, #28]
 8007fce:	9b02      	ldr	r3, [sp, #8]
 8007fd0:	f003 0301 	and.w	r3, r3, #1
 8007fd4:	9308      	str	r3, [sp, #32]
 8007fd6:	4631      	mov	r1, r6
 8007fd8:	4658      	mov	r0, fp
 8007fda:	f7ff faa3 	bl	8007524 <quorem>
 8007fde:	4649      	mov	r1, r9
 8007fe0:	4605      	mov	r5, r0
 8007fe2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007fe6:	4658      	mov	r0, fp
 8007fe8:	f000 fea0 	bl	8008d2c <__mcmp>
 8007fec:	463a      	mov	r2, r7
 8007fee:	9002      	str	r0, [sp, #8]
 8007ff0:	4631      	mov	r1, r6
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	f000 feb4 	bl	8008d60 <__mdiff>
 8007ff8:	68c3      	ldr	r3, [r0, #12]
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	bb03      	cbnz	r3, 8008040 <_dtoa_r+0xa00>
 8007ffe:	4601      	mov	r1, r0
 8008000:	9009      	str	r0, [sp, #36]	; 0x24
 8008002:	4658      	mov	r0, fp
 8008004:	f000 fe92 	bl	8008d2c <__mcmp>
 8008008:	4603      	mov	r3, r0
 800800a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800800c:	4611      	mov	r1, r2
 800800e:	4620      	mov	r0, r4
 8008010:	9309      	str	r3, [sp, #36]	; 0x24
 8008012:	f000 fc6c 	bl	80088ee <_Bfree>
 8008016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008018:	b9a3      	cbnz	r3, 8008044 <_dtoa_r+0xa04>
 800801a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800801c:	b992      	cbnz	r2, 8008044 <_dtoa_r+0xa04>
 800801e:	9a08      	ldr	r2, [sp, #32]
 8008020:	b982      	cbnz	r2, 8008044 <_dtoa_r+0xa04>
 8008022:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008026:	d029      	beq.n	800807c <_dtoa_r+0xa3c>
 8008028:	9b02      	ldr	r3, [sp, #8]
 800802a:	2b00      	cmp	r3, #0
 800802c:	dd01      	ble.n	8008032 <_dtoa_r+0x9f2>
 800802e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008032:	9b07      	ldr	r3, [sp, #28]
 8008034:	1c5d      	adds	r5, r3, #1
 8008036:	f883 8000 	strb.w	r8, [r3]
 800803a:	e784      	b.n	8007f46 <_dtoa_r+0x906>
 800803c:	4638      	mov	r0, r7
 800803e:	e7c2      	b.n	8007fc6 <_dtoa_r+0x986>
 8008040:	2301      	movs	r3, #1
 8008042:	e7e3      	b.n	800800c <_dtoa_r+0x9cc>
 8008044:	9a02      	ldr	r2, [sp, #8]
 8008046:	2a00      	cmp	r2, #0
 8008048:	db04      	blt.n	8008054 <_dtoa_r+0xa14>
 800804a:	d123      	bne.n	8008094 <_dtoa_r+0xa54>
 800804c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800804e:	bb0a      	cbnz	r2, 8008094 <_dtoa_r+0xa54>
 8008050:	9a08      	ldr	r2, [sp, #32]
 8008052:	b9fa      	cbnz	r2, 8008094 <_dtoa_r+0xa54>
 8008054:	2b00      	cmp	r3, #0
 8008056:	ddec      	ble.n	8008032 <_dtoa_r+0x9f2>
 8008058:	4659      	mov	r1, fp
 800805a:	2201      	movs	r2, #1
 800805c:	4620      	mov	r0, r4
 800805e:	f000 fe11 	bl	8008c84 <__lshift>
 8008062:	4631      	mov	r1, r6
 8008064:	4683      	mov	fp, r0
 8008066:	f000 fe61 	bl	8008d2c <__mcmp>
 800806a:	2800      	cmp	r0, #0
 800806c:	dc03      	bgt.n	8008076 <_dtoa_r+0xa36>
 800806e:	d1e0      	bne.n	8008032 <_dtoa_r+0x9f2>
 8008070:	f018 0f01 	tst.w	r8, #1
 8008074:	d0dd      	beq.n	8008032 <_dtoa_r+0x9f2>
 8008076:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800807a:	d1d8      	bne.n	800802e <_dtoa_r+0x9ee>
 800807c:	9b07      	ldr	r3, [sp, #28]
 800807e:	9a07      	ldr	r2, [sp, #28]
 8008080:	1c5d      	adds	r5, r3, #1
 8008082:	2339      	movs	r3, #57	; 0x39
 8008084:	7013      	strb	r3, [r2, #0]
 8008086:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800808a:	1e6a      	subs	r2, r5, #1
 800808c:	2b39      	cmp	r3, #57	; 0x39
 800808e:	d04d      	beq.n	800812c <_dtoa_r+0xaec>
 8008090:	3301      	adds	r3, #1
 8008092:	e052      	b.n	800813a <_dtoa_r+0xafa>
 8008094:	9a07      	ldr	r2, [sp, #28]
 8008096:	2b00      	cmp	r3, #0
 8008098:	f102 0501 	add.w	r5, r2, #1
 800809c:	dd06      	ble.n	80080ac <_dtoa_r+0xa6c>
 800809e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80080a2:	d0eb      	beq.n	800807c <_dtoa_r+0xa3c>
 80080a4:	f108 0801 	add.w	r8, r8, #1
 80080a8:	9b07      	ldr	r3, [sp, #28]
 80080aa:	e7c4      	b.n	8008036 <_dtoa_r+0x9f6>
 80080ac:	9b06      	ldr	r3, [sp, #24]
 80080ae:	9a04      	ldr	r2, [sp, #16]
 80080b0:	1aeb      	subs	r3, r5, r3
 80080b2:	4293      	cmp	r3, r2
 80080b4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80080b8:	d021      	beq.n	80080fe <_dtoa_r+0xabe>
 80080ba:	4659      	mov	r1, fp
 80080bc:	2300      	movs	r3, #0
 80080be:	220a      	movs	r2, #10
 80080c0:	4620      	mov	r0, r4
 80080c2:	f000 fc2b 	bl	800891c <__multadd>
 80080c6:	45b9      	cmp	r9, r7
 80080c8:	4683      	mov	fp, r0
 80080ca:	f04f 0300 	mov.w	r3, #0
 80080ce:	f04f 020a 	mov.w	r2, #10
 80080d2:	4649      	mov	r1, r9
 80080d4:	4620      	mov	r0, r4
 80080d6:	d105      	bne.n	80080e4 <_dtoa_r+0xaa4>
 80080d8:	f000 fc20 	bl	800891c <__multadd>
 80080dc:	4681      	mov	r9, r0
 80080de:	4607      	mov	r7, r0
 80080e0:	9507      	str	r5, [sp, #28]
 80080e2:	e778      	b.n	8007fd6 <_dtoa_r+0x996>
 80080e4:	f000 fc1a 	bl	800891c <__multadd>
 80080e8:	4639      	mov	r1, r7
 80080ea:	4681      	mov	r9, r0
 80080ec:	2300      	movs	r3, #0
 80080ee:	220a      	movs	r2, #10
 80080f0:	4620      	mov	r0, r4
 80080f2:	f000 fc13 	bl	800891c <__multadd>
 80080f6:	4607      	mov	r7, r0
 80080f8:	e7f2      	b.n	80080e0 <_dtoa_r+0xaa0>
 80080fa:	f04f 0900 	mov.w	r9, #0
 80080fe:	4659      	mov	r1, fp
 8008100:	2201      	movs	r2, #1
 8008102:	4620      	mov	r0, r4
 8008104:	f000 fdbe 	bl	8008c84 <__lshift>
 8008108:	4631      	mov	r1, r6
 800810a:	4683      	mov	fp, r0
 800810c:	f000 fe0e 	bl	8008d2c <__mcmp>
 8008110:	2800      	cmp	r0, #0
 8008112:	dcb8      	bgt.n	8008086 <_dtoa_r+0xa46>
 8008114:	d102      	bne.n	800811c <_dtoa_r+0xadc>
 8008116:	f018 0f01 	tst.w	r8, #1
 800811a:	d1b4      	bne.n	8008086 <_dtoa_r+0xa46>
 800811c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008120:	1e6a      	subs	r2, r5, #1
 8008122:	2b30      	cmp	r3, #48	; 0x30
 8008124:	f47f af0f 	bne.w	8007f46 <_dtoa_r+0x906>
 8008128:	4615      	mov	r5, r2
 800812a:	e7f7      	b.n	800811c <_dtoa_r+0xadc>
 800812c:	9b06      	ldr	r3, [sp, #24]
 800812e:	4293      	cmp	r3, r2
 8008130:	d105      	bne.n	800813e <_dtoa_r+0xafe>
 8008132:	2331      	movs	r3, #49	; 0x31
 8008134:	9a06      	ldr	r2, [sp, #24]
 8008136:	f10a 0a01 	add.w	sl, sl, #1
 800813a:	7013      	strb	r3, [r2, #0]
 800813c:	e703      	b.n	8007f46 <_dtoa_r+0x906>
 800813e:	4615      	mov	r5, r2
 8008140:	e7a1      	b.n	8008086 <_dtoa_r+0xa46>
 8008142:	4b17      	ldr	r3, [pc, #92]	; (80081a0 <_dtoa_r+0xb60>)
 8008144:	f7ff bae1 	b.w	800770a <_dtoa_r+0xca>
 8008148:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800814a:	2b00      	cmp	r3, #0
 800814c:	f47f aabb 	bne.w	80076c6 <_dtoa_r+0x86>
 8008150:	4b14      	ldr	r3, [pc, #80]	; (80081a4 <_dtoa_r+0xb64>)
 8008152:	f7ff bada 	b.w	800770a <_dtoa_r+0xca>
 8008156:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008158:	2b01      	cmp	r3, #1
 800815a:	f77f ae3f 	ble.w	8007ddc <_dtoa_r+0x79c>
 800815e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008160:	9308      	str	r3, [sp, #32]
 8008162:	e653      	b.n	8007e0c <_dtoa_r+0x7cc>
 8008164:	9b04      	ldr	r3, [sp, #16]
 8008166:	2b00      	cmp	r3, #0
 8008168:	dc03      	bgt.n	8008172 <_dtoa_r+0xb32>
 800816a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800816c:	2b02      	cmp	r3, #2
 800816e:	f73f aed5 	bgt.w	8007f1c <_dtoa_r+0x8dc>
 8008172:	9d06      	ldr	r5, [sp, #24]
 8008174:	4631      	mov	r1, r6
 8008176:	4658      	mov	r0, fp
 8008178:	f7ff f9d4 	bl	8007524 <quorem>
 800817c:	9b06      	ldr	r3, [sp, #24]
 800817e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008182:	f805 8b01 	strb.w	r8, [r5], #1
 8008186:	9a04      	ldr	r2, [sp, #16]
 8008188:	1aeb      	subs	r3, r5, r3
 800818a:	429a      	cmp	r2, r3
 800818c:	ddb5      	ble.n	80080fa <_dtoa_r+0xaba>
 800818e:	4659      	mov	r1, fp
 8008190:	2300      	movs	r3, #0
 8008192:	220a      	movs	r2, #10
 8008194:	4620      	mov	r0, r4
 8008196:	f000 fbc1 	bl	800891c <__multadd>
 800819a:	4683      	mov	fp, r0
 800819c:	e7ea      	b.n	8008174 <_dtoa_r+0xb34>
 800819e:	bf00      	nop
 80081a0:	08009dcc 	.word	0x08009dcc
 80081a4:	08009e48 	.word	0x08009e48

080081a8 <rshift>:
 80081a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081aa:	6906      	ldr	r6, [r0, #16]
 80081ac:	114b      	asrs	r3, r1, #5
 80081ae:	429e      	cmp	r6, r3
 80081b0:	f100 0414 	add.w	r4, r0, #20
 80081b4:	dd31      	ble.n	800821a <rshift+0x72>
 80081b6:	f011 011f 	ands.w	r1, r1, #31
 80081ba:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80081be:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80081c2:	d108      	bne.n	80081d6 <rshift+0x2e>
 80081c4:	4621      	mov	r1, r4
 80081c6:	42b2      	cmp	r2, r6
 80081c8:	460b      	mov	r3, r1
 80081ca:	d211      	bcs.n	80081f0 <rshift+0x48>
 80081cc:	f852 3b04 	ldr.w	r3, [r2], #4
 80081d0:	f841 3b04 	str.w	r3, [r1], #4
 80081d4:	e7f7      	b.n	80081c6 <rshift+0x1e>
 80081d6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80081da:	4623      	mov	r3, r4
 80081dc:	f1c1 0c20 	rsb	ip, r1, #32
 80081e0:	40cd      	lsrs	r5, r1
 80081e2:	3204      	adds	r2, #4
 80081e4:	42b2      	cmp	r2, r6
 80081e6:	4617      	mov	r7, r2
 80081e8:	d30d      	bcc.n	8008206 <rshift+0x5e>
 80081ea:	601d      	str	r5, [r3, #0]
 80081ec:	b105      	cbz	r5, 80081f0 <rshift+0x48>
 80081ee:	3304      	adds	r3, #4
 80081f0:	42a3      	cmp	r3, r4
 80081f2:	eba3 0204 	sub.w	r2, r3, r4
 80081f6:	bf08      	it	eq
 80081f8:	2300      	moveq	r3, #0
 80081fa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80081fe:	6102      	str	r2, [r0, #16]
 8008200:	bf08      	it	eq
 8008202:	6143      	streq	r3, [r0, #20]
 8008204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008206:	683f      	ldr	r7, [r7, #0]
 8008208:	fa07 f70c 	lsl.w	r7, r7, ip
 800820c:	433d      	orrs	r5, r7
 800820e:	f843 5b04 	str.w	r5, [r3], #4
 8008212:	f852 5b04 	ldr.w	r5, [r2], #4
 8008216:	40cd      	lsrs	r5, r1
 8008218:	e7e4      	b.n	80081e4 <rshift+0x3c>
 800821a:	4623      	mov	r3, r4
 800821c:	e7e8      	b.n	80081f0 <rshift+0x48>

0800821e <__hexdig_fun>:
 800821e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008222:	2b09      	cmp	r3, #9
 8008224:	d802      	bhi.n	800822c <__hexdig_fun+0xe>
 8008226:	3820      	subs	r0, #32
 8008228:	b2c0      	uxtb	r0, r0
 800822a:	4770      	bx	lr
 800822c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008230:	2b05      	cmp	r3, #5
 8008232:	d801      	bhi.n	8008238 <__hexdig_fun+0x1a>
 8008234:	3847      	subs	r0, #71	; 0x47
 8008236:	e7f7      	b.n	8008228 <__hexdig_fun+0xa>
 8008238:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800823c:	2b05      	cmp	r3, #5
 800823e:	d801      	bhi.n	8008244 <__hexdig_fun+0x26>
 8008240:	3827      	subs	r0, #39	; 0x27
 8008242:	e7f1      	b.n	8008228 <__hexdig_fun+0xa>
 8008244:	2000      	movs	r0, #0
 8008246:	4770      	bx	lr

08008248 <__gethex>:
 8008248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800824c:	b08b      	sub	sp, #44	; 0x2c
 800824e:	9002      	str	r0, [sp, #8]
 8008250:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008252:	468a      	mov	sl, r1
 8008254:	4690      	mov	r8, r2
 8008256:	9306      	str	r3, [sp, #24]
 8008258:	f000 fad1 	bl	80087fe <__localeconv_l>
 800825c:	6803      	ldr	r3, [r0, #0]
 800825e:	f04f 0b00 	mov.w	fp, #0
 8008262:	4618      	mov	r0, r3
 8008264:	9303      	str	r3, [sp, #12]
 8008266:	f7f7 ff73 	bl	8000150 <strlen>
 800826a:	9b03      	ldr	r3, [sp, #12]
 800826c:	9001      	str	r0, [sp, #4]
 800826e:	4403      	add	r3, r0
 8008270:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008274:	9307      	str	r3, [sp, #28]
 8008276:	f8da 3000 	ldr.w	r3, [sl]
 800827a:	3302      	adds	r3, #2
 800827c:	461f      	mov	r7, r3
 800827e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008282:	2830      	cmp	r0, #48	; 0x30
 8008284:	d06c      	beq.n	8008360 <__gethex+0x118>
 8008286:	f7ff ffca 	bl	800821e <__hexdig_fun>
 800828a:	4604      	mov	r4, r0
 800828c:	2800      	cmp	r0, #0
 800828e:	d16a      	bne.n	8008366 <__gethex+0x11e>
 8008290:	9a01      	ldr	r2, [sp, #4]
 8008292:	9903      	ldr	r1, [sp, #12]
 8008294:	4638      	mov	r0, r7
 8008296:	f001 f905 	bl	80094a4 <strncmp>
 800829a:	2800      	cmp	r0, #0
 800829c:	d166      	bne.n	800836c <__gethex+0x124>
 800829e:	9b01      	ldr	r3, [sp, #4]
 80082a0:	5cf8      	ldrb	r0, [r7, r3]
 80082a2:	18fe      	adds	r6, r7, r3
 80082a4:	f7ff ffbb 	bl	800821e <__hexdig_fun>
 80082a8:	2800      	cmp	r0, #0
 80082aa:	d062      	beq.n	8008372 <__gethex+0x12a>
 80082ac:	4633      	mov	r3, r6
 80082ae:	7818      	ldrb	r0, [r3, #0]
 80082b0:	461f      	mov	r7, r3
 80082b2:	2830      	cmp	r0, #48	; 0x30
 80082b4:	f103 0301 	add.w	r3, r3, #1
 80082b8:	d0f9      	beq.n	80082ae <__gethex+0x66>
 80082ba:	f7ff ffb0 	bl	800821e <__hexdig_fun>
 80082be:	fab0 f580 	clz	r5, r0
 80082c2:	4634      	mov	r4, r6
 80082c4:	f04f 0b01 	mov.w	fp, #1
 80082c8:	096d      	lsrs	r5, r5, #5
 80082ca:	463a      	mov	r2, r7
 80082cc:	4616      	mov	r6, r2
 80082ce:	7830      	ldrb	r0, [r6, #0]
 80082d0:	3201      	adds	r2, #1
 80082d2:	f7ff ffa4 	bl	800821e <__hexdig_fun>
 80082d6:	2800      	cmp	r0, #0
 80082d8:	d1f8      	bne.n	80082cc <__gethex+0x84>
 80082da:	9a01      	ldr	r2, [sp, #4]
 80082dc:	9903      	ldr	r1, [sp, #12]
 80082de:	4630      	mov	r0, r6
 80082e0:	f001 f8e0 	bl	80094a4 <strncmp>
 80082e4:	b950      	cbnz	r0, 80082fc <__gethex+0xb4>
 80082e6:	b954      	cbnz	r4, 80082fe <__gethex+0xb6>
 80082e8:	9b01      	ldr	r3, [sp, #4]
 80082ea:	18f4      	adds	r4, r6, r3
 80082ec:	4622      	mov	r2, r4
 80082ee:	4616      	mov	r6, r2
 80082f0:	7830      	ldrb	r0, [r6, #0]
 80082f2:	3201      	adds	r2, #1
 80082f4:	f7ff ff93 	bl	800821e <__hexdig_fun>
 80082f8:	2800      	cmp	r0, #0
 80082fa:	d1f8      	bne.n	80082ee <__gethex+0xa6>
 80082fc:	b10c      	cbz	r4, 8008302 <__gethex+0xba>
 80082fe:	1ba4      	subs	r4, r4, r6
 8008300:	00a4      	lsls	r4, r4, #2
 8008302:	7833      	ldrb	r3, [r6, #0]
 8008304:	2b50      	cmp	r3, #80	; 0x50
 8008306:	d001      	beq.n	800830c <__gethex+0xc4>
 8008308:	2b70      	cmp	r3, #112	; 0x70
 800830a:	d140      	bne.n	800838e <__gethex+0x146>
 800830c:	7873      	ldrb	r3, [r6, #1]
 800830e:	2b2b      	cmp	r3, #43	; 0x2b
 8008310:	d031      	beq.n	8008376 <__gethex+0x12e>
 8008312:	2b2d      	cmp	r3, #45	; 0x2d
 8008314:	d033      	beq.n	800837e <__gethex+0x136>
 8008316:	f04f 0900 	mov.w	r9, #0
 800831a:	1c71      	adds	r1, r6, #1
 800831c:	7808      	ldrb	r0, [r1, #0]
 800831e:	f7ff ff7e 	bl	800821e <__hexdig_fun>
 8008322:	1e43      	subs	r3, r0, #1
 8008324:	b2db      	uxtb	r3, r3
 8008326:	2b18      	cmp	r3, #24
 8008328:	d831      	bhi.n	800838e <__gethex+0x146>
 800832a:	f1a0 0210 	sub.w	r2, r0, #16
 800832e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008332:	f7ff ff74 	bl	800821e <__hexdig_fun>
 8008336:	1e43      	subs	r3, r0, #1
 8008338:	b2db      	uxtb	r3, r3
 800833a:	2b18      	cmp	r3, #24
 800833c:	d922      	bls.n	8008384 <__gethex+0x13c>
 800833e:	f1b9 0f00 	cmp.w	r9, #0
 8008342:	d000      	beq.n	8008346 <__gethex+0xfe>
 8008344:	4252      	negs	r2, r2
 8008346:	4414      	add	r4, r2
 8008348:	f8ca 1000 	str.w	r1, [sl]
 800834c:	b30d      	cbz	r5, 8008392 <__gethex+0x14a>
 800834e:	f1bb 0f00 	cmp.w	fp, #0
 8008352:	bf0c      	ite	eq
 8008354:	2706      	moveq	r7, #6
 8008356:	2700      	movne	r7, #0
 8008358:	4638      	mov	r0, r7
 800835a:	b00b      	add	sp, #44	; 0x2c
 800835c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008360:	f10b 0b01 	add.w	fp, fp, #1
 8008364:	e78a      	b.n	800827c <__gethex+0x34>
 8008366:	2500      	movs	r5, #0
 8008368:	462c      	mov	r4, r5
 800836a:	e7ae      	b.n	80082ca <__gethex+0x82>
 800836c:	463e      	mov	r6, r7
 800836e:	2501      	movs	r5, #1
 8008370:	e7c7      	b.n	8008302 <__gethex+0xba>
 8008372:	4604      	mov	r4, r0
 8008374:	e7fb      	b.n	800836e <__gethex+0x126>
 8008376:	f04f 0900 	mov.w	r9, #0
 800837a:	1cb1      	adds	r1, r6, #2
 800837c:	e7ce      	b.n	800831c <__gethex+0xd4>
 800837e:	f04f 0901 	mov.w	r9, #1
 8008382:	e7fa      	b.n	800837a <__gethex+0x132>
 8008384:	230a      	movs	r3, #10
 8008386:	fb03 0202 	mla	r2, r3, r2, r0
 800838a:	3a10      	subs	r2, #16
 800838c:	e7cf      	b.n	800832e <__gethex+0xe6>
 800838e:	4631      	mov	r1, r6
 8008390:	e7da      	b.n	8008348 <__gethex+0x100>
 8008392:	4629      	mov	r1, r5
 8008394:	1bf3      	subs	r3, r6, r7
 8008396:	3b01      	subs	r3, #1
 8008398:	2b07      	cmp	r3, #7
 800839a:	dc49      	bgt.n	8008430 <__gethex+0x1e8>
 800839c:	9802      	ldr	r0, [sp, #8]
 800839e:	f000 fa72 	bl	8008886 <_Balloc>
 80083a2:	f04f 0b00 	mov.w	fp, #0
 80083a6:	4605      	mov	r5, r0
 80083a8:	46da      	mov	sl, fp
 80083aa:	9b01      	ldr	r3, [sp, #4]
 80083ac:	f100 0914 	add.w	r9, r0, #20
 80083b0:	f1c3 0301 	rsb	r3, r3, #1
 80083b4:	f8cd 9010 	str.w	r9, [sp, #16]
 80083b8:	9308      	str	r3, [sp, #32]
 80083ba:	42b7      	cmp	r7, r6
 80083bc:	d33b      	bcc.n	8008436 <__gethex+0x1ee>
 80083be:	9804      	ldr	r0, [sp, #16]
 80083c0:	f840 ab04 	str.w	sl, [r0], #4
 80083c4:	eba0 0009 	sub.w	r0, r0, r9
 80083c8:	1080      	asrs	r0, r0, #2
 80083ca:	6128      	str	r0, [r5, #16]
 80083cc:	0147      	lsls	r7, r0, #5
 80083ce:	4650      	mov	r0, sl
 80083d0:	f000 fb1d 	bl	8008a0e <__hi0bits>
 80083d4:	f8d8 6000 	ldr.w	r6, [r8]
 80083d8:	1a3f      	subs	r7, r7, r0
 80083da:	42b7      	cmp	r7, r6
 80083dc:	dd64      	ble.n	80084a8 <__gethex+0x260>
 80083de:	1bbf      	subs	r7, r7, r6
 80083e0:	4639      	mov	r1, r7
 80083e2:	4628      	mov	r0, r5
 80083e4:	f000 fe27 	bl	8009036 <__any_on>
 80083e8:	4682      	mov	sl, r0
 80083ea:	b178      	cbz	r0, 800840c <__gethex+0x1c4>
 80083ec:	f04f 0a01 	mov.w	sl, #1
 80083f0:	1e7b      	subs	r3, r7, #1
 80083f2:	1159      	asrs	r1, r3, #5
 80083f4:	f003 021f 	and.w	r2, r3, #31
 80083f8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80083fc:	fa0a f202 	lsl.w	r2, sl, r2
 8008400:	420a      	tst	r2, r1
 8008402:	d003      	beq.n	800840c <__gethex+0x1c4>
 8008404:	4553      	cmp	r3, sl
 8008406:	dc46      	bgt.n	8008496 <__gethex+0x24e>
 8008408:	f04f 0a02 	mov.w	sl, #2
 800840c:	4639      	mov	r1, r7
 800840e:	4628      	mov	r0, r5
 8008410:	f7ff feca 	bl	80081a8 <rshift>
 8008414:	443c      	add	r4, r7
 8008416:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800841a:	42a3      	cmp	r3, r4
 800841c:	da52      	bge.n	80084c4 <__gethex+0x27c>
 800841e:	4629      	mov	r1, r5
 8008420:	9802      	ldr	r0, [sp, #8]
 8008422:	f000 fa64 	bl	80088ee <_Bfree>
 8008426:	2300      	movs	r3, #0
 8008428:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800842a:	27a3      	movs	r7, #163	; 0xa3
 800842c:	6013      	str	r3, [r2, #0]
 800842e:	e793      	b.n	8008358 <__gethex+0x110>
 8008430:	3101      	adds	r1, #1
 8008432:	105b      	asrs	r3, r3, #1
 8008434:	e7b0      	b.n	8008398 <__gethex+0x150>
 8008436:	1e73      	subs	r3, r6, #1
 8008438:	9305      	str	r3, [sp, #20]
 800843a:	9a07      	ldr	r2, [sp, #28]
 800843c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008440:	4293      	cmp	r3, r2
 8008442:	d018      	beq.n	8008476 <__gethex+0x22e>
 8008444:	f1bb 0f20 	cmp.w	fp, #32
 8008448:	d107      	bne.n	800845a <__gethex+0x212>
 800844a:	9b04      	ldr	r3, [sp, #16]
 800844c:	f8c3 a000 	str.w	sl, [r3]
 8008450:	f04f 0a00 	mov.w	sl, #0
 8008454:	46d3      	mov	fp, sl
 8008456:	3304      	adds	r3, #4
 8008458:	9304      	str	r3, [sp, #16]
 800845a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800845e:	f7ff fede 	bl	800821e <__hexdig_fun>
 8008462:	f000 000f 	and.w	r0, r0, #15
 8008466:	fa00 f00b 	lsl.w	r0, r0, fp
 800846a:	ea4a 0a00 	orr.w	sl, sl, r0
 800846e:	f10b 0b04 	add.w	fp, fp, #4
 8008472:	9b05      	ldr	r3, [sp, #20]
 8008474:	e00d      	b.n	8008492 <__gethex+0x24a>
 8008476:	9b05      	ldr	r3, [sp, #20]
 8008478:	9a08      	ldr	r2, [sp, #32]
 800847a:	4413      	add	r3, r2
 800847c:	42bb      	cmp	r3, r7
 800847e:	d3e1      	bcc.n	8008444 <__gethex+0x1fc>
 8008480:	4618      	mov	r0, r3
 8008482:	9a01      	ldr	r2, [sp, #4]
 8008484:	9903      	ldr	r1, [sp, #12]
 8008486:	9309      	str	r3, [sp, #36]	; 0x24
 8008488:	f001 f80c 	bl	80094a4 <strncmp>
 800848c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800848e:	2800      	cmp	r0, #0
 8008490:	d1d8      	bne.n	8008444 <__gethex+0x1fc>
 8008492:	461e      	mov	r6, r3
 8008494:	e791      	b.n	80083ba <__gethex+0x172>
 8008496:	1eb9      	subs	r1, r7, #2
 8008498:	4628      	mov	r0, r5
 800849a:	f000 fdcc 	bl	8009036 <__any_on>
 800849e:	2800      	cmp	r0, #0
 80084a0:	d0b2      	beq.n	8008408 <__gethex+0x1c0>
 80084a2:	f04f 0a03 	mov.w	sl, #3
 80084a6:	e7b1      	b.n	800840c <__gethex+0x1c4>
 80084a8:	da09      	bge.n	80084be <__gethex+0x276>
 80084aa:	1bf7      	subs	r7, r6, r7
 80084ac:	4629      	mov	r1, r5
 80084ae:	463a      	mov	r2, r7
 80084b0:	9802      	ldr	r0, [sp, #8]
 80084b2:	f000 fbe7 	bl	8008c84 <__lshift>
 80084b6:	4605      	mov	r5, r0
 80084b8:	1be4      	subs	r4, r4, r7
 80084ba:	f100 0914 	add.w	r9, r0, #20
 80084be:	f04f 0a00 	mov.w	sl, #0
 80084c2:	e7a8      	b.n	8008416 <__gethex+0x1ce>
 80084c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80084c8:	42a0      	cmp	r0, r4
 80084ca:	dd6b      	ble.n	80085a4 <__gethex+0x35c>
 80084cc:	1b04      	subs	r4, r0, r4
 80084ce:	42a6      	cmp	r6, r4
 80084d0:	dc2e      	bgt.n	8008530 <__gethex+0x2e8>
 80084d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d022      	beq.n	8008520 <__gethex+0x2d8>
 80084da:	2b03      	cmp	r3, #3
 80084dc:	d024      	beq.n	8008528 <__gethex+0x2e0>
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d115      	bne.n	800850e <__gethex+0x2c6>
 80084e2:	42a6      	cmp	r6, r4
 80084e4:	d113      	bne.n	800850e <__gethex+0x2c6>
 80084e6:	2e01      	cmp	r6, #1
 80084e8:	dc0b      	bgt.n	8008502 <__gethex+0x2ba>
 80084ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80084ee:	9a06      	ldr	r2, [sp, #24]
 80084f0:	2762      	movs	r7, #98	; 0x62
 80084f2:	6013      	str	r3, [r2, #0]
 80084f4:	2301      	movs	r3, #1
 80084f6:	612b      	str	r3, [r5, #16]
 80084f8:	f8c9 3000 	str.w	r3, [r9]
 80084fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80084fe:	601d      	str	r5, [r3, #0]
 8008500:	e72a      	b.n	8008358 <__gethex+0x110>
 8008502:	1e71      	subs	r1, r6, #1
 8008504:	4628      	mov	r0, r5
 8008506:	f000 fd96 	bl	8009036 <__any_on>
 800850a:	2800      	cmp	r0, #0
 800850c:	d1ed      	bne.n	80084ea <__gethex+0x2a2>
 800850e:	4629      	mov	r1, r5
 8008510:	9802      	ldr	r0, [sp, #8]
 8008512:	f000 f9ec 	bl	80088ee <_Bfree>
 8008516:	2300      	movs	r3, #0
 8008518:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800851a:	2750      	movs	r7, #80	; 0x50
 800851c:	6013      	str	r3, [r2, #0]
 800851e:	e71b      	b.n	8008358 <__gethex+0x110>
 8008520:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008522:	2b00      	cmp	r3, #0
 8008524:	d0e1      	beq.n	80084ea <__gethex+0x2a2>
 8008526:	e7f2      	b.n	800850e <__gethex+0x2c6>
 8008528:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1dd      	bne.n	80084ea <__gethex+0x2a2>
 800852e:	e7ee      	b.n	800850e <__gethex+0x2c6>
 8008530:	1e67      	subs	r7, r4, #1
 8008532:	f1ba 0f00 	cmp.w	sl, #0
 8008536:	d132      	bne.n	800859e <__gethex+0x356>
 8008538:	b127      	cbz	r7, 8008544 <__gethex+0x2fc>
 800853a:	4639      	mov	r1, r7
 800853c:	4628      	mov	r0, r5
 800853e:	f000 fd7a 	bl	8009036 <__any_on>
 8008542:	4682      	mov	sl, r0
 8008544:	2301      	movs	r3, #1
 8008546:	117a      	asrs	r2, r7, #5
 8008548:	f007 071f 	and.w	r7, r7, #31
 800854c:	fa03 f707 	lsl.w	r7, r3, r7
 8008550:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008554:	4621      	mov	r1, r4
 8008556:	421f      	tst	r7, r3
 8008558:	f04f 0702 	mov.w	r7, #2
 800855c:	4628      	mov	r0, r5
 800855e:	bf18      	it	ne
 8008560:	f04a 0a02 	orrne.w	sl, sl, #2
 8008564:	1b36      	subs	r6, r6, r4
 8008566:	f7ff fe1f 	bl	80081a8 <rshift>
 800856a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800856e:	f1ba 0f00 	cmp.w	sl, #0
 8008572:	d048      	beq.n	8008606 <__gethex+0x3be>
 8008574:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008578:	2b02      	cmp	r3, #2
 800857a:	d015      	beq.n	80085a8 <__gethex+0x360>
 800857c:	2b03      	cmp	r3, #3
 800857e:	d017      	beq.n	80085b0 <__gethex+0x368>
 8008580:	2b01      	cmp	r3, #1
 8008582:	d109      	bne.n	8008598 <__gethex+0x350>
 8008584:	f01a 0f02 	tst.w	sl, #2
 8008588:	d006      	beq.n	8008598 <__gethex+0x350>
 800858a:	f8d9 3000 	ldr.w	r3, [r9]
 800858e:	ea4a 0a03 	orr.w	sl, sl, r3
 8008592:	f01a 0f01 	tst.w	sl, #1
 8008596:	d10e      	bne.n	80085b6 <__gethex+0x36e>
 8008598:	f047 0710 	orr.w	r7, r7, #16
 800859c:	e033      	b.n	8008606 <__gethex+0x3be>
 800859e:	f04f 0a01 	mov.w	sl, #1
 80085a2:	e7cf      	b.n	8008544 <__gethex+0x2fc>
 80085a4:	2701      	movs	r7, #1
 80085a6:	e7e2      	b.n	800856e <__gethex+0x326>
 80085a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085aa:	f1c3 0301 	rsb	r3, r3, #1
 80085ae:	9315      	str	r3, [sp, #84]	; 0x54
 80085b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d0f0      	beq.n	8008598 <__gethex+0x350>
 80085b6:	f04f 0c00 	mov.w	ip, #0
 80085ba:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80085be:	f105 0314 	add.w	r3, r5, #20
 80085c2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80085c6:	eb03 010a 	add.w	r1, r3, sl
 80085ca:	4618      	mov	r0, r3
 80085cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80085d0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80085d4:	d01c      	beq.n	8008610 <__gethex+0x3c8>
 80085d6:	3201      	adds	r2, #1
 80085d8:	6002      	str	r2, [r0, #0]
 80085da:	2f02      	cmp	r7, #2
 80085dc:	f105 0314 	add.w	r3, r5, #20
 80085e0:	d138      	bne.n	8008654 <__gethex+0x40c>
 80085e2:	f8d8 2000 	ldr.w	r2, [r8]
 80085e6:	3a01      	subs	r2, #1
 80085e8:	42b2      	cmp	r2, r6
 80085ea:	d10a      	bne.n	8008602 <__gethex+0x3ba>
 80085ec:	2201      	movs	r2, #1
 80085ee:	1171      	asrs	r1, r6, #5
 80085f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80085f4:	f006 061f 	and.w	r6, r6, #31
 80085f8:	fa02 f606 	lsl.w	r6, r2, r6
 80085fc:	421e      	tst	r6, r3
 80085fe:	bf18      	it	ne
 8008600:	4617      	movne	r7, r2
 8008602:	f047 0720 	orr.w	r7, r7, #32
 8008606:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008608:	601d      	str	r5, [r3, #0]
 800860a:	9b06      	ldr	r3, [sp, #24]
 800860c:	601c      	str	r4, [r3, #0]
 800860e:	e6a3      	b.n	8008358 <__gethex+0x110>
 8008610:	4299      	cmp	r1, r3
 8008612:	f843 cc04 	str.w	ip, [r3, #-4]
 8008616:	d8d8      	bhi.n	80085ca <__gethex+0x382>
 8008618:	68ab      	ldr	r3, [r5, #8]
 800861a:	4599      	cmp	r9, r3
 800861c:	db12      	blt.n	8008644 <__gethex+0x3fc>
 800861e:	6869      	ldr	r1, [r5, #4]
 8008620:	9802      	ldr	r0, [sp, #8]
 8008622:	3101      	adds	r1, #1
 8008624:	f000 f92f 	bl	8008886 <_Balloc>
 8008628:	4683      	mov	fp, r0
 800862a:	692a      	ldr	r2, [r5, #16]
 800862c:	f105 010c 	add.w	r1, r5, #12
 8008630:	3202      	adds	r2, #2
 8008632:	0092      	lsls	r2, r2, #2
 8008634:	300c      	adds	r0, #12
 8008636:	f000 f91b 	bl	8008870 <memcpy>
 800863a:	4629      	mov	r1, r5
 800863c:	9802      	ldr	r0, [sp, #8]
 800863e:	f000 f956 	bl	80088ee <_Bfree>
 8008642:	465d      	mov	r5, fp
 8008644:	692b      	ldr	r3, [r5, #16]
 8008646:	1c5a      	adds	r2, r3, #1
 8008648:	612a      	str	r2, [r5, #16]
 800864a:	2201      	movs	r2, #1
 800864c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008650:	615a      	str	r2, [r3, #20]
 8008652:	e7c2      	b.n	80085da <__gethex+0x392>
 8008654:	692a      	ldr	r2, [r5, #16]
 8008656:	454a      	cmp	r2, r9
 8008658:	dd0b      	ble.n	8008672 <__gethex+0x42a>
 800865a:	2101      	movs	r1, #1
 800865c:	4628      	mov	r0, r5
 800865e:	f7ff fda3 	bl	80081a8 <rshift>
 8008662:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008666:	3401      	adds	r4, #1
 8008668:	42a3      	cmp	r3, r4
 800866a:	f6ff aed8 	blt.w	800841e <__gethex+0x1d6>
 800866e:	2701      	movs	r7, #1
 8008670:	e7c7      	b.n	8008602 <__gethex+0x3ba>
 8008672:	f016 061f 	ands.w	r6, r6, #31
 8008676:	d0fa      	beq.n	800866e <__gethex+0x426>
 8008678:	449a      	add	sl, r3
 800867a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800867e:	f000 f9c6 	bl	8008a0e <__hi0bits>
 8008682:	f1c6 0620 	rsb	r6, r6, #32
 8008686:	42b0      	cmp	r0, r6
 8008688:	dbe7      	blt.n	800865a <__gethex+0x412>
 800868a:	e7f0      	b.n	800866e <__gethex+0x426>

0800868c <L_shift>:
 800868c:	f1c2 0208 	rsb	r2, r2, #8
 8008690:	0092      	lsls	r2, r2, #2
 8008692:	b570      	push	{r4, r5, r6, lr}
 8008694:	f1c2 0620 	rsb	r6, r2, #32
 8008698:	6843      	ldr	r3, [r0, #4]
 800869a:	6804      	ldr	r4, [r0, #0]
 800869c:	fa03 f506 	lsl.w	r5, r3, r6
 80086a0:	432c      	orrs	r4, r5
 80086a2:	40d3      	lsrs	r3, r2
 80086a4:	6004      	str	r4, [r0, #0]
 80086a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80086aa:	4288      	cmp	r0, r1
 80086ac:	d3f4      	bcc.n	8008698 <L_shift+0xc>
 80086ae:	bd70      	pop	{r4, r5, r6, pc}

080086b0 <__match>:
 80086b0:	b530      	push	{r4, r5, lr}
 80086b2:	6803      	ldr	r3, [r0, #0]
 80086b4:	3301      	adds	r3, #1
 80086b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086ba:	b914      	cbnz	r4, 80086c2 <__match+0x12>
 80086bc:	6003      	str	r3, [r0, #0]
 80086be:	2001      	movs	r0, #1
 80086c0:	bd30      	pop	{r4, r5, pc}
 80086c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80086ca:	2d19      	cmp	r5, #25
 80086cc:	bf98      	it	ls
 80086ce:	3220      	addls	r2, #32
 80086d0:	42a2      	cmp	r2, r4
 80086d2:	d0f0      	beq.n	80086b6 <__match+0x6>
 80086d4:	2000      	movs	r0, #0
 80086d6:	e7f3      	b.n	80086c0 <__match+0x10>

080086d8 <__hexnan>:
 80086d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086dc:	2500      	movs	r5, #0
 80086de:	680b      	ldr	r3, [r1, #0]
 80086e0:	4682      	mov	sl, r0
 80086e2:	115f      	asrs	r7, r3, #5
 80086e4:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80086e8:	f013 031f 	ands.w	r3, r3, #31
 80086ec:	bf18      	it	ne
 80086ee:	3704      	addne	r7, #4
 80086f0:	1f3e      	subs	r6, r7, #4
 80086f2:	4690      	mov	r8, r2
 80086f4:	46b1      	mov	r9, r6
 80086f6:	4634      	mov	r4, r6
 80086f8:	46ab      	mov	fp, r5
 80086fa:	b087      	sub	sp, #28
 80086fc:	6801      	ldr	r1, [r0, #0]
 80086fe:	9301      	str	r3, [sp, #4]
 8008700:	f847 5c04 	str.w	r5, [r7, #-4]
 8008704:	9502      	str	r5, [sp, #8]
 8008706:	784a      	ldrb	r2, [r1, #1]
 8008708:	1c4b      	adds	r3, r1, #1
 800870a:	9303      	str	r3, [sp, #12]
 800870c:	b342      	cbz	r2, 8008760 <__hexnan+0x88>
 800870e:	4610      	mov	r0, r2
 8008710:	9105      	str	r1, [sp, #20]
 8008712:	9204      	str	r2, [sp, #16]
 8008714:	f7ff fd83 	bl	800821e <__hexdig_fun>
 8008718:	2800      	cmp	r0, #0
 800871a:	d143      	bne.n	80087a4 <__hexnan+0xcc>
 800871c:	9a04      	ldr	r2, [sp, #16]
 800871e:	9905      	ldr	r1, [sp, #20]
 8008720:	2a20      	cmp	r2, #32
 8008722:	d818      	bhi.n	8008756 <__hexnan+0x7e>
 8008724:	9b02      	ldr	r3, [sp, #8]
 8008726:	459b      	cmp	fp, r3
 8008728:	dd13      	ble.n	8008752 <__hexnan+0x7a>
 800872a:	454c      	cmp	r4, r9
 800872c:	d206      	bcs.n	800873c <__hexnan+0x64>
 800872e:	2d07      	cmp	r5, #7
 8008730:	dc04      	bgt.n	800873c <__hexnan+0x64>
 8008732:	462a      	mov	r2, r5
 8008734:	4649      	mov	r1, r9
 8008736:	4620      	mov	r0, r4
 8008738:	f7ff ffa8 	bl	800868c <L_shift>
 800873c:	4544      	cmp	r4, r8
 800873e:	d944      	bls.n	80087ca <__hexnan+0xf2>
 8008740:	2300      	movs	r3, #0
 8008742:	f1a4 0904 	sub.w	r9, r4, #4
 8008746:	f844 3c04 	str.w	r3, [r4, #-4]
 800874a:	461d      	mov	r5, r3
 800874c:	464c      	mov	r4, r9
 800874e:	f8cd b008 	str.w	fp, [sp, #8]
 8008752:	9903      	ldr	r1, [sp, #12]
 8008754:	e7d7      	b.n	8008706 <__hexnan+0x2e>
 8008756:	2a29      	cmp	r2, #41	; 0x29
 8008758:	d14a      	bne.n	80087f0 <__hexnan+0x118>
 800875a:	3102      	adds	r1, #2
 800875c:	f8ca 1000 	str.w	r1, [sl]
 8008760:	f1bb 0f00 	cmp.w	fp, #0
 8008764:	d044      	beq.n	80087f0 <__hexnan+0x118>
 8008766:	454c      	cmp	r4, r9
 8008768:	d206      	bcs.n	8008778 <__hexnan+0xa0>
 800876a:	2d07      	cmp	r5, #7
 800876c:	dc04      	bgt.n	8008778 <__hexnan+0xa0>
 800876e:	462a      	mov	r2, r5
 8008770:	4649      	mov	r1, r9
 8008772:	4620      	mov	r0, r4
 8008774:	f7ff ff8a 	bl	800868c <L_shift>
 8008778:	4544      	cmp	r4, r8
 800877a:	d928      	bls.n	80087ce <__hexnan+0xf6>
 800877c:	4643      	mov	r3, r8
 800877e:	f854 2b04 	ldr.w	r2, [r4], #4
 8008782:	42a6      	cmp	r6, r4
 8008784:	f843 2b04 	str.w	r2, [r3], #4
 8008788:	d2f9      	bcs.n	800877e <__hexnan+0xa6>
 800878a:	2200      	movs	r2, #0
 800878c:	f843 2b04 	str.w	r2, [r3], #4
 8008790:	429e      	cmp	r6, r3
 8008792:	d2fb      	bcs.n	800878c <__hexnan+0xb4>
 8008794:	6833      	ldr	r3, [r6, #0]
 8008796:	b91b      	cbnz	r3, 80087a0 <__hexnan+0xc8>
 8008798:	4546      	cmp	r6, r8
 800879a:	d127      	bne.n	80087ec <__hexnan+0x114>
 800879c:	2301      	movs	r3, #1
 800879e:	6033      	str	r3, [r6, #0]
 80087a0:	2005      	movs	r0, #5
 80087a2:	e026      	b.n	80087f2 <__hexnan+0x11a>
 80087a4:	3501      	adds	r5, #1
 80087a6:	2d08      	cmp	r5, #8
 80087a8:	f10b 0b01 	add.w	fp, fp, #1
 80087ac:	dd06      	ble.n	80087bc <__hexnan+0xe4>
 80087ae:	4544      	cmp	r4, r8
 80087b0:	d9cf      	bls.n	8008752 <__hexnan+0x7a>
 80087b2:	2300      	movs	r3, #0
 80087b4:	2501      	movs	r5, #1
 80087b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80087ba:	3c04      	subs	r4, #4
 80087bc:	6822      	ldr	r2, [r4, #0]
 80087be:	f000 000f 	and.w	r0, r0, #15
 80087c2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80087c6:	6020      	str	r0, [r4, #0]
 80087c8:	e7c3      	b.n	8008752 <__hexnan+0x7a>
 80087ca:	2508      	movs	r5, #8
 80087cc:	e7c1      	b.n	8008752 <__hexnan+0x7a>
 80087ce:	9b01      	ldr	r3, [sp, #4]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d0df      	beq.n	8008794 <__hexnan+0xbc>
 80087d4:	f04f 32ff 	mov.w	r2, #4294967295
 80087d8:	f1c3 0320 	rsb	r3, r3, #32
 80087dc:	fa22 f303 	lsr.w	r3, r2, r3
 80087e0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80087e4:	401a      	ands	r2, r3
 80087e6:	f847 2c04 	str.w	r2, [r7, #-4]
 80087ea:	e7d3      	b.n	8008794 <__hexnan+0xbc>
 80087ec:	3e04      	subs	r6, #4
 80087ee:	e7d1      	b.n	8008794 <__hexnan+0xbc>
 80087f0:	2004      	movs	r0, #4
 80087f2:	b007      	add	sp, #28
 80087f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080087f8 <__locale_ctype_ptr_l>:
 80087f8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80087fc:	4770      	bx	lr

080087fe <__localeconv_l>:
 80087fe:	30f0      	adds	r0, #240	; 0xf0
 8008800:	4770      	bx	lr
	...

08008804 <_localeconv_r>:
 8008804:	4b04      	ldr	r3, [pc, #16]	; (8008818 <_localeconv_r+0x14>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	6a18      	ldr	r0, [r3, #32]
 800880a:	4b04      	ldr	r3, [pc, #16]	; (800881c <_localeconv_r+0x18>)
 800880c:	2800      	cmp	r0, #0
 800880e:	bf08      	it	eq
 8008810:	4618      	moveq	r0, r3
 8008812:	30f0      	adds	r0, #240	; 0xf0
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	20000184 	.word	0x20000184
 800881c:	200001e8 	.word	0x200001e8

08008820 <malloc>:
 8008820:	4b02      	ldr	r3, [pc, #8]	; (800882c <malloc+0xc>)
 8008822:	4601      	mov	r1, r0
 8008824:	6818      	ldr	r0, [r3, #0]
 8008826:	f000 bc81 	b.w	800912c <_malloc_r>
 800882a:	bf00      	nop
 800882c:	20000184 	.word	0x20000184

08008830 <__ascii_mbtowc>:
 8008830:	b082      	sub	sp, #8
 8008832:	b901      	cbnz	r1, 8008836 <__ascii_mbtowc+0x6>
 8008834:	a901      	add	r1, sp, #4
 8008836:	b142      	cbz	r2, 800884a <__ascii_mbtowc+0x1a>
 8008838:	b14b      	cbz	r3, 800884e <__ascii_mbtowc+0x1e>
 800883a:	7813      	ldrb	r3, [r2, #0]
 800883c:	600b      	str	r3, [r1, #0]
 800883e:	7812      	ldrb	r2, [r2, #0]
 8008840:	1c10      	adds	r0, r2, #0
 8008842:	bf18      	it	ne
 8008844:	2001      	movne	r0, #1
 8008846:	b002      	add	sp, #8
 8008848:	4770      	bx	lr
 800884a:	4610      	mov	r0, r2
 800884c:	e7fb      	b.n	8008846 <__ascii_mbtowc+0x16>
 800884e:	f06f 0001 	mvn.w	r0, #1
 8008852:	e7f8      	b.n	8008846 <__ascii_mbtowc+0x16>

08008854 <memchr>:
 8008854:	b510      	push	{r4, lr}
 8008856:	b2c9      	uxtb	r1, r1
 8008858:	4402      	add	r2, r0
 800885a:	4290      	cmp	r0, r2
 800885c:	4603      	mov	r3, r0
 800885e:	d101      	bne.n	8008864 <memchr+0x10>
 8008860:	2300      	movs	r3, #0
 8008862:	e003      	b.n	800886c <memchr+0x18>
 8008864:	781c      	ldrb	r4, [r3, #0]
 8008866:	3001      	adds	r0, #1
 8008868:	428c      	cmp	r4, r1
 800886a:	d1f6      	bne.n	800885a <memchr+0x6>
 800886c:	4618      	mov	r0, r3
 800886e:	bd10      	pop	{r4, pc}

08008870 <memcpy>:
 8008870:	b510      	push	{r4, lr}
 8008872:	1e43      	subs	r3, r0, #1
 8008874:	440a      	add	r2, r1
 8008876:	4291      	cmp	r1, r2
 8008878:	d100      	bne.n	800887c <memcpy+0xc>
 800887a:	bd10      	pop	{r4, pc}
 800887c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008880:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008884:	e7f7      	b.n	8008876 <memcpy+0x6>

08008886 <_Balloc>:
 8008886:	b570      	push	{r4, r5, r6, lr}
 8008888:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800888a:	4604      	mov	r4, r0
 800888c:	460e      	mov	r6, r1
 800888e:	b93d      	cbnz	r5, 80088a0 <_Balloc+0x1a>
 8008890:	2010      	movs	r0, #16
 8008892:	f7ff ffc5 	bl	8008820 <malloc>
 8008896:	6260      	str	r0, [r4, #36]	; 0x24
 8008898:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800889c:	6005      	str	r5, [r0, #0]
 800889e:	60c5      	str	r5, [r0, #12]
 80088a0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80088a2:	68eb      	ldr	r3, [r5, #12]
 80088a4:	b183      	cbz	r3, 80088c8 <_Balloc+0x42>
 80088a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80088ae:	b9b8      	cbnz	r0, 80088e0 <_Balloc+0x5a>
 80088b0:	2101      	movs	r1, #1
 80088b2:	fa01 f506 	lsl.w	r5, r1, r6
 80088b6:	1d6a      	adds	r2, r5, #5
 80088b8:	0092      	lsls	r2, r2, #2
 80088ba:	4620      	mov	r0, r4
 80088bc:	f000 fbdc 	bl	8009078 <_calloc_r>
 80088c0:	b160      	cbz	r0, 80088dc <_Balloc+0x56>
 80088c2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80088c6:	e00e      	b.n	80088e6 <_Balloc+0x60>
 80088c8:	2221      	movs	r2, #33	; 0x21
 80088ca:	2104      	movs	r1, #4
 80088cc:	4620      	mov	r0, r4
 80088ce:	f000 fbd3 	bl	8009078 <_calloc_r>
 80088d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088d4:	60e8      	str	r0, [r5, #12]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d1e4      	bne.n	80088a6 <_Balloc+0x20>
 80088dc:	2000      	movs	r0, #0
 80088de:	bd70      	pop	{r4, r5, r6, pc}
 80088e0:	6802      	ldr	r2, [r0, #0]
 80088e2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80088e6:	2300      	movs	r3, #0
 80088e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088ec:	e7f7      	b.n	80088de <_Balloc+0x58>

080088ee <_Bfree>:
 80088ee:	b570      	push	{r4, r5, r6, lr}
 80088f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80088f2:	4606      	mov	r6, r0
 80088f4:	460d      	mov	r5, r1
 80088f6:	b93c      	cbnz	r4, 8008908 <_Bfree+0x1a>
 80088f8:	2010      	movs	r0, #16
 80088fa:	f7ff ff91 	bl	8008820 <malloc>
 80088fe:	6270      	str	r0, [r6, #36]	; 0x24
 8008900:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008904:	6004      	str	r4, [r0, #0]
 8008906:	60c4      	str	r4, [r0, #12]
 8008908:	b13d      	cbz	r5, 800891a <_Bfree+0x2c>
 800890a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800890c:	686a      	ldr	r2, [r5, #4]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008914:	6029      	str	r1, [r5, #0]
 8008916:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800891a:	bd70      	pop	{r4, r5, r6, pc}

0800891c <__multadd>:
 800891c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008920:	461f      	mov	r7, r3
 8008922:	4606      	mov	r6, r0
 8008924:	460c      	mov	r4, r1
 8008926:	2300      	movs	r3, #0
 8008928:	690d      	ldr	r5, [r1, #16]
 800892a:	f101 0c14 	add.w	ip, r1, #20
 800892e:	f8dc 0000 	ldr.w	r0, [ip]
 8008932:	3301      	adds	r3, #1
 8008934:	b281      	uxth	r1, r0
 8008936:	fb02 7101 	mla	r1, r2, r1, r7
 800893a:	0c00      	lsrs	r0, r0, #16
 800893c:	0c0f      	lsrs	r7, r1, #16
 800893e:	fb02 7000 	mla	r0, r2, r0, r7
 8008942:	b289      	uxth	r1, r1
 8008944:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008948:	429d      	cmp	r5, r3
 800894a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800894e:	f84c 1b04 	str.w	r1, [ip], #4
 8008952:	dcec      	bgt.n	800892e <__multadd+0x12>
 8008954:	b1d7      	cbz	r7, 800898c <__multadd+0x70>
 8008956:	68a3      	ldr	r3, [r4, #8]
 8008958:	42ab      	cmp	r3, r5
 800895a:	dc12      	bgt.n	8008982 <__multadd+0x66>
 800895c:	6861      	ldr	r1, [r4, #4]
 800895e:	4630      	mov	r0, r6
 8008960:	3101      	adds	r1, #1
 8008962:	f7ff ff90 	bl	8008886 <_Balloc>
 8008966:	4680      	mov	r8, r0
 8008968:	6922      	ldr	r2, [r4, #16]
 800896a:	f104 010c 	add.w	r1, r4, #12
 800896e:	3202      	adds	r2, #2
 8008970:	0092      	lsls	r2, r2, #2
 8008972:	300c      	adds	r0, #12
 8008974:	f7ff ff7c 	bl	8008870 <memcpy>
 8008978:	4621      	mov	r1, r4
 800897a:	4630      	mov	r0, r6
 800897c:	f7ff ffb7 	bl	80088ee <_Bfree>
 8008980:	4644      	mov	r4, r8
 8008982:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008986:	3501      	adds	r5, #1
 8008988:	615f      	str	r7, [r3, #20]
 800898a:	6125      	str	r5, [r4, #16]
 800898c:	4620      	mov	r0, r4
 800898e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008992 <__s2b>:
 8008992:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008996:	4615      	mov	r5, r2
 8008998:	2209      	movs	r2, #9
 800899a:	461f      	mov	r7, r3
 800899c:	3308      	adds	r3, #8
 800899e:	460c      	mov	r4, r1
 80089a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80089a4:	4606      	mov	r6, r0
 80089a6:	2201      	movs	r2, #1
 80089a8:	2100      	movs	r1, #0
 80089aa:	429a      	cmp	r2, r3
 80089ac:	db20      	blt.n	80089f0 <__s2b+0x5e>
 80089ae:	4630      	mov	r0, r6
 80089b0:	f7ff ff69 	bl	8008886 <_Balloc>
 80089b4:	9b08      	ldr	r3, [sp, #32]
 80089b6:	2d09      	cmp	r5, #9
 80089b8:	6143      	str	r3, [r0, #20]
 80089ba:	f04f 0301 	mov.w	r3, #1
 80089be:	6103      	str	r3, [r0, #16]
 80089c0:	dd19      	ble.n	80089f6 <__s2b+0x64>
 80089c2:	f104 0809 	add.w	r8, r4, #9
 80089c6:	46c1      	mov	r9, r8
 80089c8:	442c      	add	r4, r5
 80089ca:	f819 3b01 	ldrb.w	r3, [r9], #1
 80089ce:	4601      	mov	r1, r0
 80089d0:	3b30      	subs	r3, #48	; 0x30
 80089d2:	220a      	movs	r2, #10
 80089d4:	4630      	mov	r0, r6
 80089d6:	f7ff ffa1 	bl	800891c <__multadd>
 80089da:	45a1      	cmp	r9, r4
 80089dc:	d1f5      	bne.n	80089ca <__s2b+0x38>
 80089de:	eb08 0405 	add.w	r4, r8, r5
 80089e2:	3c08      	subs	r4, #8
 80089e4:	1b2d      	subs	r5, r5, r4
 80089e6:	1963      	adds	r3, r4, r5
 80089e8:	42bb      	cmp	r3, r7
 80089ea:	db07      	blt.n	80089fc <__s2b+0x6a>
 80089ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089f0:	0052      	lsls	r2, r2, #1
 80089f2:	3101      	adds	r1, #1
 80089f4:	e7d9      	b.n	80089aa <__s2b+0x18>
 80089f6:	340a      	adds	r4, #10
 80089f8:	2509      	movs	r5, #9
 80089fa:	e7f3      	b.n	80089e4 <__s2b+0x52>
 80089fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008a00:	4601      	mov	r1, r0
 8008a02:	3b30      	subs	r3, #48	; 0x30
 8008a04:	220a      	movs	r2, #10
 8008a06:	4630      	mov	r0, r6
 8008a08:	f7ff ff88 	bl	800891c <__multadd>
 8008a0c:	e7eb      	b.n	80089e6 <__s2b+0x54>

08008a0e <__hi0bits>:
 8008a0e:	0c02      	lsrs	r2, r0, #16
 8008a10:	0412      	lsls	r2, r2, #16
 8008a12:	4603      	mov	r3, r0
 8008a14:	b9b2      	cbnz	r2, 8008a44 <__hi0bits+0x36>
 8008a16:	0403      	lsls	r3, r0, #16
 8008a18:	2010      	movs	r0, #16
 8008a1a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008a1e:	bf04      	itt	eq
 8008a20:	021b      	lsleq	r3, r3, #8
 8008a22:	3008      	addeq	r0, #8
 8008a24:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008a28:	bf04      	itt	eq
 8008a2a:	011b      	lsleq	r3, r3, #4
 8008a2c:	3004      	addeq	r0, #4
 8008a2e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008a32:	bf04      	itt	eq
 8008a34:	009b      	lsleq	r3, r3, #2
 8008a36:	3002      	addeq	r0, #2
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	db06      	blt.n	8008a4a <__hi0bits+0x3c>
 8008a3c:	005b      	lsls	r3, r3, #1
 8008a3e:	d503      	bpl.n	8008a48 <__hi0bits+0x3a>
 8008a40:	3001      	adds	r0, #1
 8008a42:	4770      	bx	lr
 8008a44:	2000      	movs	r0, #0
 8008a46:	e7e8      	b.n	8008a1a <__hi0bits+0xc>
 8008a48:	2020      	movs	r0, #32
 8008a4a:	4770      	bx	lr

08008a4c <__lo0bits>:
 8008a4c:	6803      	ldr	r3, [r0, #0]
 8008a4e:	4601      	mov	r1, r0
 8008a50:	f013 0207 	ands.w	r2, r3, #7
 8008a54:	d00b      	beq.n	8008a6e <__lo0bits+0x22>
 8008a56:	07da      	lsls	r2, r3, #31
 8008a58:	d423      	bmi.n	8008aa2 <__lo0bits+0x56>
 8008a5a:	0798      	lsls	r0, r3, #30
 8008a5c:	bf49      	itett	mi
 8008a5e:	085b      	lsrmi	r3, r3, #1
 8008a60:	089b      	lsrpl	r3, r3, #2
 8008a62:	2001      	movmi	r0, #1
 8008a64:	600b      	strmi	r3, [r1, #0]
 8008a66:	bf5c      	itt	pl
 8008a68:	600b      	strpl	r3, [r1, #0]
 8008a6a:	2002      	movpl	r0, #2
 8008a6c:	4770      	bx	lr
 8008a6e:	b298      	uxth	r0, r3
 8008a70:	b9a8      	cbnz	r0, 8008a9e <__lo0bits+0x52>
 8008a72:	2010      	movs	r0, #16
 8008a74:	0c1b      	lsrs	r3, r3, #16
 8008a76:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008a7a:	bf04      	itt	eq
 8008a7c:	0a1b      	lsreq	r3, r3, #8
 8008a7e:	3008      	addeq	r0, #8
 8008a80:	071a      	lsls	r2, r3, #28
 8008a82:	bf04      	itt	eq
 8008a84:	091b      	lsreq	r3, r3, #4
 8008a86:	3004      	addeq	r0, #4
 8008a88:	079a      	lsls	r2, r3, #30
 8008a8a:	bf04      	itt	eq
 8008a8c:	089b      	lsreq	r3, r3, #2
 8008a8e:	3002      	addeq	r0, #2
 8008a90:	07da      	lsls	r2, r3, #31
 8008a92:	d402      	bmi.n	8008a9a <__lo0bits+0x4e>
 8008a94:	085b      	lsrs	r3, r3, #1
 8008a96:	d006      	beq.n	8008aa6 <__lo0bits+0x5a>
 8008a98:	3001      	adds	r0, #1
 8008a9a:	600b      	str	r3, [r1, #0]
 8008a9c:	4770      	bx	lr
 8008a9e:	4610      	mov	r0, r2
 8008aa0:	e7e9      	b.n	8008a76 <__lo0bits+0x2a>
 8008aa2:	2000      	movs	r0, #0
 8008aa4:	4770      	bx	lr
 8008aa6:	2020      	movs	r0, #32
 8008aa8:	4770      	bx	lr

08008aaa <__i2b>:
 8008aaa:	b510      	push	{r4, lr}
 8008aac:	460c      	mov	r4, r1
 8008aae:	2101      	movs	r1, #1
 8008ab0:	f7ff fee9 	bl	8008886 <_Balloc>
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	6144      	str	r4, [r0, #20]
 8008ab8:	6102      	str	r2, [r0, #16]
 8008aba:	bd10      	pop	{r4, pc}

08008abc <__multiply>:
 8008abc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac0:	4614      	mov	r4, r2
 8008ac2:	690a      	ldr	r2, [r1, #16]
 8008ac4:	6923      	ldr	r3, [r4, #16]
 8008ac6:	4688      	mov	r8, r1
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	bfbe      	ittt	lt
 8008acc:	460b      	movlt	r3, r1
 8008ace:	46a0      	movlt	r8, r4
 8008ad0:	461c      	movlt	r4, r3
 8008ad2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008ad6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008ada:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ade:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008ae2:	eb07 0609 	add.w	r6, r7, r9
 8008ae6:	42b3      	cmp	r3, r6
 8008ae8:	bfb8      	it	lt
 8008aea:	3101      	addlt	r1, #1
 8008aec:	f7ff fecb 	bl	8008886 <_Balloc>
 8008af0:	f100 0514 	add.w	r5, r0, #20
 8008af4:	462b      	mov	r3, r5
 8008af6:	2200      	movs	r2, #0
 8008af8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008afc:	4573      	cmp	r3, lr
 8008afe:	d316      	bcc.n	8008b2e <__multiply+0x72>
 8008b00:	f104 0214 	add.w	r2, r4, #20
 8008b04:	f108 0114 	add.w	r1, r8, #20
 8008b08:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008b0c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008b10:	9300      	str	r3, [sp, #0]
 8008b12:	9b00      	ldr	r3, [sp, #0]
 8008b14:	9201      	str	r2, [sp, #4]
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d80c      	bhi.n	8008b34 <__multiply+0x78>
 8008b1a:	2e00      	cmp	r6, #0
 8008b1c:	dd03      	ble.n	8008b26 <__multiply+0x6a>
 8008b1e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d05d      	beq.n	8008be2 <__multiply+0x126>
 8008b26:	6106      	str	r6, [r0, #16]
 8008b28:	b003      	add	sp, #12
 8008b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b2e:	f843 2b04 	str.w	r2, [r3], #4
 8008b32:	e7e3      	b.n	8008afc <__multiply+0x40>
 8008b34:	f8b2 b000 	ldrh.w	fp, [r2]
 8008b38:	f1bb 0f00 	cmp.w	fp, #0
 8008b3c:	d023      	beq.n	8008b86 <__multiply+0xca>
 8008b3e:	4689      	mov	r9, r1
 8008b40:	46ac      	mov	ip, r5
 8008b42:	f04f 0800 	mov.w	r8, #0
 8008b46:	f859 4b04 	ldr.w	r4, [r9], #4
 8008b4a:	f8dc a000 	ldr.w	sl, [ip]
 8008b4e:	b2a3      	uxth	r3, r4
 8008b50:	fa1f fa8a 	uxth.w	sl, sl
 8008b54:	fb0b a303 	mla	r3, fp, r3, sl
 8008b58:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008b5c:	f8dc 4000 	ldr.w	r4, [ip]
 8008b60:	4443      	add	r3, r8
 8008b62:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008b66:	fb0b 840a 	mla	r4, fp, sl, r8
 8008b6a:	46e2      	mov	sl, ip
 8008b6c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008b76:	454f      	cmp	r7, r9
 8008b78:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008b7c:	f84a 3b04 	str.w	r3, [sl], #4
 8008b80:	d82b      	bhi.n	8008bda <__multiply+0x11e>
 8008b82:	f8cc 8004 	str.w	r8, [ip, #4]
 8008b86:	9b01      	ldr	r3, [sp, #4]
 8008b88:	3204      	adds	r2, #4
 8008b8a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008b8e:	f1ba 0f00 	cmp.w	sl, #0
 8008b92:	d020      	beq.n	8008bd6 <__multiply+0x11a>
 8008b94:	4689      	mov	r9, r1
 8008b96:	46a8      	mov	r8, r5
 8008b98:	f04f 0b00 	mov.w	fp, #0
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	f8b9 c000 	ldrh.w	ip, [r9]
 8008ba2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	fb0a 440c 	mla	r4, sl, ip, r4
 8008bac:	46c4      	mov	ip, r8
 8008bae:	445c      	add	r4, fp
 8008bb0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008bb4:	f84c 3b04 	str.w	r3, [ip], #4
 8008bb8:	f859 3b04 	ldr.w	r3, [r9], #4
 8008bbc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008bc0:	0c1b      	lsrs	r3, r3, #16
 8008bc2:	fb0a b303 	mla	r3, sl, r3, fp
 8008bc6:	454f      	cmp	r7, r9
 8008bc8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008bcc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008bd0:	d805      	bhi.n	8008bde <__multiply+0x122>
 8008bd2:	f8c8 3004 	str.w	r3, [r8, #4]
 8008bd6:	3504      	adds	r5, #4
 8008bd8:	e79b      	b.n	8008b12 <__multiply+0x56>
 8008bda:	46d4      	mov	ip, sl
 8008bdc:	e7b3      	b.n	8008b46 <__multiply+0x8a>
 8008bde:	46e0      	mov	r8, ip
 8008be0:	e7dd      	b.n	8008b9e <__multiply+0xe2>
 8008be2:	3e01      	subs	r6, #1
 8008be4:	e799      	b.n	8008b1a <__multiply+0x5e>
	...

08008be8 <__pow5mult>:
 8008be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bec:	4615      	mov	r5, r2
 8008bee:	f012 0203 	ands.w	r2, r2, #3
 8008bf2:	4606      	mov	r6, r0
 8008bf4:	460f      	mov	r7, r1
 8008bf6:	d007      	beq.n	8008c08 <__pow5mult+0x20>
 8008bf8:	4c21      	ldr	r4, [pc, #132]	; (8008c80 <__pow5mult+0x98>)
 8008bfa:	3a01      	subs	r2, #1
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c02:	f7ff fe8b 	bl	800891c <__multadd>
 8008c06:	4607      	mov	r7, r0
 8008c08:	10ad      	asrs	r5, r5, #2
 8008c0a:	d035      	beq.n	8008c78 <__pow5mult+0x90>
 8008c0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008c0e:	b93c      	cbnz	r4, 8008c20 <__pow5mult+0x38>
 8008c10:	2010      	movs	r0, #16
 8008c12:	f7ff fe05 	bl	8008820 <malloc>
 8008c16:	6270      	str	r0, [r6, #36]	; 0x24
 8008c18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c1c:	6004      	str	r4, [r0, #0]
 8008c1e:	60c4      	str	r4, [r0, #12]
 8008c20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008c24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c28:	b94c      	cbnz	r4, 8008c3e <__pow5mult+0x56>
 8008c2a:	f240 2171 	movw	r1, #625	; 0x271
 8008c2e:	4630      	mov	r0, r6
 8008c30:	f7ff ff3b 	bl	8008aaa <__i2b>
 8008c34:	2300      	movs	r3, #0
 8008c36:	4604      	mov	r4, r0
 8008c38:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c3c:	6003      	str	r3, [r0, #0]
 8008c3e:	f04f 0800 	mov.w	r8, #0
 8008c42:	07eb      	lsls	r3, r5, #31
 8008c44:	d50a      	bpl.n	8008c5c <__pow5mult+0x74>
 8008c46:	4639      	mov	r1, r7
 8008c48:	4622      	mov	r2, r4
 8008c4a:	4630      	mov	r0, r6
 8008c4c:	f7ff ff36 	bl	8008abc <__multiply>
 8008c50:	4681      	mov	r9, r0
 8008c52:	4639      	mov	r1, r7
 8008c54:	4630      	mov	r0, r6
 8008c56:	f7ff fe4a 	bl	80088ee <_Bfree>
 8008c5a:	464f      	mov	r7, r9
 8008c5c:	106d      	asrs	r5, r5, #1
 8008c5e:	d00b      	beq.n	8008c78 <__pow5mult+0x90>
 8008c60:	6820      	ldr	r0, [r4, #0]
 8008c62:	b938      	cbnz	r0, 8008c74 <__pow5mult+0x8c>
 8008c64:	4622      	mov	r2, r4
 8008c66:	4621      	mov	r1, r4
 8008c68:	4630      	mov	r0, r6
 8008c6a:	f7ff ff27 	bl	8008abc <__multiply>
 8008c6e:	6020      	str	r0, [r4, #0]
 8008c70:	f8c0 8000 	str.w	r8, [r0]
 8008c74:	4604      	mov	r4, r0
 8008c76:	e7e4      	b.n	8008c42 <__pow5mult+0x5a>
 8008c78:	4638      	mov	r0, r7
 8008c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c7e:	bf00      	nop
 8008c80:	08009f50 	.word	0x08009f50

08008c84 <__lshift>:
 8008c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c88:	460c      	mov	r4, r1
 8008c8a:	4607      	mov	r7, r0
 8008c8c:	4616      	mov	r6, r2
 8008c8e:	6923      	ldr	r3, [r4, #16]
 8008c90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c94:	eb0a 0903 	add.w	r9, sl, r3
 8008c98:	6849      	ldr	r1, [r1, #4]
 8008c9a:	68a3      	ldr	r3, [r4, #8]
 8008c9c:	f109 0501 	add.w	r5, r9, #1
 8008ca0:	42ab      	cmp	r3, r5
 8008ca2:	db32      	blt.n	8008d0a <__lshift+0x86>
 8008ca4:	4638      	mov	r0, r7
 8008ca6:	f7ff fdee 	bl	8008886 <_Balloc>
 8008caa:	2300      	movs	r3, #0
 8008cac:	4680      	mov	r8, r0
 8008cae:	461a      	mov	r2, r3
 8008cb0:	f100 0114 	add.w	r1, r0, #20
 8008cb4:	4553      	cmp	r3, sl
 8008cb6:	db2b      	blt.n	8008d10 <__lshift+0x8c>
 8008cb8:	6920      	ldr	r0, [r4, #16]
 8008cba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008cbe:	f104 0314 	add.w	r3, r4, #20
 8008cc2:	f016 021f 	ands.w	r2, r6, #31
 8008cc6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008cca:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008cce:	d025      	beq.n	8008d1c <__lshift+0x98>
 8008cd0:	2000      	movs	r0, #0
 8008cd2:	f1c2 0e20 	rsb	lr, r2, #32
 8008cd6:	468a      	mov	sl, r1
 8008cd8:	681e      	ldr	r6, [r3, #0]
 8008cda:	4096      	lsls	r6, r2
 8008cdc:	4330      	orrs	r0, r6
 8008cde:	f84a 0b04 	str.w	r0, [sl], #4
 8008ce2:	f853 0b04 	ldr.w	r0, [r3], #4
 8008ce6:	459c      	cmp	ip, r3
 8008ce8:	fa20 f00e 	lsr.w	r0, r0, lr
 8008cec:	d814      	bhi.n	8008d18 <__lshift+0x94>
 8008cee:	6048      	str	r0, [r1, #4]
 8008cf0:	b108      	cbz	r0, 8008cf6 <__lshift+0x72>
 8008cf2:	f109 0502 	add.w	r5, r9, #2
 8008cf6:	3d01      	subs	r5, #1
 8008cf8:	4638      	mov	r0, r7
 8008cfa:	f8c8 5010 	str.w	r5, [r8, #16]
 8008cfe:	4621      	mov	r1, r4
 8008d00:	f7ff fdf5 	bl	80088ee <_Bfree>
 8008d04:	4640      	mov	r0, r8
 8008d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d0a:	3101      	adds	r1, #1
 8008d0c:	005b      	lsls	r3, r3, #1
 8008d0e:	e7c7      	b.n	8008ca0 <__lshift+0x1c>
 8008d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008d14:	3301      	adds	r3, #1
 8008d16:	e7cd      	b.n	8008cb4 <__lshift+0x30>
 8008d18:	4651      	mov	r1, sl
 8008d1a:	e7dc      	b.n	8008cd6 <__lshift+0x52>
 8008d1c:	3904      	subs	r1, #4
 8008d1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d22:	459c      	cmp	ip, r3
 8008d24:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d28:	d8f9      	bhi.n	8008d1e <__lshift+0x9a>
 8008d2a:	e7e4      	b.n	8008cf6 <__lshift+0x72>

08008d2c <__mcmp>:
 8008d2c:	6903      	ldr	r3, [r0, #16]
 8008d2e:	690a      	ldr	r2, [r1, #16]
 8008d30:	b530      	push	{r4, r5, lr}
 8008d32:	1a9b      	subs	r3, r3, r2
 8008d34:	d10c      	bne.n	8008d50 <__mcmp+0x24>
 8008d36:	0092      	lsls	r2, r2, #2
 8008d38:	3014      	adds	r0, #20
 8008d3a:	3114      	adds	r1, #20
 8008d3c:	1884      	adds	r4, r0, r2
 8008d3e:	4411      	add	r1, r2
 8008d40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d48:	4295      	cmp	r5, r2
 8008d4a:	d003      	beq.n	8008d54 <__mcmp+0x28>
 8008d4c:	d305      	bcc.n	8008d5a <__mcmp+0x2e>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	4618      	mov	r0, r3
 8008d52:	bd30      	pop	{r4, r5, pc}
 8008d54:	42a0      	cmp	r0, r4
 8008d56:	d3f3      	bcc.n	8008d40 <__mcmp+0x14>
 8008d58:	e7fa      	b.n	8008d50 <__mcmp+0x24>
 8008d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d5e:	e7f7      	b.n	8008d50 <__mcmp+0x24>

08008d60 <__mdiff>:
 8008d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d64:	460d      	mov	r5, r1
 8008d66:	4607      	mov	r7, r0
 8008d68:	4611      	mov	r1, r2
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	4614      	mov	r4, r2
 8008d6e:	f7ff ffdd 	bl	8008d2c <__mcmp>
 8008d72:	1e06      	subs	r6, r0, #0
 8008d74:	d108      	bne.n	8008d88 <__mdiff+0x28>
 8008d76:	4631      	mov	r1, r6
 8008d78:	4638      	mov	r0, r7
 8008d7a:	f7ff fd84 	bl	8008886 <_Balloc>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d88:	bfa4      	itt	ge
 8008d8a:	4623      	movge	r3, r4
 8008d8c:	462c      	movge	r4, r5
 8008d8e:	4638      	mov	r0, r7
 8008d90:	6861      	ldr	r1, [r4, #4]
 8008d92:	bfa6      	itte	ge
 8008d94:	461d      	movge	r5, r3
 8008d96:	2600      	movge	r6, #0
 8008d98:	2601      	movlt	r6, #1
 8008d9a:	f7ff fd74 	bl	8008886 <_Balloc>
 8008d9e:	f04f 0e00 	mov.w	lr, #0
 8008da2:	60c6      	str	r6, [r0, #12]
 8008da4:	692b      	ldr	r3, [r5, #16]
 8008da6:	6926      	ldr	r6, [r4, #16]
 8008da8:	f104 0214 	add.w	r2, r4, #20
 8008dac:	f105 0914 	add.w	r9, r5, #20
 8008db0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008db4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008db8:	f100 0114 	add.w	r1, r0, #20
 8008dbc:	f852 ab04 	ldr.w	sl, [r2], #4
 8008dc0:	f859 5b04 	ldr.w	r5, [r9], #4
 8008dc4:	fa1f f38a 	uxth.w	r3, sl
 8008dc8:	4473      	add	r3, lr
 8008dca:	b2ac      	uxth	r4, r5
 8008dcc:	1b1b      	subs	r3, r3, r4
 8008dce:	0c2c      	lsrs	r4, r5, #16
 8008dd0:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8008dd4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8008dde:	45c8      	cmp	r8, r9
 8008de0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008de4:	4694      	mov	ip, r2
 8008de6:	f841 4b04 	str.w	r4, [r1], #4
 8008dea:	d8e7      	bhi.n	8008dbc <__mdiff+0x5c>
 8008dec:	45bc      	cmp	ip, r7
 8008dee:	d304      	bcc.n	8008dfa <__mdiff+0x9a>
 8008df0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008df4:	b183      	cbz	r3, 8008e18 <__mdiff+0xb8>
 8008df6:	6106      	str	r6, [r0, #16]
 8008df8:	e7c4      	b.n	8008d84 <__mdiff+0x24>
 8008dfa:	f85c 4b04 	ldr.w	r4, [ip], #4
 8008dfe:	b2a2      	uxth	r2, r4
 8008e00:	4472      	add	r2, lr
 8008e02:	1413      	asrs	r3, r2, #16
 8008e04:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008e08:	b292      	uxth	r2, r2
 8008e0a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008e0e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008e12:	f841 2b04 	str.w	r2, [r1], #4
 8008e16:	e7e9      	b.n	8008dec <__mdiff+0x8c>
 8008e18:	3e01      	subs	r6, #1
 8008e1a:	e7e9      	b.n	8008df0 <__mdiff+0x90>

08008e1c <__ulp>:
 8008e1c:	4b10      	ldr	r3, [pc, #64]	; (8008e60 <__ulp+0x44>)
 8008e1e:	400b      	ands	r3, r1
 8008e20:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	dd02      	ble.n	8008e2e <__ulp+0x12>
 8008e28:	2000      	movs	r0, #0
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	4770      	bx	lr
 8008e2e:	425b      	negs	r3, r3
 8008e30:	151b      	asrs	r3, r3, #20
 8008e32:	2b13      	cmp	r3, #19
 8008e34:	f04f 0000 	mov.w	r0, #0
 8008e38:	f04f 0100 	mov.w	r1, #0
 8008e3c:	dc04      	bgt.n	8008e48 <__ulp+0x2c>
 8008e3e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008e42:	fa42 f103 	asr.w	r1, r2, r3
 8008e46:	4770      	bx	lr
 8008e48:	2201      	movs	r2, #1
 8008e4a:	3b14      	subs	r3, #20
 8008e4c:	2b1e      	cmp	r3, #30
 8008e4e:	bfce      	itee	gt
 8008e50:	4613      	movgt	r3, r2
 8008e52:	f1c3 031f 	rsble	r3, r3, #31
 8008e56:	fa02 f303 	lslle.w	r3, r2, r3
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	7ff00000 	.word	0x7ff00000

08008e64 <__b2d>:
 8008e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e68:	6907      	ldr	r7, [r0, #16]
 8008e6a:	f100 0914 	add.w	r9, r0, #20
 8008e6e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008e72:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008e76:	f1a7 0804 	sub.w	r8, r7, #4
 8008e7a:	4630      	mov	r0, r6
 8008e7c:	f7ff fdc7 	bl	8008a0e <__hi0bits>
 8008e80:	f1c0 0320 	rsb	r3, r0, #32
 8008e84:	280a      	cmp	r0, #10
 8008e86:	600b      	str	r3, [r1, #0]
 8008e88:	491e      	ldr	r1, [pc, #120]	; (8008f04 <__b2d+0xa0>)
 8008e8a:	dc17      	bgt.n	8008ebc <__b2d+0x58>
 8008e8c:	45c1      	cmp	r9, r8
 8008e8e:	bf28      	it	cs
 8008e90:	2200      	movcs	r2, #0
 8008e92:	f1c0 0c0b 	rsb	ip, r0, #11
 8008e96:	fa26 f30c 	lsr.w	r3, r6, ip
 8008e9a:	bf38      	it	cc
 8008e9c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008ea0:	ea43 0501 	orr.w	r5, r3, r1
 8008ea4:	f100 0315 	add.w	r3, r0, #21
 8008ea8:	fa06 f303 	lsl.w	r3, r6, r3
 8008eac:	fa22 f20c 	lsr.w	r2, r2, ip
 8008eb0:	ea43 0402 	orr.w	r4, r3, r2
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	4629      	mov	r1, r5
 8008eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ebc:	45c1      	cmp	r9, r8
 8008ebe:	bf3a      	itte	cc
 8008ec0:	f1a7 0808 	subcc.w	r8, r7, #8
 8008ec4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008ec8:	2200      	movcs	r2, #0
 8008eca:	f1b0 030b 	subs.w	r3, r0, #11
 8008ece:	d015      	beq.n	8008efc <__b2d+0x98>
 8008ed0:	409e      	lsls	r6, r3
 8008ed2:	f1c3 0720 	rsb	r7, r3, #32
 8008ed6:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8008eda:	fa22 f107 	lsr.w	r1, r2, r7
 8008ede:	45c8      	cmp	r8, r9
 8008ee0:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8008ee4:	ea46 0501 	orr.w	r5, r6, r1
 8008ee8:	bf94      	ite	ls
 8008eea:	2100      	movls	r1, #0
 8008eec:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008ef0:	fa02 f003 	lsl.w	r0, r2, r3
 8008ef4:	40f9      	lsrs	r1, r7
 8008ef6:	ea40 0401 	orr.w	r4, r0, r1
 8008efa:	e7db      	b.n	8008eb4 <__b2d+0x50>
 8008efc:	ea46 0501 	orr.w	r5, r6, r1
 8008f00:	4614      	mov	r4, r2
 8008f02:	e7d7      	b.n	8008eb4 <__b2d+0x50>
 8008f04:	3ff00000 	.word	0x3ff00000

08008f08 <__d2b>:
 8008f08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008f0c:	461c      	mov	r4, r3
 8008f0e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8008f12:	2101      	movs	r1, #1
 8008f14:	4690      	mov	r8, r2
 8008f16:	f7ff fcb6 	bl	8008886 <_Balloc>
 8008f1a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8008f1e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008f22:	4607      	mov	r7, r0
 8008f24:	bb34      	cbnz	r4, 8008f74 <__d2b+0x6c>
 8008f26:	9201      	str	r2, [sp, #4]
 8008f28:	f1b8 0200 	subs.w	r2, r8, #0
 8008f2c:	d027      	beq.n	8008f7e <__d2b+0x76>
 8008f2e:	a802      	add	r0, sp, #8
 8008f30:	f840 2d08 	str.w	r2, [r0, #-8]!
 8008f34:	f7ff fd8a 	bl	8008a4c <__lo0bits>
 8008f38:	9900      	ldr	r1, [sp, #0]
 8008f3a:	b1f0      	cbz	r0, 8008f7a <__d2b+0x72>
 8008f3c:	9a01      	ldr	r2, [sp, #4]
 8008f3e:	f1c0 0320 	rsb	r3, r0, #32
 8008f42:	fa02 f303 	lsl.w	r3, r2, r3
 8008f46:	430b      	orrs	r3, r1
 8008f48:	40c2      	lsrs	r2, r0
 8008f4a:	617b      	str	r3, [r7, #20]
 8008f4c:	9201      	str	r2, [sp, #4]
 8008f4e:	9b01      	ldr	r3, [sp, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	bf14      	ite	ne
 8008f54:	2102      	movne	r1, #2
 8008f56:	2101      	moveq	r1, #1
 8008f58:	61bb      	str	r3, [r7, #24]
 8008f5a:	6139      	str	r1, [r7, #16]
 8008f5c:	b1c4      	cbz	r4, 8008f90 <__d2b+0x88>
 8008f5e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008f62:	4404      	add	r4, r0
 8008f64:	6034      	str	r4, [r6, #0]
 8008f66:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f6a:	6028      	str	r0, [r5, #0]
 8008f6c:	4638      	mov	r0, r7
 8008f6e:	b002      	add	sp, #8
 8008f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f74:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008f78:	e7d5      	b.n	8008f26 <__d2b+0x1e>
 8008f7a:	6179      	str	r1, [r7, #20]
 8008f7c:	e7e7      	b.n	8008f4e <__d2b+0x46>
 8008f7e:	a801      	add	r0, sp, #4
 8008f80:	f7ff fd64 	bl	8008a4c <__lo0bits>
 8008f84:	2101      	movs	r1, #1
 8008f86:	9b01      	ldr	r3, [sp, #4]
 8008f88:	6139      	str	r1, [r7, #16]
 8008f8a:	617b      	str	r3, [r7, #20]
 8008f8c:	3020      	adds	r0, #32
 8008f8e:	e7e5      	b.n	8008f5c <__d2b+0x54>
 8008f90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f94:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008f98:	6030      	str	r0, [r6, #0]
 8008f9a:	6918      	ldr	r0, [r3, #16]
 8008f9c:	f7ff fd37 	bl	8008a0e <__hi0bits>
 8008fa0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008fa4:	e7e1      	b.n	8008f6a <__d2b+0x62>

08008fa6 <__ratio>:
 8008fa6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008faa:	4688      	mov	r8, r1
 8008fac:	4669      	mov	r1, sp
 8008fae:	4681      	mov	r9, r0
 8008fb0:	f7ff ff58 	bl	8008e64 <__b2d>
 8008fb4:	468b      	mov	fp, r1
 8008fb6:	4606      	mov	r6, r0
 8008fb8:	460f      	mov	r7, r1
 8008fba:	4640      	mov	r0, r8
 8008fbc:	a901      	add	r1, sp, #4
 8008fbe:	f7ff ff51 	bl	8008e64 <__b2d>
 8008fc2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008fc6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008fca:	460d      	mov	r5, r1
 8008fcc:	eba3 0c02 	sub.w	ip, r3, r2
 8008fd0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008fd4:	1a9b      	subs	r3, r3, r2
 8008fd6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	bfd5      	itete	le
 8008fde:	460a      	movle	r2, r1
 8008fe0:	463a      	movgt	r2, r7
 8008fe2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008fe6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008fea:	bfd8      	it	le
 8008fec:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8008ff0:	462b      	mov	r3, r5
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	4659      	mov	r1, fp
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	f7f7 fb98 	bl	800072c <__aeabi_ddiv>
 8008ffc:	b003      	add	sp, #12
 8008ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009002 <__copybits>:
 8009002:	3901      	subs	r1, #1
 8009004:	b510      	push	{r4, lr}
 8009006:	1149      	asrs	r1, r1, #5
 8009008:	6914      	ldr	r4, [r2, #16]
 800900a:	3101      	adds	r1, #1
 800900c:	f102 0314 	add.w	r3, r2, #20
 8009010:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009014:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009018:	42a3      	cmp	r3, r4
 800901a:	4602      	mov	r2, r0
 800901c:	d303      	bcc.n	8009026 <__copybits+0x24>
 800901e:	2300      	movs	r3, #0
 8009020:	428a      	cmp	r2, r1
 8009022:	d305      	bcc.n	8009030 <__copybits+0x2e>
 8009024:	bd10      	pop	{r4, pc}
 8009026:	f853 2b04 	ldr.w	r2, [r3], #4
 800902a:	f840 2b04 	str.w	r2, [r0], #4
 800902e:	e7f3      	b.n	8009018 <__copybits+0x16>
 8009030:	f842 3b04 	str.w	r3, [r2], #4
 8009034:	e7f4      	b.n	8009020 <__copybits+0x1e>

08009036 <__any_on>:
 8009036:	f100 0214 	add.w	r2, r0, #20
 800903a:	6900      	ldr	r0, [r0, #16]
 800903c:	114b      	asrs	r3, r1, #5
 800903e:	4298      	cmp	r0, r3
 8009040:	b510      	push	{r4, lr}
 8009042:	db11      	blt.n	8009068 <__any_on+0x32>
 8009044:	dd0a      	ble.n	800905c <__any_on+0x26>
 8009046:	f011 011f 	ands.w	r1, r1, #31
 800904a:	d007      	beq.n	800905c <__any_on+0x26>
 800904c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009050:	fa24 f001 	lsr.w	r0, r4, r1
 8009054:	fa00 f101 	lsl.w	r1, r0, r1
 8009058:	428c      	cmp	r4, r1
 800905a:	d10b      	bne.n	8009074 <__any_on+0x3e>
 800905c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009060:	4293      	cmp	r3, r2
 8009062:	d803      	bhi.n	800906c <__any_on+0x36>
 8009064:	2000      	movs	r0, #0
 8009066:	bd10      	pop	{r4, pc}
 8009068:	4603      	mov	r3, r0
 800906a:	e7f7      	b.n	800905c <__any_on+0x26>
 800906c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009070:	2900      	cmp	r1, #0
 8009072:	d0f5      	beq.n	8009060 <__any_on+0x2a>
 8009074:	2001      	movs	r0, #1
 8009076:	e7f6      	b.n	8009066 <__any_on+0x30>

08009078 <_calloc_r>:
 8009078:	b538      	push	{r3, r4, r5, lr}
 800907a:	fb02 f401 	mul.w	r4, r2, r1
 800907e:	4621      	mov	r1, r4
 8009080:	f000 f854 	bl	800912c <_malloc_r>
 8009084:	4605      	mov	r5, r0
 8009086:	b118      	cbz	r0, 8009090 <_calloc_r+0x18>
 8009088:	4622      	mov	r2, r4
 800908a:	2100      	movs	r1, #0
 800908c:	f7fc fd2c 	bl	8005ae8 <memset>
 8009090:	4628      	mov	r0, r5
 8009092:	bd38      	pop	{r3, r4, r5, pc}

08009094 <_free_r>:
 8009094:	b538      	push	{r3, r4, r5, lr}
 8009096:	4605      	mov	r5, r0
 8009098:	2900      	cmp	r1, #0
 800909a:	d043      	beq.n	8009124 <_free_r+0x90>
 800909c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090a0:	1f0c      	subs	r4, r1, #4
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	bfb8      	it	lt
 80090a6:	18e4      	addlt	r4, r4, r3
 80090a8:	f000 fa34 	bl	8009514 <__malloc_lock>
 80090ac:	4a1e      	ldr	r2, [pc, #120]	; (8009128 <_free_r+0x94>)
 80090ae:	6813      	ldr	r3, [r2, #0]
 80090b0:	4610      	mov	r0, r2
 80090b2:	b933      	cbnz	r3, 80090c2 <_free_r+0x2e>
 80090b4:	6063      	str	r3, [r4, #4]
 80090b6:	6014      	str	r4, [r2, #0]
 80090b8:	4628      	mov	r0, r5
 80090ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090be:	f000 ba2a 	b.w	8009516 <__malloc_unlock>
 80090c2:	42a3      	cmp	r3, r4
 80090c4:	d90b      	bls.n	80090de <_free_r+0x4a>
 80090c6:	6821      	ldr	r1, [r4, #0]
 80090c8:	1862      	adds	r2, r4, r1
 80090ca:	4293      	cmp	r3, r2
 80090cc:	bf01      	itttt	eq
 80090ce:	681a      	ldreq	r2, [r3, #0]
 80090d0:	685b      	ldreq	r3, [r3, #4]
 80090d2:	1852      	addeq	r2, r2, r1
 80090d4:	6022      	streq	r2, [r4, #0]
 80090d6:	6063      	str	r3, [r4, #4]
 80090d8:	6004      	str	r4, [r0, #0]
 80090da:	e7ed      	b.n	80090b8 <_free_r+0x24>
 80090dc:	4613      	mov	r3, r2
 80090de:	685a      	ldr	r2, [r3, #4]
 80090e0:	b10a      	cbz	r2, 80090e6 <_free_r+0x52>
 80090e2:	42a2      	cmp	r2, r4
 80090e4:	d9fa      	bls.n	80090dc <_free_r+0x48>
 80090e6:	6819      	ldr	r1, [r3, #0]
 80090e8:	1858      	adds	r0, r3, r1
 80090ea:	42a0      	cmp	r0, r4
 80090ec:	d10b      	bne.n	8009106 <_free_r+0x72>
 80090ee:	6820      	ldr	r0, [r4, #0]
 80090f0:	4401      	add	r1, r0
 80090f2:	1858      	adds	r0, r3, r1
 80090f4:	4282      	cmp	r2, r0
 80090f6:	6019      	str	r1, [r3, #0]
 80090f8:	d1de      	bne.n	80090b8 <_free_r+0x24>
 80090fa:	6810      	ldr	r0, [r2, #0]
 80090fc:	6852      	ldr	r2, [r2, #4]
 80090fe:	4401      	add	r1, r0
 8009100:	6019      	str	r1, [r3, #0]
 8009102:	605a      	str	r2, [r3, #4]
 8009104:	e7d8      	b.n	80090b8 <_free_r+0x24>
 8009106:	d902      	bls.n	800910e <_free_r+0x7a>
 8009108:	230c      	movs	r3, #12
 800910a:	602b      	str	r3, [r5, #0]
 800910c:	e7d4      	b.n	80090b8 <_free_r+0x24>
 800910e:	6820      	ldr	r0, [r4, #0]
 8009110:	1821      	adds	r1, r4, r0
 8009112:	428a      	cmp	r2, r1
 8009114:	bf01      	itttt	eq
 8009116:	6811      	ldreq	r1, [r2, #0]
 8009118:	6852      	ldreq	r2, [r2, #4]
 800911a:	1809      	addeq	r1, r1, r0
 800911c:	6021      	streq	r1, [r4, #0]
 800911e:	6062      	str	r2, [r4, #4]
 8009120:	605c      	str	r4, [r3, #4]
 8009122:	e7c9      	b.n	80090b8 <_free_r+0x24>
 8009124:	bd38      	pop	{r3, r4, r5, pc}
 8009126:	bf00      	nop
 8009128:	20002904 	.word	0x20002904

0800912c <_malloc_r>:
 800912c:	b570      	push	{r4, r5, r6, lr}
 800912e:	1ccd      	adds	r5, r1, #3
 8009130:	f025 0503 	bic.w	r5, r5, #3
 8009134:	3508      	adds	r5, #8
 8009136:	2d0c      	cmp	r5, #12
 8009138:	bf38      	it	cc
 800913a:	250c      	movcc	r5, #12
 800913c:	2d00      	cmp	r5, #0
 800913e:	4606      	mov	r6, r0
 8009140:	db01      	blt.n	8009146 <_malloc_r+0x1a>
 8009142:	42a9      	cmp	r1, r5
 8009144:	d903      	bls.n	800914e <_malloc_r+0x22>
 8009146:	230c      	movs	r3, #12
 8009148:	6033      	str	r3, [r6, #0]
 800914a:	2000      	movs	r0, #0
 800914c:	bd70      	pop	{r4, r5, r6, pc}
 800914e:	f000 f9e1 	bl	8009514 <__malloc_lock>
 8009152:	4a21      	ldr	r2, [pc, #132]	; (80091d8 <_malloc_r+0xac>)
 8009154:	6814      	ldr	r4, [r2, #0]
 8009156:	4621      	mov	r1, r4
 8009158:	b991      	cbnz	r1, 8009180 <_malloc_r+0x54>
 800915a:	4c20      	ldr	r4, [pc, #128]	; (80091dc <_malloc_r+0xb0>)
 800915c:	6823      	ldr	r3, [r4, #0]
 800915e:	b91b      	cbnz	r3, 8009168 <_malloc_r+0x3c>
 8009160:	4630      	mov	r0, r6
 8009162:	f000 f98f 	bl	8009484 <_sbrk_r>
 8009166:	6020      	str	r0, [r4, #0]
 8009168:	4629      	mov	r1, r5
 800916a:	4630      	mov	r0, r6
 800916c:	f000 f98a 	bl	8009484 <_sbrk_r>
 8009170:	1c43      	adds	r3, r0, #1
 8009172:	d124      	bne.n	80091be <_malloc_r+0x92>
 8009174:	230c      	movs	r3, #12
 8009176:	4630      	mov	r0, r6
 8009178:	6033      	str	r3, [r6, #0]
 800917a:	f000 f9cc 	bl	8009516 <__malloc_unlock>
 800917e:	e7e4      	b.n	800914a <_malloc_r+0x1e>
 8009180:	680b      	ldr	r3, [r1, #0]
 8009182:	1b5b      	subs	r3, r3, r5
 8009184:	d418      	bmi.n	80091b8 <_malloc_r+0x8c>
 8009186:	2b0b      	cmp	r3, #11
 8009188:	d90f      	bls.n	80091aa <_malloc_r+0x7e>
 800918a:	600b      	str	r3, [r1, #0]
 800918c:	18cc      	adds	r4, r1, r3
 800918e:	50cd      	str	r5, [r1, r3]
 8009190:	4630      	mov	r0, r6
 8009192:	f000 f9c0 	bl	8009516 <__malloc_unlock>
 8009196:	f104 000b 	add.w	r0, r4, #11
 800919a:	1d23      	adds	r3, r4, #4
 800919c:	f020 0007 	bic.w	r0, r0, #7
 80091a0:	1ac3      	subs	r3, r0, r3
 80091a2:	d0d3      	beq.n	800914c <_malloc_r+0x20>
 80091a4:	425a      	negs	r2, r3
 80091a6:	50e2      	str	r2, [r4, r3]
 80091a8:	e7d0      	b.n	800914c <_malloc_r+0x20>
 80091aa:	684b      	ldr	r3, [r1, #4]
 80091ac:	428c      	cmp	r4, r1
 80091ae:	bf16      	itet	ne
 80091b0:	6063      	strne	r3, [r4, #4]
 80091b2:	6013      	streq	r3, [r2, #0]
 80091b4:	460c      	movne	r4, r1
 80091b6:	e7eb      	b.n	8009190 <_malloc_r+0x64>
 80091b8:	460c      	mov	r4, r1
 80091ba:	6849      	ldr	r1, [r1, #4]
 80091bc:	e7cc      	b.n	8009158 <_malloc_r+0x2c>
 80091be:	1cc4      	adds	r4, r0, #3
 80091c0:	f024 0403 	bic.w	r4, r4, #3
 80091c4:	42a0      	cmp	r0, r4
 80091c6:	d005      	beq.n	80091d4 <_malloc_r+0xa8>
 80091c8:	1a21      	subs	r1, r4, r0
 80091ca:	4630      	mov	r0, r6
 80091cc:	f000 f95a 	bl	8009484 <_sbrk_r>
 80091d0:	3001      	adds	r0, #1
 80091d2:	d0cf      	beq.n	8009174 <_malloc_r+0x48>
 80091d4:	6025      	str	r5, [r4, #0]
 80091d6:	e7db      	b.n	8009190 <_malloc_r+0x64>
 80091d8:	20002904 	.word	0x20002904
 80091dc:	20002908 	.word	0x20002908

080091e0 <__ssputs_r>:
 80091e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091e4:	688e      	ldr	r6, [r1, #8]
 80091e6:	4682      	mov	sl, r0
 80091e8:	429e      	cmp	r6, r3
 80091ea:	460c      	mov	r4, r1
 80091ec:	4690      	mov	r8, r2
 80091ee:	4699      	mov	r9, r3
 80091f0:	d837      	bhi.n	8009262 <__ssputs_r+0x82>
 80091f2:	898a      	ldrh	r2, [r1, #12]
 80091f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80091f8:	d031      	beq.n	800925e <__ssputs_r+0x7e>
 80091fa:	2302      	movs	r3, #2
 80091fc:	6825      	ldr	r5, [r4, #0]
 80091fe:	6909      	ldr	r1, [r1, #16]
 8009200:	1a6f      	subs	r7, r5, r1
 8009202:	6965      	ldr	r5, [r4, #20]
 8009204:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009208:	fb95 f5f3 	sdiv	r5, r5, r3
 800920c:	f109 0301 	add.w	r3, r9, #1
 8009210:	443b      	add	r3, r7
 8009212:	429d      	cmp	r5, r3
 8009214:	bf38      	it	cc
 8009216:	461d      	movcc	r5, r3
 8009218:	0553      	lsls	r3, r2, #21
 800921a:	d530      	bpl.n	800927e <__ssputs_r+0x9e>
 800921c:	4629      	mov	r1, r5
 800921e:	f7ff ff85 	bl	800912c <_malloc_r>
 8009222:	4606      	mov	r6, r0
 8009224:	b950      	cbnz	r0, 800923c <__ssputs_r+0x5c>
 8009226:	230c      	movs	r3, #12
 8009228:	f04f 30ff 	mov.w	r0, #4294967295
 800922c:	f8ca 3000 	str.w	r3, [sl]
 8009230:	89a3      	ldrh	r3, [r4, #12]
 8009232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009236:	81a3      	strh	r3, [r4, #12]
 8009238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800923c:	463a      	mov	r2, r7
 800923e:	6921      	ldr	r1, [r4, #16]
 8009240:	f7ff fb16 	bl	8008870 <memcpy>
 8009244:	89a3      	ldrh	r3, [r4, #12]
 8009246:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800924a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800924e:	81a3      	strh	r3, [r4, #12]
 8009250:	6126      	str	r6, [r4, #16]
 8009252:	443e      	add	r6, r7
 8009254:	6026      	str	r6, [r4, #0]
 8009256:	464e      	mov	r6, r9
 8009258:	6165      	str	r5, [r4, #20]
 800925a:	1bed      	subs	r5, r5, r7
 800925c:	60a5      	str	r5, [r4, #8]
 800925e:	454e      	cmp	r6, r9
 8009260:	d900      	bls.n	8009264 <__ssputs_r+0x84>
 8009262:	464e      	mov	r6, r9
 8009264:	4632      	mov	r2, r6
 8009266:	4641      	mov	r1, r8
 8009268:	6820      	ldr	r0, [r4, #0]
 800926a:	f000 f93a 	bl	80094e2 <memmove>
 800926e:	68a3      	ldr	r3, [r4, #8]
 8009270:	2000      	movs	r0, #0
 8009272:	1b9b      	subs	r3, r3, r6
 8009274:	60a3      	str	r3, [r4, #8]
 8009276:	6823      	ldr	r3, [r4, #0]
 8009278:	441e      	add	r6, r3
 800927a:	6026      	str	r6, [r4, #0]
 800927c:	e7dc      	b.n	8009238 <__ssputs_r+0x58>
 800927e:	462a      	mov	r2, r5
 8009280:	f000 f94a 	bl	8009518 <_realloc_r>
 8009284:	4606      	mov	r6, r0
 8009286:	2800      	cmp	r0, #0
 8009288:	d1e2      	bne.n	8009250 <__ssputs_r+0x70>
 800928a:	6921      	ldr	r1, [r4, #16]
 800928c:	4650      	mov	r0, sl
 800928e:	f7ff ff01 	bl	8009094 <_free_r>
 8009292:	e7c8      	b.n	8009226 <__ssputs_r+0x46>

08009294 <_svfiprintf_r>:
 8009294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009298:	461d      	mov	r5, r3
 800929a:	898b      	ldrh	r3, [r1, #12]
 800929c:	b09d      	sub	sp, #116	; 0x74
 800929e:	061f      	lsls	r7, r3, #24
 80092a0:	4680      	mov	r8, r0
 80092a2:	460c      	mov	r4, r1
 80092a4:	4616      	mov	r6, r2
 80092a6:	d50f      	bpl.n	80092c8 <_svfiprintf_r+0x34>
 80092a8:	690b      	ldr	r3, [r1, #16]
 80092aa:	b96b      	cbnz	r3, 80092c8 <_svfiprintf_r+0x34>
 80092ac:	2140      	movs	r1, #64	; 0x40
 80092ae:	f7ff ff3d 	bl	800912c <_malloc_r>
 80092b2:	6020      	str	r0, [r4, #0]
 80092b4:	6120      	str	r0, [r4, #16]
 80092b6:	b928      	cbnz	r0, 80092c4 <_svfiprintf_r+0x30>
 80092b8:	230c      	movs	r3, #12
 80092ba:	f8c8 3000 	str.w	r3, [r8]
 80092be:	f04f 30ff 	mov.w	r0, #4294967295
 80092c2:	e0c8      	b.n	8009456 <_svfiprintf_r+0x1c2>
 80092c4:	2340      	movs	r3, #64	; 0x40
 80092c6:	6163      	str	r3, [r4, #20]
 80092c8:	2300      	movs	r3, #0
 80092ca:	9309      	str	r3, [sp, #36]	; 0x24
 80092cc:	2320      	movs	r3, #32
 80092ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092d2:	2330      	movs	r3, #48	; 0x30
 80092d4:	f04f 0b01 	mov.w	fp, #1
 80092d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092dc:	9503      	str	r5, [sp, #12]
 80092de:	4637      	mov	r7, r6
 80092e0:	463d      	mov	r5, r7
 80092e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80092e6:	b10b      	cbz	r3, 80092ec <_svfiprintf_r+0x58>
 80092e8:	2b25      	cmp	r3, #37	; 0x25
 80092ea:	d13e      	bne.n	800936a <_svfiprintf_r+0xd6>
 80092ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80092f0:	d00b      	beq.n	800930a <_svfiprintf_r+0x76>
 80092f2:	4653      	mov	r3, sl
 80092f4:	4632      	mov	r2, r6
 80092f6:	4621      	mov	r1, r4
 80092f8:	4640      	mov	r0, r8
 80092fa:	f7ff ff71 	bl	80091e0 <__ssputs_r>
 80092fe:	3001      	adds	r0, #1
 8009300:	f000 80a4 	beq.w	800944c <_svfiprintf_r+0x1b8>
 8009304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009306:	4453      	add	r3, sl
 8009308:	9309      	str	r3, [sp, #36]	; 0x24
 800930a:	783b      	ldrb	r3, [r7, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	f000 809d 	beq.w	800944c <_svfiprintf_r+0x1b8>
 8009312:	2300      	movs	r3, #0
 8009314:	f04f 32ff 	mov.w	r2, #4294967295
 8009318:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800931c:	9304      	str	r3, [sp, #16]
 800931e:	9307      	str	r3, [sp, #28]
 8009320:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009324:	931a      	str	r3, [sp, #104]	; 0x68
 8009326:	462f      	mov	r7, r5
 8009328:	2205      	movs	r2, #5
 800932a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800932e:	4850      	ldr	r0, [pc, #320]	; (8009470 <_svfiprintf_r+0x1dc>)
 8009330:	f7ff fa90 	bl	8008854 <memchr>
 8009334:	9b04      	ldr	r3, [sp, #16]
 8009336:	b9d0      	cbnz	r0, 800936e <_svfiprintf_r+0xda>
 8009338:	06d9      	lsls	r1, r3, #27
 800933a:	bf44      	itt	mi
 800933c:	2220      	movmi	r2, #32
 800933e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009342:	071a      	lsls	r2, r3, #28
 8009344:	bf44      	itt	mi
 8009346:	222b      	movmi	r2, #43	; 0x2b
 8009348:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800934c:	782a      	ldrb	r2, [r5, #0]
 800934e:	2a2a      	cmp	r2, #42	; 0x2a
 8009350:	d015      	beq.n	800937e <_svfiprintf_r+0xea>
 8009352:	462f      	mov	r7, r5
 8009354:	2000      	movs	r0, #0
 8009356:	250a      	movs	r5, #10
 8009358:	9a07      	ldr	r2, [sp, #28]
 800935a:	4639      	mov	r1, r7
 800935c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009360:	3b30      	subs	r3, #48	; 0x30
 8009362:	2b09      	cmp	r3, #9
 8009364:	d94d      	bls.n	8009402 <_svfiprintf_r+0x16e>
 8009366:	b1b8      	cbz	r0, 8009398 <_svfiprintf_r+0x104>
 8009368:	e00f      	b.n	800938a <_svfiprintf_r+0xf6>
 800936a:	462f      	mov	r7, r5
 800936c:	e7b8      	b.n	80092e0 <_svfiprintf_r+0x4c>
 800936e:	4a40      	ldr	r2, [pc, #256]	; (8009470 <_svfiprintf_r+0x1dc>)
 8009370:	463d      	mov	r5, r7
 8009372:	1a80      	subs	r0, r0, r2
 8009374:	fa0b f000 	lsl.w	r0, fp, r0
 8009378:	4318      	orrs	r0, r3
 800937a:	9004      	str	r0, [sp, #16]
 800937c:	e7d3      	b.n	8009326 <_svfiprintf_r+0x92>
 800937e:	9a03      	ldr	r2, [sp, #12]
 8009380:	1d11      	adds	r1, r2, #4
 8009382:	6812      	ldr	r2, [r2, #0]
 8009384:	9103      	str	r1, [sp, #12]
 8009386:	2a00      	cmp	r2, #0
 8009388:	db01      	blt.n	800938e <_svfiprintf_r+0xfa>
 800938a:	9207      	str	r2, [sp, #28]
 800938c:	e004      	b.n	8009398 <_svfiprintf_r+0x104>
 800938e:	4252      	negs	r2, r2
 8009390:	f043 0302 	orr.w	r3, r3, #2
 8009394:	9207      	str	r2, [sp, #28]
 8009396:	9304      	str	r3, [sp, #16]
 8009398:	783b      	ldrb	r3, [r7, #0]
 800939a:	2b2e      	cmp	r3, #46	; 0x2e
 800939c:	d10c      	bne.n	80093b8 <_svfiprintf_r+0x124>
 800939e:	787b      	ldrb	r3, [r7, #1]
 80093a0:	2b2a      	cmp	r3, #42	; 0x2a
 80093a2:	d133      	bne.n	800940c <_svfiprintf_r+0x178>
 80093a4:	9b03      	ldr	r3, [sp, #12]
 80093a6:	3702      	adds	r7, #2
 80093a8:	1d1a      	adds	r2, r3, #4
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	9203      	str	r2, [sp, #12]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	bfb8      	it	lt
 80093b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80093b6:	9305      	str	r3, [sp, #20]
 80093b8:	4d2e      	ldr	r5, [pc, #184]	; (8009474 <_svfiprintf_r+0x1e0>)
 80093ba:	2203      	movs	r2, #3
 80093bc:	7839      	ldrb	r1, [r7, #0]
 80093be:	4628      	mov	r0, r5
 80093c0:	f7ff fa48 	bl	8008854 <memchr>
 80093c4:	b138      	cbz	r0, 80093d6 <_svfiprintf_r+0x142>
 80093c6:	2340      	movs	r3, #64	; 0x40
 80093c8:	1b40      	subs	r0, r0, r5
 80093ca:	fa03 f000 	lsl.w	r0, r3, r0
 80093ce:	9b04      	ldr	r3, [sp, #16]
 80093d0:	3701      	adds	r7, #1
 80093d2:	4303      	orrs	r3, r0
 80093d4:	9304      	str	r3, [sp, #16]
 80093d6:	7839      	ldrb	r1, [r7, #0]
 80093d8:	2206      	movs	r2, #6
 80093da:	4827      	ldr	r0, [pc, #156]	; (8009478 <_svfiprintf_r+0x1e4>)
 80093dc:	1c7e      	adds	r6, r7, #1
 80093de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093e2:	f7ff fa37 	bl	8008854 <memchr>
 80093e6:	2800      	cmp	r0, #0
 80093e8:	d038      	beq.n	800945c <_svfiprintf_r+0x1c8>
 80093ea:	4b24      	ldr	r3, [pc, #144]	; (800947c <_svfiprintf_r+0x1e8>)
 80093ec:	bb13      	cbnz	r3, 8009434 <_svfiprintf_r+0x1a0>
 80093ee:	9b03      	ldr	r3, [sp, #12]
 80093f0:	3307      	adds	r3, #7
 80093f2:	f023 0307 	bic.w	r3, r3, #7
 80093f6:	3308      	adds	r3, #8
 80093f8:	9303      	str	r3, [sp, #12]
 80093fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093fc:	444b      	add	r3, r9
 80093fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009400:	e76d      	b.n	80092de <_svfiprintf_r+0x4a>
 8009402:	fb05 3202 	mla	r2, r5, r2, r3
 8009406:	2001      	movs	r0, #1
 8009408:	460f      	mov	r7, r1
 800940a:	e7a6      	b.n	800935a <_svfiprintf_r+0xc6>
 800940c:	2300      	movs	r3, #0
 800940e:	250a      	movs	r5, #10
 8009410:	4619      	mov	r1, r3
 8009412:	3701      	adds	r7, #1
 8009414:	9305      	str	r3, [sp, #20]
 8009416:	4638      	mov	r0, r7
 8009418:	f810 2b01 	ldrb.w	r2, [r0], #1
 800941c:	3a30      	subs	r2, #48	; 0x30
 800941e:	2a09      	cmp	r2, #9
 8009420:	d903      	bls.n	800942a <_svfiprintf_r+0x196>
 8009422:	2b00      	cmp	r3, #0
 8009424:	d0c8      	beq.n	80093b8 <_svfiprintf_r+0x124>
 8009426:	9105      	str	r1, [sp, #20]
 8009428:	e7c6      	b.n	80093b8 <_svfiprintf_r+0x124>
 800942a:	fb05 2101 	mla	r1, r5, r1, r2
 800942e:	2301      	movs	r3, #1
 8009430:	4607      	mov	r7, r0
 8009432:	e7f0      	b.n	8009416 <_svfiprintf_r+0x182>
 8009434:	ab03      	add	r3, sp, #12
 8009436:	9300      	str	r3, [sp, #0]
 8009438:	4622      	mov	r2, r4
 800943a:	4b11      	ldr	r3, [pc, #68]	; (8009480 <_svfiprintf_r+0x1ec>)
 800943c:	a904      	add	r1, sp, #16
 800943e:	4640      	mov	r0, r8
 8009440:	f7fc fbec 	bl	8005c1c <_printf_float>
 8009444:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009448:	4681      	mov	r9, r0
 800944a:	d1d6      	bne.n	80093fa <_svfiprintf_r+0x166>
 800944c:	89a3      	ldrh	r3, [r4, #12]
 800944e:	065b      	lsls	r3, r3, #25
 8009450:	f53f af35 	bmi.w	80092be <_svfiprintf_r+0x2a>
 8009454:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009456:	b01d      	add	sp, #116	; 0x74
 8009458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800945c:	ab03      	add	r3, sp, #12
 800945e:	9300      	str	r3, [sp, #0]
 8009460:	4622      	mov	r2, r4
 8009462:	4b07      	ldr	r3, [pc, #28]	; (8009480 <_svfiprintf_r+0x1ec>)
 8009464:	a904      	add	r1, sp, #16
 8009466:	4640      	mov	r0, r8
 8009468:	f7fc fe84 	bl	8006174 <_printf_i>
 800946c:	e7ea      	b.n	8009444 <_svfiprintf_r+0x1b0>
 800946e:	bf00      	nop
 8009470:	08009f5c 	.word	0x08009f5c
 8009474:	08009f62 	.word	0x08009f62
 8009478:	08009f66 	.word	0x08009f66
 800947c:	08005c1d 	.word	0x08005c1d
 8009480:	080091e1 	.word	0x080091e1

08009484 <_sbrk_r>:
 8009484:	b538      	push	{r3, r4, r5, lr}
 8009486:	2300      	movs	r3, #0
 8009488:	4c05      	ldr	r4, [pc, #20]	; (80094a0 <_sbrk_r+0x1c>)
 800948a:	4605      	mov	r5, r0
 800948c:	4608      	mov	r0, r1
 800948e:	6023      	str	r3, [r4, #0]
 8009490:	f7f8 fe9a 	bl	80021c8 <_sbrk>
 8009494:	1c43      	adds	r3, r0, #1
 8009496:	d102      	bne.n	800949e <_sbrk_r+0x1a>
 8009498:	6823      	ldr	r3, [r4, #0]
 800949a:	b103      	cbz	r3, 800949e <_sbrk_r+0x1a>
 800949c:	602b      	str	r3, [r5, #0]
 800949e:	bd38      	pop	{r3, r4, r5, pc}
 80094a0:	200038f0 	.word	0x200038f0

080094a4 <strncmp>:
 80094a4:	b510      	push	{r4, lr}
 80094a6:	b16a      	cbz	r2, 80094c4 <strncmp+0x20>
 80094a8:	3901      	subs	r1, #1
 80094aa:	1884      	adds	r4, r0, r2
 80094ac:	f810 3b01 	ldrb.w	r3, [r0], #1
 80094b0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d103      	bne.n	80094c0 <strncmp+0x1c>
 80094b8:	42a0      	cmp	r0, r4
 80094ba:	d001      	beq.n	80094c0 <strncmp+0x1c>
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d1f5      	bne.n	80094ac <strncmp+0x8>
 80094c0:	1a98      	subs	r0, r3, r2
 80094c2:	bd10      	pop	{r4, pc}
 80094c4:	4610      	mov	r0, r2
 80094c6:	e7fc      	b.n	80094c2 <strncmp+0x1e>

080094c8 <__ascii_wctomb>:
 80094c8:	b149      	cbz	r1, 80094de <__ascii_wctomb+0x16>
 80094ca:	2aff      	cmp	r2, #255	; 0xff
 80094cc:	bf8b      	itete	hi
 80094ce:	238a      	movhi	r3, #138	; 0x8a
 80094d0:	700a      	strbls	r2, [r1, #0]
 80094d2:	6003      	strhi	r3, [r0, #0]
 80094d4:	2001      	movls	r0, #1
 80094d6:	bf88      	it	hi
 80094d8:	f04f 30ff 	movhi.w	r0, #4294967295
 80094dc:	4770      	bx	lr
 80094de:	4608      	mov	r0, r1
 80094e0:	4770      	bx	lr

080094e2 <memmove>:
 80094e2:	4288      	cmp	r0, r1
 80094e4:	b510      	push	{r4, lr}
 80094e6:	eb01 0302 	add.w	r3, r1, r2
 80094ea:	d807      	bhi.n	80094fc <memmove+0x1a>
 80094ec:	1e42      	subs	r2, r0, #1
 80094ee:	4299      	cmp	r1, r3
 80094f0:	d00a      	beq.n	8009508 <memmove+0x26>
 80094f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094f6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80094fa:	e7f8      	b.n	80094ee <memmove+0xc>
 80094fc:	4283      	cmp	r3, r0
 80094fe:	d9f5      	bls.n	80094ec <memmove+0xa>
 8009500:	1881      	adds	r1, r0, r2
 8009502:	1ad2      	subs	r2, r2, r3
 8009504:	42d3      	cmn	r3, r2
 8009506:	d100      	bne.n	800950a <memmove+0x28>
 8009508:	bd10      	pop	{r4, pc}
 800950a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800950e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009512:	e7f7      	b.n	8009504 <memmove+0x22>

08009514 <__malloc_lock>:
 8009514:	4770      	bx	lr

08009516 <__malloc_unlock>:
 8009516:	4770      	bx	lr

08009518 <_realloc_r>:
 8009518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800951a:	4607      	mov	r7, r0
 800951c:	4614      	mov	r4, r2
 800951e:	460e      	mov	r6, r1
 8009520:	b921      	cbnz	r1, 800952c <_realloc_r+0x14>
 8009522:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009526:	4611      	mov	r1, r2
 8009528:	f7ff be00 	b.w	800912c <_malloc_r>
 800952c:	b922      	cbnz	r2, 8009538 <_realloc_r+0x20>
 800952e:	f7ff fdb1 	bl	8009094 <_free_r>
 8009532:	4625      	mov	r5, r4
 8009534:	4628      	mov	r0, r5
 8009536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009538:	f000 f814 	bl	8009564 <_malloc_usable_size_r>
 800953c:	42a0      	cmp	r0, r4
 800953e:	d20f      	bcs.n	8009560 <_realloc_r+0x48>
 8009540:	4621      	mov	r1, r4
 8009542:	4638      	mov	r0, r7
 8009544:	f7ff fdf2 	bl	800912c <_malloc_r>
 8009548:	4605      	mov	r5, r0
 800954a:	2800      	cmp	r0, #0
 800954c:	d0f2      	beq.n	8009534 <_realloc_r+0x1c>
 800954e:	4631      	mov	r1, r6
 8009550:	4622      	mov	r2, r4
 8009552:	f7ff f98d 	bl	8008870 <memcpy>
 8009556:	4631      	mov	r1, r6
 8009558:	4638      	mov	r0, r7
 800955a:	f7ff fd9b 	bl	8009094 <_free_r>
 800955e:	e7e9      	b.n	8009534 <_realloc_r+0x1c>
 8009560:	4635      	mov	r5, r6
 8009562:	e7e7      	b.n	8009534 <_realloc_r+0x1c>

08009564 <_malloc_usable_size_r>:
 8009564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009568:	1f18      	subs	r0, r3, #4
 800956a:	2b00      	cmp	r3, #0
 800956c:	bfbc      	itt	lt
 800956e:	580b      	ldrlt	r3, [r1, r0]
 8009570:	18c0      	addlt	r0, r0, r3
 8009572:	4770      	bx	lr

08009574 <_init>:
 8009574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009576:	bf00      	nop
 8009578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800957a:	bc08      	pop	{r3}
 800957c:	469e      	mov	lr, r3
 800957e:	4770      	bx	lr

08009580 <_fini>:
 8009580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009582:	bf00      	nop
 8009584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009586:	bc08      	pop	{r3}
 8009588:	469e      	mov	lr, r3
 800958a:	4770      	bx	lr
